[
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#tuesday-october-8",
    "href": "slides/week-3/week-3-dplyr-pt1.html#tuesday-october-8",
    "title": "Data Wrangling with dplyr",
    "section": "Tuesday, October 8",
    "text": "Tuesday, October 8\nToday we will…\n\nNew Material\n\nIntroduce the dplyr package.\nUse dplyr verbs to manipulate data.\n\nPA 3: Identify the Mystery College"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#dplyr",
    "href": "slides/week-3/week-3-dplyr-pt1.html#dplyr",
    "title": "Data Wrangling with dplyr",
    "section": "dplyr",
    "text": "dplyr\ndplyr is part of the tidyverse that provides us with the Grammar of Data Wrangling.\n\nThis package gives us the tools to wrangle and tidy our data with ease.\nCheck out the dplyr cheatsheet."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#dplyr-verbs",
    "href": "slides/week-3/week-3-dplyr-pt1.html#dplyr-verbs",
    "title": "Data Wrangling with dplyr",
    "section": "dplyr verbs",
    "text": "dplyr verbs\n\n\nfilter() – select rows based on their values\nselect() – select columns\nmutate() – add new columns or change existing columns\nsummarize() – perform summary operations on columns\ngroup_by() – facilitate group-wise operations\narrange() – sort rows based on their values\n\n\n\n\nUse the pipe operator (|&gt; or %&gt;%) to chain together data wrangling operations."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-1",
    "title": "Data Wrangling with dplyr",
    "section": "The Pipe Operator",
    "text": "The Pipe Operator\n\nWith dplyr, your code should read like a sentence.\nThe data is the primary object in your sentence, so it should come first in your code.\n\n\n\nThe pipe operator is an important part of that readability."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-2",
    "href": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-2",
    "title": "Data Wrangling with dplyr",
    "section": "The Pipe Operator",
    "text": "The Pipe Operator\n\nThe pipe specifies a sequence of operations.\n\nThe output from one operation is passed into the first argument (the dataset) of the next operation.\n\n\n\n\nThe “original” pipe: %&gt;%\n\nLoaded with tidyverse package (part of magrittr).\n\nThe “native” pipe: |&gt;\n\nCreated in R version 4.1.0.\nDirections for how to use"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-3",
    "href": "slides/week-3/week-3-dplyr-pt1.html#the-pipe-operator-3",
    "title": "Data Wrangling with dplyr",
    "section": "The Pipe Operator",
    "text": "The Pipe Operator\n\ndr_theobold |&gt;\n  play_a_sport()\n\n\n\n\ndr_theobold |&gt;\n  put_on(\"cleats\") |&gt;\n  play_a_sport(type = \"track\")"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#data-comes-first",
    "href": "slides/week-3/week-3-dplyr-pt1.html#data-comes-first",
    "title": "Data Wrangling with dplyr",
    "section": "Data Comes First!",
    "text": "Data Comes First!\n\n\nfilter(.data = cereal, ...)\nselect(.data = cereal, ...)\nmutate(.data = cereal, ...)\n\n\n\nYou can choose whether to:\n\n\ndeclare your data using the .data argument\n\nsummarize(.data = cereal)\n\n\nor\n\n\npipe your data into the first argument of the function\n\ncereal |&gt; \n  summarize()"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#i",
    "href": "slides/week-3/week-3-dplyr-pt1.html#i",
    "title": "Data Wrangling with dplyr",
    "section": "I ❤️ |>",
    "text": "I ❤️ |&gt;\n\nThe pipe operator is your friend!\nYou can pipe data or summaries directly into your ggplot2 code for plotting!\n\n\ncereals |&gt;\n  mutate(type = as.factor(type)) |&gt; \n  rename(temp = type) |&gt;  \n  filter(temp == \"C\") |&gt;\n  ggplot(mapping = aes(x = calories)) +\n    geom_histogram(binwidth = 17)"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#example-data-set-cereal",
    "href": "slides/week-3/week-3-dplyr-pt1.html#example-data-set-cereal",
    "title": "Data Wrangling with dplyr",
    "section": "Example Data set – Cereal",
    "text": "Example Data set – Cereal\n\nlibrary(liver)\ndata(cereal)\n\n\n\nData StructureData Summary\n\n\n\n\nglimpse(cereal)\n\nRows: 77\nColumns: 16\n$ name     &lt;fct&gt; 100% Bran, 100% Natural Bran, All-Bran, All-Bran with Extra F…\n$ manuf    &lt;fct&gt; N, Q, K, K, R, G, K, G, R, P, Q, G, G, G, G, R, K, K, G, K, N…\n$ type     &lt;fct&gt; cold, cold, cold, cold, cold, cold, cold, cold, cold, cold, c…\n$ calories &lt;int&gt; 70, 120, 70, 50, 110, 110, 110, 130, 90, 90, 120, 110, 120, 1…\n$ protein  &lt;int&gt; 4, 3, 4, 4, 2, 2, 2, 3, 2, 3, 1, 6, 1, 3, 1, 2, 2, 1, 1, 3, 3…\n$ fat      &lt;int&gt; 1, 5, 1, 0, 2, 2, 0, 2, 1, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 3, 0…\n$ sodium   &lt;int&gt; 130, 15, 260, 140, 200, 180, 125, 210, 200, 210, 220, 290, 21…\n$ fiber    &lt;dbl&gt; 10.0, 2.0, 9.0, 14.0, 1.0, 1.5, 1.0, 2.0, 4.0, 5.0, 0.0, 2.0,…\n$ carbo    &lt;dbl&gt; 5.0, 8.0, 7.0, 8.0, 14.0, 10.5, 11.0, 18.0, 15.0, 13.0, 12.0,…\n$ sugars   &lt;int&gt; 6, 8, 5, 0, 8, 10, 14, 8, 6, 5, 12, 1, 9, 7, 13, 3, 2, 12, 13…\n$ potass   &lt;int&gt; 280, 135, 320, 330, -1, 70, 30, 100, 125, 190, 35, 105, 45, 1…\n$ vitamins &lt;int&gt; 25, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25…\n$ shelf    &lt;int&gt; 3, 3, 3, 3, 3, 1, 2, 3, 1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 2, 3, 2…\n$ weight   &lt;dbl&gt; 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.33, 1.00, 1.00, 1…\n$ cups     &lt;dbl&gt; 0.33, 1.00, 0.33, 0.50, 0.75, 0.75, 1.00, 0.75, 0.67, 0.67, 0…\n$ rating   &lt;dbl&gt; 68.40297, 33.98368, 59.42551, 93.70491, 34.38484, 29.50954, 3…\n\n\n\n\n\n\n\nsummary(cereal)\n\n                        name    manuf    type       calories    \n 100% Bran                : 1   A: 1   cold:74   Min.   : 50.0  \n 100% Natural Bran        : 1   G:22   hot : 3   1st Qu.:100.0  \n All-Bran                 : 1   K:23             Median :110.0  \n All-Bran with Extra Fiber: 1   N: 6             Mean   :106.9  \n Almond Delight           : 1   P: 9             3rd Qu.:110.0  \n Apple Cinnamon Cheerios  : 1   Q: 8             Max.   :160.0  \n (Other)                  :71   R: 8                            \n    protein           fat            sodium          fiber       \n Min.   :1.000   Min.   :0.000   Min.   :  0.0   Min.   : 0.000  \n 1st Qu.:2.000   1st Qu.:0.000   1st Qu.:130.0   1st Qu.: 1.000  \n Median :3.000   Median :1.000   Median :180.0   Median : 2.000  \n Mean   :2.545   Mean   :1.013   Mean   :159.7   Mean   : 2.152  \n 3rd Qu.:3.000   3rd Qu.:2.000   3rd Qu.:210.0   3rd Qu.: 3.000  \n Max.   :6.000   Max.   :5.000   Max.   :320.0   Max.   :14.000  \n                                                                 \n     carbo          sugars           potass          vitamins     \n Min.   :-1.0   Min.   :-1.000   Min.   : -1.00   Min.   :  0.00  \n 1st Qu.:12.0   1st Qu.: 3.000   1st Qu.: 40.00   1st Qu.: 25.00  \n Median :14.0   Median : 7.000   Median : 90.00   Median : 25.00  \n Mean   :14.6   Mean   : 6.922   Mean   : 96.08   Mean   : 28.25  \n 3rd Qu.:17.0   3rd Qu.:11.000   3rd Qu.:120.00   3rd Qu.: 25.00  \n Max.   :23.0   Max.   :15.000   Max.   :330.00   Max.   :100.00  \n                                                                  \n     shelf           weight          cups           rating     \n Min.   :1.000   Min.   :0.50   Min.   :0.250   Min.   :18.04  \n 1st Qu.:1.000   1st Qu.:1.00   1st Qu.:0.670   1st Qu.:33.17  \n Median :2.000   Median :1.00   Median :0.750   Median :40.40  \n Mean   :2.208   Mean   :1.03   Mean   :0.821   Mean   :42.67  \n 3rd Qu.:3.000   3rd Qu.:1.00   3rd Qu.:1.000   3rd Qu.:50.83  \n Max.   :3.000   Max.   :1.50   Max.   :1.500   Max.   :93.70"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-1",
    "title": "Data Wrangling with dplyr",
    "section": "filter()",
    "text": "filter()\nWe filter to the rows (observations) we would like to keep in the data.\n\n\ncereal |&gt; \n  filter(sugars &lt; 5)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17\n3\n110\n25\n1\n1.00\n1.00\n51.59219"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-2",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-2",
    "title": "Data Wrangling with dplyr",
    "section": "filter()",
    "text": "filter()\nWe can add multiple filters to our data, to get a more specific subset.\n\ncereal |&gt; \n  filter(sugars &lt; 5,\n         type == \"hot\")\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21\n0\n-1\n0\n2\n1\n1.00\n64.53382\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16\n3\n95\n25\n2\n1\n1.00\n54.85092\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1\n-1\n110\n0\n1\n1\n0.67\n50.82839"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#why-not-use",
    "href": "slides/week-3/week-3-dplyr-pt1.html#why-not-use",
    "title": "Data Wrangling with dplyr",
    "section": "Why not use &?",
    "text": "Why not use &?\nThe , separating these two conditions is equivalent to using an &. Why not just use a &?\n\nWell, with a lot of &s your code can get hard to read…\n\nfilter(sugars &lt; 5 & type == \"cold\" & calories &gt; 100)\n\n\n\n\nSo instead we use commas.\n\nfilter(sugars &lt; 5, \n       type == \"cold\", \n       calories &gt; 100)"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-handy-helpers",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-handy-helpers",
    "title": "Data Wrangling with dplyr",
    "section": "filter(): Handy Helpers!",
    "text": "filter(): Handy Helpers!\n\n&gt; : greater than\n&lt; : less than\n&gt;= or &lt;=: greater than / less than or equal to\n== : equal to\n! : not\n%in% : checks if an element belongs to a vector\nis.na() : binary evaluation of missing values\n| : or"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-3",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-3",
    "title": "Data Wrangling with dplyr",
    "section": "filter(): |",
    "text": "filter(): |\nWhat if I wanted either non-sugary cereals or hot cereals…\n\n\ncereal |&gt; \n  filter(sugars &lt; 5 |\n           type == \"hot\")\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17\n3\n110\n25\n1\n1.00\n1.00\n51.59219"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-in",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-in",
    "title": "Data Wrangling with dplyr",
    "section": "filter(): %in%",
    "text": "filter(): %in%\nAre you interested in observations with values in a list of levels?\n\n\ncereal |&gt; \n  filter(name %in% c(\"Cheerios\", \n                     \"Cinnamon Toast Crunch\", \n                     \"Raisin Bran\", \n                     \"Cracklin' Oat Bran\")\n         )\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2\n17\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0\n13\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4\n10\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5\n14\n12\n240\n25\n2\n1.33\n0.75\n39.25920"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#filter-related-functions",
    "href": "slides/week-3/week-3-dplyr-pt1.html#filter-related-functions",
    "title": "Data Wrangling with dplyr",
    "section": "filter(): Related Functions",
    "text": "filter(): Related Functions\nThese functions select rows by row number.\n\nslice() – select rows with the specified indices\nslice_head() – select the first n rows\nslice_tail() – select the last n rows\nslice_sample() – randomly select n rows"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-filter-in-base-r",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-filter-in-base-r",
    "title": "Data Wrangling with dplyr",
    "section": "How do we “filter” in base R?",
    "text": "How do we “filter” in base R?\n\nYou can use the subset() function!\n\ncereal |&gt; \n  subset(name %in% c(\"Cheerios\", \n                     \"Cinnamon Toast Crunch\", \n                     \"Raisin Bran\", \n                     \"Cracklin' Oat Bran\")\n         )\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n12\nCheerios\nG\ncold\n110\n6\n2\n290\n2\n17\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\n13\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0\n13\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\n20\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4\n10\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\n59\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5\n14\n12\n240\n25\n2\n1.33\n0.75\n39.25920"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#another-example-of-the-subset-function",
    "href": "slides/week-3/week-3-dplyr-pt1.html#another-example-of-the-subset-function",
    "title": "Data Wrangling with dplyr",
    "section": "Another example of the subset() function…",
    "text": "Another example of the subset() function…\n\ncereal |&gt; \n  subset(sugars &lt; 5 & type == \"hot\")\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n21\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21\n0\n-1\n0\n2\n1\n1.00\n64.53382\n\n\n44\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16\n3\n95\n25\n2\n1\n1.00\n54.85092\n\n\n58\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1\n-1\n110\n0\n1\n1\n0.67\n50.82839"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#arrange-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#arrange-1",
    "title": "Data Wrangling with dplyr",
    "section": "arrange()",
    "text": "arrange()\nWe arrange the rows of the data in order of a particular variable.\n\n\n\ncereal |&gt; \n  arrange(sodium)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#arrange-2",
    "href": "slides/week-3/week-3-dplyr-pt1.html#arrange-2",
    "title": "Data Wrangling with dplyr",
    "section": "arrange()",
    "text": "arrange()\nWe can arrange by multiple variables.\n\n\ncereal |&gt; \n  arrange(sodium, sugars) |&gt;\n  select(name, manuf, type, sodium, sugars)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\nsodium\nsugars\n\n\n\n\nQuaker Oatmeal\nQ\nhot\n0\n-1\n\n\nPuffed Rice\nQ\ncold\n0\n0\n\n\nPuffed Wheat\nQ\ncold\n0\n0\n\n\nShredded Wheat\nN\ncold\n0\n0\n\n\nShredded Wheat 'n'Bran\nN\ncold\n0\n0\n\n\nShredded Wheat spoon size\nN\ncold\n0\n0\n\n\nMaypo\nA\nhot\n0\n3\n\n\nRaisin Squares\nK\ncold\n0\n6\n\n\nFrosted Mini-Wheats\nK\ncold\n0\n7\n\n\nStrawberry Fruit Wheats\nN\ncold\n15\n5\n\n\n100% Natural Bran\nQ\ncold\n15\n8\n\n\nGolden Crisp\nP\ncold\n45\n15\n\n\nSmacks\nK\ncold\n70\n15\n\n\nGreat Grains Pecan\nP\ncold\n75\n4\n\n\nCream of Wheat (Quick)\nN\nhot\n80\n0\n\n\nCorn Pops\nK\ncold\n90\n12\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n95\n11\n\n\nFroot Loops\nK\ncold\n125\n13\n\n\nApple Jacks\nK\ncold\n125\n14\n\n\n100% Bran\nN\ncold\n130\n6\n\n\nQuaker Oat Squares\nQ\ncold\n135\n6\n\n\nFruity Pebbles\nP\ncold\n135\n12\n\n\nAll-Bran with Extra Fiber\nK\ncold\n140\n0\n\n\nGrape Nuts Flakes\nP\ncold\n140\n5\n\n\nClusters\nG\ncold\n140\n7\n\n\nCracklin' Oat Bran\nK\ncold\n140\n7\n\n\nRaisin Nut Bran\nG\ncold\n140\n8\n\n\nCrispy Wheat & Raisins\nG\ncold\n140\n10\n\n\nTrix\nG\ncold\n140\n12\n\n\nLife\nQ\ncold\n150\n6\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n11\n\n\nMueslix Crispy Blend\nK\ncold\n150\n13\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n160\n10\n\n\nNutri-grain Wheat\nK\ncold\n170\n2\n\n\nGrape-Nuts\nP\ncold\n170\n3\n\n\nJust Right Crunchy Nuggets\nK\ncold\n170\n6\n\n\nJust Right Fruit & Nut\nK\ncold\n170\n9\n\n\nOatmeal Raisin Crisp\nG\ncold\n170\n10\n\n\nApple Cinnamon Cheerios\nG\ncold\n180\n10\n\n\nHoney-comb\nP\ncold\n180\n11\n\n\nLucky Charms\nG\ncold\n180\n12\n\n\nCocoa Puffs\nG\ncold\n180\n13\n\n\nCount Chocula\nG\ncold\n180\n13\n\n\nDouble Chex\nR\ncold\n190\n5\n\n\nNut&Honey Crunch\nK\ncold\n190\n9\n\n\nTotal Raisin Bran\nG\ncold\n190\n14\n\n\nTotal Corn Flakes\nG\ncold\n200\n3\n\n\nTotal Whole Grain\nG\ncold\n200\n3\n\n\nWheaties\nG\ncold\n200\n3\n\n\nBran Chex\nR\ncold\n200\n6\n\n\nAlmond Delight\nR\ncold\n200\n8\n\n\nWheaties Honey Gold\nG\ncold\n200\n8\n\n\nFrosted Flakes\nK\ncold\n200\n11\n\n\nPost Nat. Raisin Bran\nP\ncold\n200\n14\n\n\nBran Flakes\nP\ncold\n210\n5\n\n\nBasic 4\nG\ncold\n210\n8\n\n\nCinnamon Toast Crunch\nG\ncold\n210\n9\n\n\nRaisin Bran\nK\ncold\n210\n12\n\n\nCrispix\nK\ncold\n220\n3\n\n\nMulti-Grain Cheerios\nG\ncold\n220\n6\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n220\n7\n\n\nHoney Graham Ohs\nQ\ncold\n220\n11\n\n\nCap'n'Crunch\nQ\ncold\n220\n12\n\n\nSpecial K\nK\ncold\n230\n3\n\n\nWheat Chex\nR\ncold\n230\n3\n\n\nRice Chex\nR\ncold\n240\n2\n\n\nFruitful Bran\nK\ncold\n240\n12\n\n\nTriples\nG\ncold\n250\n3\n\n\nHoney Nut Cheerios\nG\ncold\n250\n10\n\n\nKix\nG\ncold\n260\n3\n\n\nAll-Bran\nK\ncold\n260\n5\n\n\nCorn Chex\nR\ncold\n280\n3\n\n\nGolden Grahams\nG\ncold\n280\n9\n\n\nCheerios\nG\ncold\n290\n1\n\n\nCorn Flakes\nK\ncold\n290\n2\n\n\nRice Krispies\nK\ncold\n290\n3\n\n\nProduct 19\nK\ncold\n320\n3"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#arrange-descending-order",
    "href": "slides/week-3/week-3-dplyr-pt1.html#arrange-descending-order",
    "title": "Data Wrangling with dplyr",
    "section": "arrange(): Descending Order",
    "text": "arrange(): Descending Order\nDefault is ascending order…\n…but can add desc() to get descending order!\n\ncereal |&gt; \n  arrange(desc(sodium))\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#arrange-related-functions",
    "href": "slides/week-3/week-3-dplyr-pt1.html#arrange-related-functions",
    "title": "Data Wrangling with dplyr",
    "section": "arrange(): Related Functions",
    "text": "arrange(): Related Functions\nThese functions implicitly arrange the data before slicing it (selecting rows).\n\nslice_min() – select rows with the lowest value(s) of a variable\nslice_max() – select rows with the highest value(s) of a variable"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#slice_max",
    "href": "slides/week-3/week-3-dplyr-pt1.html#slice_max",
    "title": "Data Wrangling with dplyr",
    "section": "slice_max()",
    "text": "slice_max()\nSelects the n rows with the maximum values of the specified variable.\n\ncereal |&gt; \n  slice_max(order_by = sugars, n = 3)\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0\n11\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1\n9\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1\n11\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6\n11\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4\n15\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNot interested in ties?\n\n\nYou can use the with_ties = FALSE argument to remove ties from your output!"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-arrange-in-base-r",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-arrange-in-base-r",
    "title": "Data Wrangling with dplyr",
    "section": "How do we “arrange” in base R?",
    "text": "How do we “arrange” in base R?\nYou can use the order() function!\n\n\ncereal[order(cereal$sodium, cereal$sugars),]\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n58\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\n55\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\n56\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\n64\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\n65\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\n66\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\n44\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\n61\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\n27\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\n69\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\n2\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\n31\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\n67\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\n35\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\n21\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\n18\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\n45\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\n25\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\n7\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\n1\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n57\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\n30\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\n4\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\n33\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\n14\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\n20\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\n60\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\n23\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\n74\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\n42\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\n46\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\n47\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\n28\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\n51\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\n34\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\n39\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\n40\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\n52\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\n6\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\n38\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\n43\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\n15\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\n19\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\n24\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\n49\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\n71\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\n70\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\n72\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\n76\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\n9\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\n5\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\n77\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n\n\n26\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\n53\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\n10\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\n8\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\n13\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\n59\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\n22\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\n48\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\n50\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\n36\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\n11\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\n68\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\n75\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\n62\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\n29\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\n73\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\n37\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\n41\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\n3\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\n16\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\n32\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\n12\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\n17\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\n63\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\n54\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#select-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#select-1",
    "title": "Data Wrangling with dplyr",
    "section": "select()",
    "text": "select()\nWe select which variables (columns) we would like to remain in the data.\n\n\ncereal |&gt; \n  select(name, manuf, calories, cups)\n\n\n\n\n\n\n\nname\nmanuf\ncalories\ncups\n\n\n\n\n100% Bran\nN\n70\n0.33\n\n\n100% Natural Bran\nQ\n120\n1.00\n\n\nAll-Bran\nK\n70\n0.33\n\n\nAll-Bran with Extra Fiber\nK\n50\n0.50\n\n\nAlmond Delight\nR\n110\n0.75\n\n\nApple Cinnamon Cheerios\nG\n110\n0.75\n\n\nApple Jacks\nK\n110\n1.00\n\n\nBasic 4\nG\n130\n0.75\n\n\nBran Chex\nR\n90\n0.67\n\n\nBran Flakes\nP\n90\n0.67\n\n\nCap'n'Crunch\nQ\n120\n0.75\n\n\nCheerios\nG\n110\n1.25\n\n\nCinnamon Toast Crunch\nG\n120\n0.75\n\n\nClusters\nG\n110\n0.50\n\n\nCocoa Puffs\nG\n110\n1.00\n\n\nCorn Chex\nR\n110\n1.00\n\n\nCorn Flakes\nK\n100\n1.00\n\n\nCorn Pops\nK\n110\n1.00\n\n\nCount Chocula\nG\n110\n1.00\n\n\nCracklin' Oat Bran\nK\n110\n0.50\n\n\nCream of Wheat (Quick)\nN\n100\n1.00\n\n\nCrispix\nK\n110\n1.00\n\n\nCrispy Wheat & Raisins\nG\n100\n0.75\n\n\nDouble Chex\nR\n100\n0.75\n\n\nFroot Loops\nK\n110\n1.00\n\n\nFrosted Flakes\nK\n110\n0.75\n\n\nFrosted Mini-Wheats\nK\n100\n0.80\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\n120\n0.67\n\n\nFruitful Bran\nK\n120\n0.67\n\n\nFruity Pebbles\nP\n110\n0.75\n\n\nGolden Crisp\nP\n100\n0.88\n\n\nGolden Grahams\nG\n110\n0.75\n\n\nGrape Nuts Flakes\nP\n100\n0.88\n\n\nGrape-Nuts\nP\n110\n0.25\n\n\nGreat Grains Pecan\nP\n120\n0.33\n\n\nHoney Graham Ohs\nQ\n120\n1.00\n\n\nHoney Nut Cheerios\nG\n110\n0.75\n\n\nHoney-comb\nP\n110\n1.33\n\n\nJust Right Crunchy Nuggets\nK\n110\n1.00\n\n\nJust Right Fruit & Nut\nK\n140\n0.75\n\n\nKix\nG\n110\n1.50\n\n\nLife\nQ\n100\n0.67\n\n\nLucky Charms\nG\n110\n1.00\n\n\nMaypo\nA\n100\n1.00\n\n\nMuesli Raisins; Dates; & Almonds\nR\n150\n1.00\n\n\nMuesli Raisins; Peaches; & Pecans\nR\n150\n1.00\n\n\nMueslix Crispy Blend\nK\n160\n0.67\n\n\nMulti-Grain Cheerios\nG\n100\n1.00\n\n\nNut&Honey Crunch\nK\n120\n0.67\n\n\nNutri-Grain Almond-Raisin\nK\n140\n0.67\n\n\nNutri-grain Wheat\nK\n90\n1.00\n\n\nOatmeal Raisin Crisp\nG\n130\n0.50\n\n\nPost Nat. Raisin Bran\nP\n120\n0.67\n\n\nProduct 19\nK\n100\n1.00\n\n\nPuffed Rice\nQ\n50\n1.00\n\n\nPuffed Wheat\nQ\n50\n1.00\n\n\nQuaker Oat Squares\nQ\n100\n0.50\n\n\nQuaker Oatmeal\nQ\n100\n0.67\n\n\nRaisin Bran\nK\n120\n0.75\n\n\nRaisin Nut Bran\nG\n100\n0.50\n\n\nRaisin Squares\nK\n90\n0.50\n\n\nRice Chex\nR\n110\n1.13\n\n\nRice Krispies\nK\n110\n1.00\n\n\nShredded Wheat\nN\n80\n1.00\n\n\nShredded Wheat 'n'Bran\nN\n90\n0.67\n\n\nShredded Wheat spoon size\nN\n90\n0.67\n\n\nSmacks\nK\n110\n0.75\n\n\nSpecial K\nK\n110\n1.00\n\n\nStrawberry Fruit Wheats\nN\n90\n1.00\n\n\nTotal Corn Flakes\nG\n110\n1.00\n\n\nTotal Raisin Bran\nG\n140\n1.00\n\n\nTotal Whole Grain\nG\n100\n1.00\n\n\nTriples\nG\n110\n0.75\n\n\nTrix\nG\n110\n1.00\n\n\nWheat Chex\nR\n100\n0.67\n\n\nWheaties\nG\n100\n1.00\n\n\nWheaties Honey Gold\nG\n110\n0.75"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#select-a-sequence-of-columns",
    "href": "slides/week-3/week-3-dplyr-pt1.html#select-a-sequence-of-columns",
    "title": "Data Wrangling with dplyr",
    "section": "select() a Sequence of Columns",
    "text": "select() a Sequence of Columns\n\ncereal |&gt; \n  select(name:calories)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\n\n\n\n\n100% Bran\nN\ncold\n70\n\n\n100% Natural Bran\nQ\ncold\n120\n\n\nAll-Bran\nK\ncold\n70\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n\n\nAlmond Delight\nR\ncold\n110\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n\n\nApple Jacks\nK\ncold\n110\n\n\nBasic 4\nG\ncold\n130\n\n\nBran Chex\nR\ncold\n90\n\n\nBran Flakes\nP\ncold\n90\n\n\nCap'n'Crunch\nQ\ncold\n120\n\n\nCheerios\nG\ncold\n110\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n\n\nClusters\nG\ncold\n110\n\n\nCocoa Puffs\nG\ncold\n110\n\n\nCorn Chex\nR\ncold\n110\n\n\nCorn Flakes\nK\ncold\n100\n\n\nCorn Pops\nK\ncold\n110\n\n\nCount Chocula\nG\ncold\n110\n\n\nCracklin' Oat Bran\nK\ncold\n110\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n\n\nCrispix\nK\ncold\n110\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n\n\nDouble Chex\nR\ncold\n100\n\n\nFroot Loops\nK\ncold\n110\n\n\nFrosted Flakes\nK\ncold\n110\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n\n\nFruitful Bran\nK\ncold\n120\n\n\nFruity Pebbles\nP\ncold\n110\n\n\nGolden Crisp\nP\ncold\n100\n\n\nGolden Grahams\nG\ncold\n110\n\n\nGrape Nuts Flakes\nP\ncold\n100\n\n\nGrape-Nuts\nP\ncold\n110\n\n\nGreat Grains Pecan\nP\ncold\n120\n\n\nHoney Graham Ohs\nQ\ncold\n120\n\n\nHoney Nut Cheerios\nG\ncold\n110\n\n\nHoney-comb\nP\ncold\n110\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n\n\nKix\nG\ncold\n110\n\n\nLife\nQ\ncold\n100\n\n\nLucky Charms\nG\ncold\n110\n\n\nMaypo\nA\nhot\n100\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n\n\nMueslix Crispy Blend\nK\ncold\n160\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n\n\nNut&Honey Crunch\nK\ncold\n120\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n\n\nNutri-grain Wheat\nK\ncold\n90\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n\n\nProduct 19\nK\ncold\n100\n\n\nPuffed Rice\nQ\ncold\n50\n\n\nPuffed Wheat\nQ\ncold\n50\n\n\nQuaker Oat Squares\nQ\ncold\n100\n\n\nQuaker Oatmeal\nQ\nhot\n100\n\n\nRaisin Bran\nK\ncold\n120\n\n\nRaisin Nut Bran\nG\ncold\n100\n\n\nRaisin Squares\nK\ncold\n90\n\n\nRice Chex\nR\ncold\n110\n\n\nRice Krispies\nK\ncold\n110\n\n\nShredded Wheat\nN\ncold\n80\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n\n\nShredded Wheat spoon size\nN\ncold\n90\n\n\nSmacks\nK\ncold\n110\n\n\nSpecial K\nK\ncold\n110\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n\n\nTotal Corn Flakes\nG\ncold\n110\n\n\nTotal Raisin Bran\nG\ncold\n140\n\n\nTotal Whole Grain\nG\ncold\n100\n\n\nTriples\nG\ncold\n110\n\n\nTrix\nG\ncold\n110\n\n\nWheat Chex\nR\ncold\n100\n\n\nWheaties\nG\ncold\n100\n\n\nWheaties Honey Gold\nG\ncold\n110"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#remove-columns",
    "href": "slides/week-3/week-3-dplyr-pt1.html#remove-columns",
    "title": "Data Wrangling with dplyr",
    "section": "Remove Columns",
    "text": "Remove Columns\n\ncereal |&gt; \n  select(-rating)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#select-reordering",
    "href": "slides/week-3/week-3-dplyr-pt1.html#select-reordering",
    "title": "Data Wrangling with dplyr",
    "section": "select(): Reordering",
    "text": "select(): Reordering\nYou can reorder columns inside of select().\n\ncereal |&gt; \n  select(name, rating, manuf, type, \n         calories, cups, weight,\n         everything()\n         )\n\n\n\n\n\n\n\nname\nrating\nmanuf\ntype\ncalories\ncups\nweight\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\n\n\n\n\n100% Bran\n68.40297\nN\ncold\n70\n0.33\n1.00\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n\n\n100% Natural Bran\n33.98368\nQ\ncold\n120\n1.00\n1.00\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n\n\nAll-Bran\n59.42551\nK\ncold\n70\n0.33\n1.00\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n\n\nAll-Bran with Extra Fiber\n93.70491\nK\ncold\n50\n0.50\n1.00\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n\n\nAlmond Delight\n34.38484\nR\ncold\n110\n0.75\n1.00\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n\n\nApple Cinnamon Cheerios\n29.50954\nG\ncold\n110\n0.75\n1.00\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n\n\nApple Jacks\n33.17409\nK\ncold\n110\n1.00\n1.00\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n\n\nBasic 4\n37.03856\nG\ncold\n130\n0.75\n1.33\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n\n\nBran Chex\n49.12025\nR\ncold\n90\n0.67\n1.00\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n\n\nBran Flakes\n53.31381\nP\ncold\n90\n0.67\n1.00\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n\n\nCap'n'Crunch\n18.04285\nQ\ncold\n120\n0.75\n1.00\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n\n\nCheerios\n50.76500\nG\ncold\n110\n1.25\n1.00\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n\n\nCinnamon Toast Crunch\n19.82357\nG\ncold\n120\n0.75\n1.00\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n\n\nClusters\n40.40021\nG\ncold\n110\n0.50\n1.00\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n\n\nCocoa Puffs\n22.73645\nG\ncold\n110\n1.00\n1.00\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n\n\nCorn Chex\n41.44502\nR\ncold\n110\n1.00\n1.00\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n\n\nCorn Flakes\n45.86332\nK\ncold\n100\n1.00\n1.00\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n\n\nCorn Pops\n35.78279\nK\ncold\n110\n1.00\n1.00\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n\n\nCount Chocula\n22.39651\nG\ncold\n110\n1.00\n1.00\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n\n\nCracklin' Oat Bran\n40.44877\nK\ncold\n110\n0.50\n1.00\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n\n\nCream of Wheat (Quick)\n64.53382\nN\nhot\n100\n1.00\n1.00\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n\n\nCrispix\n46.89564\nK\ncold\n110\n1.00\n1.00\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n\n\nCrispy Wheat & Raisins\n36.17620\nG\ncold\n100\n0.75\n1.00\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n\n\nDouble Chex\n44.33086\nR\ncold\n100\n0.75\n1.00\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n\n\nFroot Loops\n32.20758\nK\ncold\n110\n1.00\n1.00\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n\n\nFrosted Flakes\n31.43597\nK\ncold\n110\n0.75\n1.00\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n\n\nFrosted Mini-Wheats\n58.34514\nK\ncold\n100\n0.80\n1.00\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n\n\nFruit & Fibre Dates; Walnuts; and Oats\n40.91705\nP\ncold\n120\n0.67\n1.25\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n\n\nFruitful Bran\n41.01549\nK\ncold\n120\n0.67\n1.33\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n\n\nFruity Pebbles\n28.02576\nP\ncold\n110\n0.75\n1.00\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n\n\nGolden Crisp\n35.25244\nP\ncold\n100\n0.88\n1.00\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n\n\nGolden Grahams\n23.80404\nG\ncold\n110\n0.75\n1.00\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n\n\nGrape Nuts Flakes\n52.07690\nP\ncold\n100\n0.88\n1.00\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n\n\nGrape-Nuts\n53.37101\nP\ncold\n110\n0.25\n1.00\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n\n\nGreat Grains Pecan\n45.81172\nP\ncold\n120\n0.33\n1.00\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n\n\nHoney Graham Ohs\n21.87129\nQ\ncold\n120\n1.00\n1.00\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n\n\nHoney Nut Cheerios\n31.07222\nG\ncold\n110\n0.75\n1.00\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n\n\nHoney-comb\n28.74241\nP\ncold\n110\n1.33\n1.00\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n\n\nJust Right Crunchy Nuggets\n36.52368\nK\ncold\n110\n1.00\n1.00\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n\n\nJust Right Fruit & Nut\n36.47151\nK\ncold\n140\n0.75\n1.30\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n\n\nKix\n39.24111\nG\ncold\n110\n1.50\n1.00\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n\n\nLife\n45.32807\nQ\ncold\n100\n0.67\n1.00\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n\n\nLucky Charms\n26.73451\nG\ncold\n110\n1.00\n1.00\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n\n\nMaypo\n54.85092\nA\nhot\n100\n1.00\n1.00\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n\n\nMuesli Raisins; Dates; & Almonds\n37.13686\nR\ncold\n150\n1.00\n1.00\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n\n\nMuesli Raisins; Peaches; & Pecans\n34.13976\nR\ncold\n150\n1.00\n1.00\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n\n\nMueslix Crispy Blend\n30.31335\nK\ncold\n160\n0.67\n1.50\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n\n\nMulti-Grain Cheerios\n40.10596\nG\ncold\n100\n1.00\n1.00\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n\n\nNut&Honey Crunch\n29.92429\nK\ncold\n120\n0.67\n1.00\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n\n\nNutri-Grain Almond-Raisin\n40.69232\nK\ncold\n140\n0.67\n1.33\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n\n\nNutri-grain Wheat\n59.64284\nK\ncold\n90\n1.00\n1.00\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n\n\nOatmeal Raisin Crisp\n30.45084\nG\ncold\n130\n0.50\n1.25\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n\n\nPost Nat. Raisin Bran\n37.84059\nP\ncold\n120\n0.67\n1.33\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n\n\nProduct 19\n41.50354\nK\ncold\n100\n1.00\n1.00\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n\n\nPuffed Rice\n60.75611\nQ\ncold\n50\n1.00\n0.50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n\n\nPuffed Wheat\n63.00565\nQ\ncold\n50\n1.00\n0.50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n\n\nQuaker Oat Squares\n49.51187\nQ\ncold\n100\n0.50\n1.00\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n\n\nQuaker Oatmeal\n50.82839\nQ\nhot\n100\n0.67\n1.00\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n\n\nRaisin Bran\n39.25920\nK\ncold\n120\n0.75\n1.33\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n\n\nRaisin Nut Bran\n39.70340\nG\ncold\n100\n0.50\n1.00\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n\n\nRaisin Squares\n55.33314\nK\ncold\n90\n0.50\n1.00\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n\n\nRice Chex\n41.99893\nR\ncold\n110\n1.13\n1.00\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n\n\nRice Krispies\n40.56016\nK\ncold\n110\n1.00\n1.00\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n\n\nShredded Wheat\n68.23588\nN\ncold\n80\n1.00\n0.83\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n\n\nShredded Wheat 'n'Bran\n74.47295\nN\ncold\n90\n0.67\n1.00\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n\n\nShredded Wheat spoon size\n72.80179\nN\ncold\n90\n0.67\n1.00\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n\n\nSmacks\n31.23005\nK\ncold\n110\n0.75\n1.00\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n\n\nSpecial K\n53.13132\nK\ncold\n110\n1.00\n1.00\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n\n\nStrawberry Fruit Wheats\n59.36399\nN\ncold\n90\n1.00\n1.00\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n\n\nTotal Corn Flakes\n38.83975\nG\ncold\n110\n1.00\n1.00\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n\n\nTotal Raisin Bran\n28.59278\nG\ncold\n140\n1.00\n1.50\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n\n\nTotal Whole Grain\n46.65884\nG\ncold\n100\n1.00\n1.00\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n\n\nTriples\n39.10617\nG\ncold\n110\n0.75\n1.00\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n\n\nTrix\n27.75330\nG\ncold\n110\n1.00\n1.00\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n\n\nWheat Chex\n49.78744\nR\ncold\n100\n0.67\n1.00\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n\n\nWheaties\n51.59219\nG\ncold\n100\n1.00\n1.00\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n\n\nWheaties Honey Gold\n36.18756\nG\ncold\n110\n0.75\n1.00\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#select-handy-helpers",
    "href": "slides/week-3/week-3-dplyr-pt1.html#select-handy-helpers",
    "title": "Data Wrangling with dplyr",
    "section": "select(): Handy Helpers!",
    "text": "select(): Handy Helpers!\n\n\neverything() : selects all columns that you have not already specified\nstarts_with() : selects columns with names that start with the specified string\nends_with() : selects columns with names that end with the specified string\ncontains() : selects columns with names that contain the specified string\n\n\n\n\n\n\n\n\n\nStrings in Week 5\n\n\nYou’ll learn more about working with strings in Week 5!"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-select-in-base-r",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-select-in-base-r",
    "title": "Data Wrangling with dplyr",
    "section": "How do we “select” in base R?",
    "text": "How do we “select” in base R?\nYou can use bracketing ([]) or the subset() function!\n\n\n\ncereal[ , c(\"name\", \n            \"manuf\", \n            \"calories\", \n            \"cups\")]\n\n\n\n\n\nsubset(cereal, \n       select = c(name, \n                  manuf, \n                  calories, \n                  cups)\n       )\n\n\n\n\n\n\n\n\nname\nmanuf\ncalories\ncups\n\n\n\n\n100% Bran\nN\n70\n0.33\n\n\n100% Natural Bran\nQ\n120\n1.00\n\n\nAll-Bran\nK\n70\n0.33\n\n\nAll-Bran with Extra Fiber\nK\n50\n0.50\n\n\nAlmond Delight\nR\n110\n0.75\n\n\nApple Cinnamon Cheerios\nG\n110\n0.75\n\n\nApple Jacks\nK\n110\n1.00\n\n\nBasic 4\nG\n130\n0.75\n\n\nBran Chex\nR\n90\n0.67\n\n\nBran Flakes\nP\n90\n0.67\n\n\nCap'n'Crunch\nQ\n120\n0.75\n\n\nCheerios\nG\n110\n1.25\n\n\nCinnamon Toast Crunch\nG\n120\n0.75\n\n\nClusters\nG\n110\n0.50\n\n\nCocoa Puffs\nG\n110\n1.00\n\n\nCorn Chex\nR\n110\n1.00\n\n\nCorn Flakes\nK\n100\n1.00\n\n\nCorn Pops\nK\n110\n1.00\n\n\nCount Chocula\nG\n110\n1.00\n\n\nCracklin' Oat Bran\nK\n110\n0.50\n\n\nCream of Wheat (Quick)\nN\n100\n1.00\n\n\nCrispix\nK\n110\n1.00\n\n\nCrispy Wheat & Raisins\nG\n100\n0.75\n\n\nDouble Chex\nR\n100\n0.75\n\n\nFroot Loops\nK\n110\n1.00\n\n\nFrosted Flakes\nK\n110\n0.75\n\n\nFrosted Mini-Wheats\nK\n100\n0.80\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\n120\n0.67\n\n\nFruitful Bran\nK\n120\n0.67\n\n\nFruity Pebbles\nP\n110\n0.75\n\n\nGolden Crisp\nP\n100\n0.88\n\n\nGolden Grahams\nG\n110\n0.75\n\n\nGrape Nuts Flakes\nP\n100\n0.88\n\n\nGrape-Nuts\nP\n110\n0.25\n\n\nGreat Grains Pecan\nP\n120\n0.33\n\n\nHoney Graham Ohs\nQ\n120\n1.00\n\n\nHoney Nut Cheerios\nG\n110\n0.75\n\n\nHoney-comb\nP\n110\n1.33\n\n\nJust Right Crunchy Nuggets\nK\n110\n1.00\n\n\nJust Right Fruit & Nut\nK\n140\n0.75\n\n\nKix\nG\n110\n1.50\n\n\nLife\nQ\n100\n0.67\n\n\nLucky Charms\nG\n110\n1.00\n\n\nMaypo\nA\n100\n1.00\n\n\nMuesli Raisins; Dates; & Almonds\nR\n150\n1.00\n\n\nMuesli Raisins; Peaches; & Pecans\nR\n150\n1.00\n\n\nMueslix Crispy Blend\nK\n160\n0.67\n\n\nMulti-Grain Cheerios\nG\n100\n1.00\n\n\nNut&Honey Crunch\nK\n120\n0.67\n\n\nNutri-Grain Almond-Raisin\nK\n140\n0.67\n\n\nNutri-grain Wheat\nK\n90\n1.00\n\n\nOatmeal Raisin Crisp\nG\n130\n0.50\n\n\nPost Nat. Raisin Bran\nP\n120\n0.67\n\n\nProduct 19\nK\n100\n1.00\n\n\nPuffed Rice\nQ\n50\n1.00\n\n\nPuffed Wheat\nQ\n50\n1.00\n\n\nQuaker Oat Squares\nQ\n100\n0.50\n\n\nQuaker Oatmeal\nQ\n100\n0.67\n\n\nRaisin Bran\nK\n120\n0.75\n\n\nRaisin Nut Bran\nG\n100\n0.50\n\n\nRaisin Squares\nK\n90\n0.50\n\n\nRice Chex\nR\n110\n1.13\n\n\nRice Krispies\nK\n110\n1.00\n\n\nShredded Wheat\nN\n80\n1.00\n\n\nShredded Wheat 'n'Bran\nN\n90\n0.67\n\n\nShredded Wheat spoon size\nN\n90\n0.67\n\n\nSmacks\nK\n110\n0.75\n\n\nSpecial K\nK\n110\n1.00\n\n\nStrawberry Fruit Wheats\nN\n90\n1.00\n\n\nTotal Corn Flakes\nG\n110\n1.00\n\n\nTotal Raisin Bran\nG\n140\n1.00\n\n\nTotal Whole Grain\nG\n100\n1.00\n\n\nTriples\nG\n110\n0.75\n\n\nTrix\nG\n110\n1.00\n\n\nWheat Chex\nR\n100\n0.67\n\n\nWheaties\nG\n100\n1.00\n\n\nWheaties Honey Gold\nG\n110\n0.75"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#rename-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#rename-1",
    "title": "Data Wrangling with dplyr",
    "section": "rename()",
    "text": "rename()\n\nYou can rename columns with select(), but all columns not specified will be dropped.\n\nUsing the rename() function is easier!\n\n\n\ncereal |&gt; \n  rename(temp = type)\n\n\n\n\n\n\n\nname\nmanuf\ntemp\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#mutate-to-include-a-new-variable",
    "href": "slides/week-3/week-3-dplyr-pt1.html#mutate-to-include-a-new-variable",
    "title": "Data Wrangling with dplyr",
    "section": "mutate() to include a new variable",
    "text": "mutate() to include a new variable\n\ncereal |&gt; \n  mutate(potass_per_cup = potass / cups)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\npotass_per_cup\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n848.484848\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n135.000000\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n969.696970\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n660.000000\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n-1.333333\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n93.333333\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n30.000000\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n133.333333\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n186.567164\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n283.582090\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n46.666667\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n84.000000\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n60.000000\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n210.000000\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n55.000000\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n25.000000\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n35.000000\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n20.000000\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n65.000000\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n320.000000\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n-1.000000\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n30.000000\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n160.000000\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n106.666667\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n30.000000\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n33.333333\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n125.000000\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n298.507463\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n283.582090\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n33.333333\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n45.454546\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n60.000000\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n96.590909\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n360.000000\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n303.030303\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n45.000000\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n120.000000\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n26.315790\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n60.000000\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n126.666667\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n26.666667\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n141.791045\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n55.000000\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n95.000000\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n170.000000\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n170.000000\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n238.805970\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n90.000000\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n59.701493\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n194.029851\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n90.000000\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n240.000000\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n388.059702\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n45.000000\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n15.000000\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n50.000000\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n220.000000\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n164.179104\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n320.000000\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n280.000000\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n220.000000\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n26.548673\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n35.000000\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n95.000000\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n208.955224\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n179.104478\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n53.333333\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n55.000000\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n90.000000\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n35.000000\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n230.000000\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n110.000000\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n80.000000\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n25.000000\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n171.641791\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n110.000000\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n80.000000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#mutate-to-change-an-existing-variable",
    "href": "slides/week-3/week-3-dplyr-pt1.html#mutate-to-change-an-existing-variable",
    "title": "Data Wrangling with dplyr",
    "section": "mutate() to change an existing variable",
    "text": "mutate() to change an existing variable\n\ncereal |&gt; \n  mutate(shelf = as.factor(shelf))\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#mutate-handy-helpers",
    "href": "slides/week-3/week-3-dplyr-pt1.html#mutate-handy-helpers",
    "title": "Data Wrangling with dplyr",
    "section": "mutate(): Handy Helpers!",
    "text": "mutate(): Handy Helpers!\n\nas.factor(), as.numeric(), etc. : change variable type\n+, -, *, / : basic mathematical operations\n%% : modulo (returns the remainder when doing division)\n\nOn Thursday we’ll talk about:\n\nif_else(): creating a new variable with two levels\ncase_when(): creating a new variable with three or more levels"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-mutate-in-base-r",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-mutate-in-base-r",
    "title": "Data Wrangling with dplyr",
    "section": "How do we “mutate” in base R?",
    "text": "How do we “mutate” in base R?\nYou can define new columns…\n\ncereal$potass_per_cup &lt;- cereal$potass / cereal$cups\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\npotass_per_cup\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n848.484848\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n135.000000\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n969.696970\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n660.000000\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n-1.333333\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n93.333333\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n30.000000\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n133.333333\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n186.567164\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n283.582090\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n46.666667\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n84.000000\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n60.000000\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n210.000000\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n55.000000\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n25.000000\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n35.000000\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n20.000000\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n65.000000\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n320.000000\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n-1.000000\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n30.000000\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n160.000000\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n106.666667\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n30.000000\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n33.333333\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n125.000000\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n298.507463\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n283.582090\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n33.333333\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n45.454546\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n60.000000\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n96.590909\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n360.000000\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n303.030303\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n45.000000\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n120.000000\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n26.315790\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n60.000000\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n126.666667\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n26.666667\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n141.791045\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n55.000000\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n95.000000\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n170.000000\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n170.000000\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n238.805970\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n90.000000\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n59.701493\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n194.029851\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n90.000000\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n240.000000\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n388.059702\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n45.000000\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n15.000000\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n50.000000\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n220.000000\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n164.179104\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n320.000000\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n280.000000\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n220.000000\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n26.548673\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n35.000000\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n95.000000\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n208.955224\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n179.104478\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n53.333333\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n55.000000\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n90.000000\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n35.000000\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n230.000000\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n110.000000\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n80.000000\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n25.000000\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n171.641791\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n110.000000\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n80.000000\n\n\n\n\n\n\n\n\n\n…OR overwrite old ones!\n\ncereal$shelf &lt;- as.factor(cereal$shelf)"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#group_by-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#group_by-1",
    "title": "Data Wrangling with dplyr",
    "section": "group_by()",
    "text": "group_by()\nSeparate the data into different groups based on a categorical variable.\n\nThe data gets grouped, but nothing happens externally.\n\ncereal |&gt; \n  group_by(type)\n\n# A tibble: 77 × 16\n# Groups:   type [2]\n   name      manuf type  calories protein   fat sodium fiber carbo sugars potass\n   &lt;fct&gt;     &lt;fct&gt; &lt;fct&gt;    &lt;int&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;int&gt;  &lt;int&gt;\n 1 100% Bran N     cold        70       4     1    130  10     5        6    280\n 2 100% Nat… Q     cold       120       3     5     15   2     8        8    135\n 3 All-Bran  K     cold        70       4     1    260   9     7        5    320\n 4 All-Bran… K     cold        50       4     0    140  14     8        0    330\n 5 Almond D… R     cold       110       2     2    200   1    14        8     -1\n 6 Apple Ci… G     cold       110       2     2    180   1.5  10.5     10     70\n 7 Apple Ja… K     cold       110       2     0    125   1    11       14     30\n 8 Basic 4   G     cold       130       3     2    210   2    18        8    100\n 9 Bran Chex R     cold        90       2     1    200   4    15        6    125\n10 Bran Fla… P     cold        90       3     0    210   5    13        5    190\n# ℹ 67 more rows\n# ℹ 5 more variables: vitamins &lt;int&gt;, shelf &lt;int&gt;, weight &lt;dbl&gt;, cups &lt;dbl&gt;,\n#   rating &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#summarize-1",
    "href": "slides/week-3/week-3-dplyr-pt1.html#summarize-1",
    "title": "Data Wrangling with dplyr",
    "section": "summarize()",
    "text": "summarize()\nWe can calculate summaries of variables in the data.\n\n\ncereal |&gt; \n  summarise(mean_fiber = mean(fiber))\n\n  mean_fiber\n1   2.151948\n\n\n\n\nOr multiple summaries at the same time.\n\ncereal |&gt; \nsummarize(mean_fiber = mean(fiber),\n          num_cereals = n(),\n          mean_sugar = mean(sugars)\n          )\n\n  mean_fiber num_cereals mean_sugar\n1   2.151948          77   6.922078"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#summarize-handy-helpers",
    "href": "slides/week-3/week-3-dplyr-pt1.html#summarize-handy-helpers",
    "title": "Data Wrangling with dplyr",
    "section": "summarize(): Handy Helpers!",
    "text": "summarize(): Handy Helpers!\n\nmean(), median(), sd(), sum()\nmin(), max()\nn(), n_distinct() : counts the number of (distinct) elements\nfirst(), last(), nth() : extract the first, last, or nth element"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#group_by-summarize",
    "href": "slides/week-3/week-3-dplyr-pt1.html#group_by-summarize",
    "title": "Data Wrangling with dplyr",
    "section": "group_by() + summarize()!",
    "text": "group_by() + summarize()!\n\ngroup_by a variable (or multiple variables)\nsummarize a variable (or multiple variables) within the groups\n\n\ncereal |&gt; \n  group_by(manuf) |&gt; \n  summarise(mean_sugar = mean(sugars))\n\n\n\n\n\n\n\nmanuf\nmean_sugar\n\n\n\n\nA\n3.000000\n\n\nG\n7.954546\n\n\nK\n7.565217\n\n\nN\n1.833333\n\n\nP\n8.777778\n\n\nQ\n5.250000\n\n\nR\n6.125000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#group_by-mutate",
    "href": "slides/week-3/week-3-dplyr-pt1.html#group_by-mutate",
    "title": "Data Wrangling with dplyr",
    "section": "group_by() + mutate()!",
    "text": "group_by() + mutate()!\n\ngroup_by a variable (or multiple variables)\nmutate a variable (or multiple variables) within the groups\n\n\ncereal |&gt; \n  group_by(manuf) |&gt; \n  mutate(mean_sugar = mean(sugars))\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\nmean_sugar\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n1.833333\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n5.250000\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n7.565217\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n7.565217\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n6.125000\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n7.954546\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n7.565217\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n7.954546\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n6.125000\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n8.777778\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n5.250000\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n7.954546\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n7.954546\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n7.954546\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n7.954546\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n6.125000\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n7.565217\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n7.565217\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n7.954546\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n7.565217\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n1.833333\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n7.565217\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n7.954546\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n6.125000\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n7.565217\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n7.565217\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n7.565217\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n8.777778\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n7.565217\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n8.777778\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n8.777778\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n7.954546\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n8.777778\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n8.777778\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n8.777778\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n5.250000\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n7.954546\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n8.777778\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n7.565217\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n7.565217\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n7.954546\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n5.250000\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n7.954546\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n3.000000\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n6.125000\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n6.125000\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n7.565217\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n7.954546\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n7.565217\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n7.565217\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n7.565217\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n7.954546\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n8.777778\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n7.565217\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n5.250000\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n5.250000\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n5.250000\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n5.250000\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n7.565217\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n7.954546\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n7.565217\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n6.125000\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n7.565217\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n1.833333\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n1.833333\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n1.833333\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n7.565217\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n7.565217\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n1.833333\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n7.954546\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n7.954546\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n7.954546\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n7.954546\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n7.954546\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n6.125000\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n7.954546\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756\n7.954546"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#the-difference",
    "href": "slides/week-3/week-3-dplyr-pt1.html#the-difference",
    "title": "Data Wrangling with dplyr",
    "section": "The Difference?",
    "text": "The Difference?\ngroup_by() + summarize() collapses the data.\n\nYou will only have one row per group remaining.\n\n\ngroup_by() + mutate() does not.\n\nYou will have the full number of rows remaining."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#ungroup",
    "href": "slides/week-3/week-3-dplyr-pt1.html#ungroup",
    "title": "Data Wrangling with dplyr",
    "section": "ungroup()",
    "text": "ungroup()\nThe ungroup() function will remove the internal grouping in your data.\n\nThis is not something that you always need to do, but if you are getting unexpected output downstream from a group_by() statement, try ungrouping your data!"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#when-would-you-need-to-ungroup",
    "href": "slides/week-3/week-3-dplyr-pt1.html#when-would-you-need-to-ungroup",
    "title": "Data Wrangling with dplyr",
    "section": "When would you need to ungroup()?",
    "text": "When would you need to ungroup()?\n\nThe default for summarize() is to drop the last variable after the subsequent operation is taken.\nMeaning, the first variables used for grouping will not be dropped, unless otherwise specified.\n\n\n\n\ncereal |&gt; \n  group_by(manuf, type) |&gt; \n  summarize(mean_calories = mean(calories))\n\n# A tibble: 9 × 3\n# Groups:   manuf [7]\n  manuf type  mean_calories\n  &lt;fct&gt; &lt;fct&gt;         &lt;dbl&gt;\n1 A     hot           100  \n2 G     cold          111. \n3 K     cold          109. \n4 N     cold           84  \n5 N     hot           100  \n6 P     cold          109. \n7 Q     cold           94.3\n8 Q     hot           100  \n9 R     cold          115"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-i-ungroup",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-i-ungroup",
    "title": "Data Wrangling with dplyr",
    "section": "How do I ungroup?",
    "text": "How do I ungroup?\nOption 1 - Use the .groups argument of summarize()\n\n\ncereal |&gt; \n  group_by(manuf, type) |&gt; \n  summarize(mean_calories = mean(calories), \n            .groups = \"drop\")\n\n\n\nOption 2 - Use the ungroup() function after summarize()\n\n\ncereal |&gt; \n  group_by(manuf, type) |&gt; \n  summarize(mean_calories = mean(calories)) |&gt; \n  ungroup()"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-group-and-summarize-in-base-r",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-do-we-group-and-summarize-in-base-r",
    "title": "Data Wrangling with dplyr",
    "section": "How do we “group” and “summarize” in base R?",
    "text": "How do we “group” and “summarize” in base R?\nYou can use the aggregate() function.\n\ncereal |&gt; \n  aggregate(sugars ~ manuf, FUN = mean)\n\n\n\n\n\n\n\nmanuf\nsugars\n\n\n\n\nA\n3.000000\n\n\nG\n7.954546\n\n\nK\n7.565217\n\n\nN\n1.833333\n\n\nP\n8.777778\n\n\nQ\n5.250000\n\n\nR\n6.125000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#glue-it-all-together",
    "href": "slides/week-3/week-3-dplyr-pt1.html#glue-it-all-together",
    "title": "Data Wrangling with dplyr",
    "section": "Glue it all together!",
    "text": "Glue it all together!\n\ncereal |&gt; \n  filter(type == \"cold\") |&gt; \n  mutate(potass_per_cup = potass / cups) |&gt; \n  group_by(manuf) |&gt; \n  summarise(mean_potass_per_cup = mean(potass_per_cup))\n\n\n\n\n\n\n\nmanuf\nmean_potass_per_cup\n\n\n\n\nG\n109.1970\n\n\nK\n175.3978\n\n\nN\n284.3089\n\n\nP\n203.8749\n\n\nQ\n93.3511\n\n\nR\n106.8864"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#code-formatting",
    "href": "slides/week-3/week-3-dplyr-pt1.html#code-formatting",
    "title": "Data Wrangling with dplyr",
    "section": "Code Formatting",
    "text": "Code Formatting\nSimilar to the + formatting in ggplot, do not continue a line after writing a |&gt;!\n\nBad PracticeGoodAmazing\n\n\n\ncereal |&gt; group_by(type) |&gt; summarise(mean_fiber = mean(fiber), num_cereals = n(), mean_sugar = mean(sugars))\n\n\n\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarise(mean_fiber = mean(fiber), num_cereals = n(), mean_sugar = mean(sugars))\n\n\n\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarise(mean_fiber = mean(fiber), \n            num_cereals = n(),\n            mean_sugar = mean(sugars)\n            )"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#finding-ephelias-college",
    "href": "slides/week-3/week-3-dplyr-pt1.html#finding-ephelias-college",
    "title": "Data Wrangling with dplyr",
    "section": "Finding Ephelia’s College",
    "text": "Finding Ephelia’s College\n\n\n\nThis activity will require knowledge of:\n\ndebugging code errors\nfunction syntax\nlogical comparisons\ndplyr verbs and when to use them\nchaining steps together with the pipe operator\n\n\n\n\n\n\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#dplyr-resources",
    "href": "slides/week-3/week-3-dplyr-pt1.html#dplyr-resources",
    "title": "Data Wrangling with dplyr",
    "section": "dplyr Resources",
    "text": "dplyr Resources\nEvery group should have a dplyr cheatsheet!\n\n\n\nOn the Front\n\n\n\nColumn 1: grouped summaries (group_by() + summarize())\nColumn 2: filter()ing values with logical comparisons\nColumn 3: select()ing and mutate()ing variables\n\n\n\n\n\n\n\n\nOn the Back\n\n\n\nColumn 2: summary functions you might like to use with summarize()"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#task-card",
    "href": "slides/week-3/week-3-dplyr-pt1.html#task-card",
    "title": "Data Wrangling with dplyr",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\n\n\n\nOn the Front\n\nthe expectations of each role\nthe norms of collaborating\n\n\n\n\n\nOn the Back\n\nadvice for dealing with code errors\nguidelines for formatting dplyr code"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#pair-programming-expectations",
    "href": "slides/week-3/week-3-dplyr-pt1.html#pair-programming-expectations",
    "title": "Data Wrangling with dplyr",
    "section": "Pair Programming Expectations",
    "text": "Pair Programming Expectations\n\nDuring your collaboration, you and your partner will alternate between two roles:\n\n\n\n\nDeveloper\n\n\nReads prompt and ensures Coder understands what is being asked.\nTypes the code specified by the Coder into the Quarto document.       \nRuns the code provided by the Coder.\nWorks with Coder to debug the code. \nEvaluates the output.\n\nWorks with Coder to write code comments.\n\n\n\n\n\n\nCoder\n\n\nReads out instructions or prompts\nDirects the Developer what to type.\nTalks with Developer about their ideas. \nManages resources (e.g., cheatsheets, textbook, slides). \nWorks with Developer to debug the code. \nWorks with Developer to write code comments."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#how-does-this-look-in-posit-cloud",
    "href": "slides/week-3/week-3-dplyr-pt1.html#how-does-this-look-in-posit-cloud",
    "title": "Data Wrangling with dplyr",
    "section": "How does this look in Posit Cloud?",
    "text": "How does this look in Posit Cloud?\n\nFirst, both of you will do the following:\n\nJoin your Practice Activity workspace in Posit Cloud\n\nIf you were sent a new email, you were added to a different group!\n\nLog-in to Posit Cloud\nOpen the PA 3: Identify the Mystery College project\nOpen the PA3-dplyr.qmd file\n\n\n\n\nThen, the partner whose birthday is closest to January 1st starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#why-are-we-switching",
    "href": "slides/week-3/week-3-dplyr-pt1.html#why-are-we-switching",
    "title": "Data Wrangling with dplyr",
    "section": "Why are we switching?",
    "text": "Why are we switching?\nThroughout the activity you will swap roles—the Developer will become the Coder, and the Coder will become the Developer.\n\n\nWe are alternating roles so everyone:\n\nhas the chance to apply their coding skills\npractices talking through their code\nhas the opportunity to explain their thinking"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#external-resources",
    "href": "slides/week-3/week-3-dplyr-pt1.html#external-resources",
    "title": "Data Wrangling with dplyr",
    "section": "External Resources",
    "text": "External Resources\nDuring the Practice Activity, you are not permitted to use Google or ChatGPT for help.\n\n\nYou are permitted to use:\n\nthe dplyr cheatsheet,\nthe course textbook, and\nthe course slides."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#submission",
    "href": "slides/week-3/week-3-dplyr-pt1.html#submission",
    "title": "Data Wrangling with dplyr",
    "section": "Submission",
    "text": "Submission\n\nSubmit the full name of the college Ephelia will attend to the Canvas Quiz.\n\n\nEach person will input the full name of the college in the PA3 Canvas quiz.\nEach person will submit the PA-3.html file."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#thursday-october-17",
    "href": "slides/week-4/week-4-joins-2.html#thursday-october-17",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Thursday, October 17",
    "text": "Thursday, October 17\nToday we will…\n\n\n\n\nDebrief PA 4\n\nDescribe the Code\nClean Column Names\n\n\nDebrief Lab 3 & Challenge 3\n\nCommon Themes\nPackage Lifecycle Stages\nExpectations for Tools Used\nReminder about Lab 3 Peer Review\n\n\n\n\n\n\n\n\nNew Material\n\nExtensions to Relational Data\nFactors with forcats\n\nLab 4: Childcare Costs in California"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#take-3-minutes-to",
    "href": "slides/week-4/week-4-joins-2.html#take-3-minutes-to",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Take 3-minutes to…",
    "text": "Take 3-minutes to…\nWrite down in plain language what each line of this code is doing.\n\n\nmilitary_clean %&gt;% \n  filter(\n    if_all(.cols = -Country, \n           .fns = ~ is.na(.x)\n           ), \n    !is.na(Country)\n    ) %&gt;% \n  pull(Country)"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#clean-variable-names-with-janitor",
    "href": "slides/week-4/week-4-joins-2.html#clean-variable-names-with-janitor",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Clean Variable Names with janitor",
    "text": "Clean Variable Names with janitor\n\nData from external sources likely has variable names not ideally formatted for R.\nNames may…\n\ncontain spaces.\nstart with numbers.\nstart with a mix of capital and lower case letters.\n\n\n\n\nnames(military_clean)[1:12]\n\n [1] \"Country\"        \"Notes\"          \"Reporting year\" \"1988\"          \n [5] \"1989\"           \"1990\"           \"1991\"           \"1992\"          \n [9] \"1993\"           \"1994\"           \"1995\"           \"1996\""
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#clean-variable-names-with-janitor-1",
    "href": "slides/week-4/week-4-joins-2.html#clean-variable-names-with-janitor-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Clean Variable Names with janitor",
    "text": "Clean Variable Names with janitor\n\nThe janitor package converts all variable names in a dataset to snake_case.\nNames will…\n\nstart with a lower case letter.\nhave spaces filled in with _.\n\n\nlibrary(janitor)\n\nmilitary_clean_names &lt;- military |&gt; \n  clean_names()\n\nnames(military_clean_names)[1:12]\n\n [1] \"country\"        \"notes\"          \"reporting_year\" \"x1988\"         \n [5] \"x1989\"          \"x1990\"          \"x1991\"          \"x1992\"         \n [9] \"x1993\"          \"x1994\"          \"x1995\"          \"x1996\""
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#lab-3-common-themes",
    "href": "slides/week-4/week-4-joins-2.html#lab-3-common-themes",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Lab 3 Common Themes",
    "text": "Lab 3 Common Themes\n\n\n\nQ1: The tidyverse package automatically loads ggplot2, dplyr, readr, etc. – do not load these twice!\nQ3: Where did these data come from? How were they collected? What is the context of these data?\n\nChallenge 3: When reaching a conclusion with the hypothesis test, what does Question 3 refer to?\n\nSaving an f*$# load of objects\n\nNot outputting the results"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#lab-3-common-themes-1",
    "href": "slides/week-4/week-4-joins-2.html#lab-3-common-themes-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Lab 3 Common Themes",
    "text": "Lab 3 Common Themes\n\n\nQ5 & Q7: Not using the “correct” function syntax\n\n\nif_any(.cols = everything(), .fns = ~ is.na(.x))\n\n\n\n\n\nNot using .x to specify where the .cols input should go will go awry when there are multiple function inputs.\nUsing named arguments (e.g., .cols =, .fns =) makes your code more readable and is part of the code formatting guidelines for this class.\n\n\n\nThink about “efficient” ways to do things\n\nQ5: Are you using the same function across() multiple columns?\nQ6: Can you calculate multiple summary statistics in one pipeline?\nQ10-12: Is there a way you can get both the max and min in one pipeline?"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#lifceycle-stages",
    "href": "slides/week-4/week-4-joins-2.html#lifceycle-stages",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Lifceycle Stages",
    "text": "Lifceycle Stages\nAs packages get updated, the functions and function arguments included in those packages will change.\n\nThe accepted syntax for a function may change.\nA function/functionality may disappear.\n\n\nLearn more about lifecycle stages of packages, functions, function arguments in R."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#lifceycle-stages-1",
    "href": "slides/week-4/week-4-joins-2.html#lifceycle-stages-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Lifceycle Stages",
    "text": "Lifceycle Stages"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#deprecated-functions",
    "href": "slides/week-4/week-4-joins-2.html#deprecated-functions",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Deprecated Functions",
    "text": "Deprecated Functions\n\nA deprecated functionality has a better alternative available and is scheduled for removal.\n\nYou get a warning telling you what to use instead.\n\n\n\n\n\nmilitary_clean |&gt; \n  filter(across(.cols = Notes:`2019`, \n                .fns = ~ is.na(.x)\n                )\n         ) \n\nWarning: Using `across()` in `filter()` was deprecated in dplyr 1.0.8.\nℹ Please use `if_any()` or `if_all()` instead.\n\n\n# A tibble: 18 × 35\n   Country      Notes `Reporting year` `1988` `1989` `1990` `1991` `1992` `1993`\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; \n 1 Africa       &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 2 North Africa &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 3 Sub-Saharan  &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 4 Americas     &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 5 Central Ame… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 6 North Ameri… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 7 South Ameri… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 8 Asia & Ocea… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 9 Central Asia &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n10 East Asia    &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n11 South Asia   &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n12 South-East … &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n13 Oceania      &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n14 Europe       &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n15 Central Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n16 Eastern Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n17 Western Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n18 Middle East  &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n# ℹ 26 more variables: `1994` &lt;chr&gt;, `1995` &lt;chr&gt;, `1996` &lt;chr&gt;, `1997` &lt;chr&gt;,\n#   `1998` &lt;chr&gt;, `1999` &lt;chr&gt;, `2000` &lt;chr&gt;, `2001` &lt;chr&gt;, `2002` &lt;chr&gt;,\n#   `2003` &lt;chr&gt;, `2004` &lt;chr&gt;, `2005` &lt;chr&gt;, `2006` &lt;chr&gt;, `2007` &lt;chr&gt;,\n#   `2008` &lt;chr&gt;, `2009` &lt;chr&gt;, `2010` &lt;chr&gt;, `2011` &lt;chr&gt;, `2012` &lt;chr&gt;,\n#   `2013` &lt;chr&gt;, `2014` &lt;chr&gt;, `2015` &lt;chr&gt;, `2016` &lt;chr&gt;, `2017` &lt;chr&gt;,\n#   `2018` &lt;chr&gt;, `2019` &lt;chr&gt;"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#deprecated-functions-1",
    "href": "slides/week-4/week-4-joins-2.html#deprecated-functions-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Deprecated Functions",
    "text": "Deprecated Functions\n\nYou should not use deprecated functions!\nInstead, we use…\n\nmilitary_clean |&gt;\n  filter(if_all(.cols = Notes:`2019`, \n                .fns = ~ is.na(.x)\n                )\n         ) \n\n# A tibble: 18 × 35\n   Country      Notes `Reporting year` `1988` `1989` `1990` `1991` `1992` `1993`\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; \n 1 Africa       &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 2 North Africa &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 3 Sub-Saharan  &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 4 Americas     &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 5 Central Ame… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 6 North Ameri… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 7 South Ameri… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 8 Asia & Ocea… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 9 Central Asia &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n10 East Asia    &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n11 South Asia   &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n12 South-East … &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n13 Oceania      &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n14 Europe       &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n15 Central Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n16 Eastern Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n17 Western Eur… &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n18 Middle East  &lt;NA&gt;  &lt;NA&gt;             &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n# ℹ 26 more variables: `1994` &lt;chr&gt;, `1995` &lt;chr&gt;, `1996` &lt;chr&gt;, `1997` &lt;chr&gt;,\n#   `1998` &lt;chr&gt;, `1999` &lt;chr&gt;, `2000` &lt;chr&gt;, `2001` &lt;chr&gt;, `2002` &lt;chr&gt;,\n#   `2003` &lt;chr&gt;, `2004` &lt;chr&gt;, `2005` &lt;chr&gt;, `2006` &lt;chr&gt;, `2007` &lt;chr&gt;,\n#   `2008` &lt;chr&gt;, `2009` &lt;chr&gt;, `2010` &lt;chr&gt;, `2011` &lt;chr&gt;, `2012` &lt;chr&gt;,\n#   `2013` &lt;chr&gt;, `2014` &lt;chr&gt;, `2015` &lt;chr&gt;, `2016` &lt;chr&gt;, `2017` &lt;chr&gt;,\n#   `2018` &lt;chr&gt;, `2019` &lt;chr&gt;"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#superceded-functions",
    "href": "slides/week-4/week-4-joins-2.html#superceded-functions",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Superceded Functions",
    "text": "Superceded Functions\nA superseded functionality has a better alternative, but is not going away.\n\nThis is a softer alternative to deprecation.\nA superseded function will not give a warning (since there’s no risk if you keep using it), but the documentation will give you a recommendation for what to use instead."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#what-is-my-job",
    "href": "slides/week-4/week-4-joins-2.html#what-is-my-job",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "What is my job?",
    "text": "What is my job?\n\n\n\n\nTeaching you stuff\n\n(Thoughtfully) choosing what to teach and how to teach it.\n\n\n\n\n\nAssessing what you’ve learned\n\nWhat do you understand about the tools I’ve taught you?\n\nThis is not the same as assessing if you figured out a way to accomplish a given task."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#relational-data",
    "href": "slides/week-4/week-4-joins-2.html#relational-data",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Relational Data",
    "text": "Relational Data\nWhen we work with multiple tables of data, we say we are working with relational data.\n\nIt is the relations, not just the individual datasets, that are important.\n\n\nWhen we work with relational data, we rely on keys.\n\nA key uniquely identifies an observation in a dataset.\nA key allows us to relate datasets to each other"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#imdb-movies-data",
    "href": "slides/week-4/week-4-joins-2.html#imdb-movies-data",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "IMDb Movies Data",
    "text": "IMDb Movies Data\n\nHow can we find each director’s active years?"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#joining-multiple-data-sets",
    "href": "slides/week-4/week-4-joins-2.html#joining-multiple-data-sets",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Joining Multiple Data Sets",
    "text": "Joining Multiple Data Sets\n\nDataSketch1st + 2nd+ 3rd\n\n\n\n\n\n\ndirectors[1:4,]\n\n# A tibble: 4 × 3\n     id first_name last_name\n  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    \n1   429 Andrew     Adamson  \n2  2931 Darren     Aronofsky\n3  9247 Zach       Braff    \n4 11652 James (I)  Cameron  \n\n\n\n\n\n\nmovies_directors[1:4,]\n\n# A tibble: 4 × 2\n  director_id movie_id\n        &lt;dbl&gt;    &lt;dbl&gt;\n1         429   300229\n2        2931   254943\n3        9247   124110\n4       11652    10920\n\n\n\n\n\n\n\n\n\n\nmovies[1:4,]\n\n# A tibble: 4 × 4\n     id name           year  rank\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n1 10920 Aliens         1986  8.20\n2 17173 Animal House   1978  7.5 \n3 18979 Apollo 13      1995  7.5 \n4 30959 Batman Begins  2005 NA   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmovies_directors |&gt; \n  inner_join(directors, \n             by = join_by(director_id == id)\n             )\n\n\n\n\n\n\n\n\ndirector_id\nmovie_id\nfirst_name\nlast_name\n\n\n\n\n429\n300229\nAndrew\nAdamson\n\n\n2931\n254943\nDarren\nAronofsky\n\n\n9247\n124110\nZach\nBraff\n\n\n11652\n10920\nJames (I)\nCameron\n\n\n11652\n333856\nJames (I)\nCameron\n\n\n14927\n192017\nRon\nClements\n\n\n15092\n109093\nEthan\nCoen\n\n\n15092\n237431\nEthan\nCoen\n\n\n15093\n109093\nJoel\nCoen\n\n\n15093\n237431\nJoel\nCoen\n\n\n15901\n130128\nFrancis Ford\nCoppola\n\n\n15906\n194874\nSofia\nCoppola\n\n\n16816\n350424\nCameron\nCrowe\n\n\n17810\n297838\nFrank\nDarabont\n\n\n22104\n224842\nClint\nEastwood\n\n\n24758\n112290\nDavid\nFincher\n\n\n28395\n46169\nMel (I)\nGibson\n\n\n35573\n18979\nRon\nHoward\n\n\n35838\n257264\nJohn (I)\nHughes\n\n\n37872\n300229\nVicky\nJenson\n\n\n38746\n238695\nMike (I)\nJudge\n\n\n41975\n314965\nDavid\nKoepp\n\n\n44291\n17173\nJohn (I)\nLandis\n\n\n46315\n344203\nJay\nLevey\n\n\n48115\n313459\nGeorge\nLucas\n\n\n56332\n192017\nJohn\nMusker\n\n\n58201\n30959\nChristopher\nNolan\n\n\n58201\n210511\nChristopher\nNolan\n\n\n65940\n111813\nRob\nReiner\n\n\n66849\n306032\nGuy\nRitchie\n\n\n68161\n116907\nHerbert (I)\nRoss\n\n\n74758\n238072\nSteven\nSoderbergh\n\n\n76524\n167324\nOliver (I)\nStone\n\n\n78273\n176711\nQuentin\nTarantino\n\n\n78273\n176712\nQuentin\nTarantino\n\n\n78273\n267038\nQuentin\nTarantino\n\n\n78273\n276217\nQuentin\nTarantino\n\n\n82525\n147603\nPaul (I)\nVerhoeven\n\n\n83616\n207992\nAndy\nWachowski\n\n\n83617\n207992\nLarry\nWachowski\n\n\n88802\n256630\nUnknown\nDirector\n\n\n\n\n\n\n\n\n\n\n\nmovies_directors |&gt; \n  inner_join(directors, \n             by = join_by(director_id == id)\n             ) |&gt; \n  inner_join(movies,\n             by = join_by(movie_id == id)\n             ) |&gt; \n  rename(movie_name = name)\n\n\n\n\n\n\n\n\ndirector_id\nmovie_id\nfirst_name\nlast_name\nmovie_name\nyear\nrank\n\n\n\n\n429\n300229\nAndrew\nAdamson\nShrek\n2001\n8.1\n\n\n2931\n254943\nDarren\nAronofsky\nPi\n1998\n7.5\n\n\n9247\n124110\nZach\nBraff\nGarden State\n2004\n8.3\n\n\n11652\n10920\nJames (I)\nCameron\nAliens\n1986\n8.2\n\n\n11652\n333856\nJames (I)\nCameron\nTitanic\n1997\n6.9\n\n\n14927\n192017\nRon\nClements\nLittle Mermaid, The\n1989\n7.3\n\n\n15092\n109093\nEthan\nCoen\nFargo\n1996\n8.2\n\n\n15092\n237431\nEthan\nCoen\nO Brother, Where Art Thou?\n2000\n7.8\n\n\n15093\n109093\nJoel\nCoen\nFargo\n1996\n8.2\n\n\n15093\n237431\nJoel\nCoen\nO Brother, Where Art Thou?\n2000\n7.8\n\n\n15901\n130128\nFrancis Ford\nCoppola\nGodfather, The\n1972\n9.0\n\n\n15906\n194874\nSofia\nCoppola\nLost in Translation\n2003\n8.0\n\n\n16816\n350424\nCameron\nCrowe\nVanilla Sky\n2001\n6.9\n\n\n17810\n297838\nFrank\nDarabont\nShawshank Redemption, The\n1994\n9.0\n\n\n22104\n224842\nClint\nEastwood\nMystic River\n2003\n8.1\n\n\n24758\n112290\nDavid\nFincher\nFight Club\n1999\n8.5\n\n\n28395\n46169\nMel (I)\nGibson\nBraveheart\n1995\n8.3\n\n\n35573\n18979\nRon\nHoward\nApollo 13\n1995\n7.5\n\n\n35838\n257264\nJohn (I)\nHughes\nPlanes, Trains & Automobiles\n1987\n7.2\n\n\n37872\n300229\nVicky\nJenson\nShrek\n2001\n8.1\n\n\n38746\n238695\nMike (I)\nJudge\nOffice Space\n1999\n7.6\n\n\n41975\n314965\nDavid\nKoepp\nStir of Echoes\n1999\n7.0\n\n\n44291\n17173\nJohn (I)\nLandis\nAnimal House\n1978\n7.5\n\n\n46315\n344203\nJay\nLevey\nUHF\n1989\n6.6\n\n\n48115\n313459\nGeorge\nLucas\nStar Wars\n1977\n8.8\n\n\n56332\n192017\nJohn\nMusker\nLittle Mermaid, The\n1989\n7.3\n\n\n58201\n30959\nChristopher\nNolan\nBatman Begins\n2005\nNA\n\n\n58201\n210511\nChristopher\nNolan\nMemento\n2000\n8.7\n\n\n65940\n111813\nRob\nReiner\nFew Good Men, A\n1992\n7.5\n\n\n66849\n306032\nGuy\nRitchie\nSnatch.\n2000\n7.9\n\n\n68161\n116907\nHerbert (I)\nRoss\nFootloose\n1984\n5.8\n\n\n74758\n238072\nSteven\nSoderbergh\nOcean's Eleven\n2001\n7.5\n\n\n76524\n167324\nOliver (I)\nStone\nJFK\n1991\n7.8\n\n\n78273\n176711\nQuentin\nTarantino\nKill Bill: Vol. 1\n2003\n8.4\n\n\n78273\n176712\nQuentin\nTarantino\nKill Bill: Vol. 2\n2004\n8.2\n\n\n78273\n267038\nQuentin\nTarantino\nPulp Fiction\n1994\n8.7\n\n\n78273\n276217\nQuentin\nTarantino\nReservoir Dogs\n1992\n8.3\n\n\n82525\n147603\nPaul (I)\nVerhoeven\nHollow Man\n2000\n5.3\n\n\n83616\n207992\nAndy\nWachowski\nMatrix, The\n1999\n8.5\n\n\n83617\n207992\nLarry\nWachowski\nMatrix, The\n1999\n8.5\n\n\n88802\n256630\nUnknown\nDirector\nPirates of the Caribbean\n2003\nNA"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#joining-on-multiple-variables",
    "href": "slides/week-4/week-4-joins-2.html#joining-on-multiple-variables",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Joining on Multiple Variables",
    "text": "Joining on Multiple Variables\nConsider the rodent data from Lab 2.\n\nWe want to add species_id to the rodent measurements.\n\n\nSpeciesMeasurements\n\n\n\nspecies\n\n\n\n\n\n\n\ngenus\nspecies\ntaxa\nspecies_id\n\n\n\n\nDipodomys\nmerriami\nRodent\nDM\n\n\nDipodomys\nordii\nRodent\nDO\n\n\nPerognathus\nflavus\nRodent\nPF\n\n\nChaetodipus\npenicillatus\nRodent\nPP\n\n\nPeromyscus\neremicus\nRodent\nPE\n\n\nOnychomys\nleucogaster\nRodent\nOL\n\n\nReithrodontomys\nmegalotis\nRodent\nRM\n\n\nDipodomys\nspectabilis\nRodent\nDS\n\n\nOnychomys\ntorridus\nRodent\nOT\n\n\nNeotoma\nalbigula\nRodent\nNL\n\n\nPeromyscus\nmaniculatus\nRodent\nPM\n\n\nSigmodon\nhispidus\nRodent\nSH\n\n\nReithrodontomys\nfulvescens\nRodent\nRF\n\n\nChaetodipus\nbaileyi\nRodent\nPB\n\n\n\n\n\n\n\n\n\n\nmeasurements\n\n\n\n\n\n\n\ngenus_name\nspecies\nsex\nhindfoot_length\nweight\n\n\n\n\nDipodomys\nmerriami\nM\n35\n40\n\n\nDipodomys\nmerriami\nM\n37\n48\n\n\nDipodomys\nmerriami\nF\n34\n29\n\n\nDipodomys\nmerriami\nF\n35\n46\n\n\nDipodomys\nmerriami\nM\n35\n36\n\n\nDipodomys\nordii\nF\n32\n52\n\n\nPerognathus\nflavus\nM\n15\n8\n\n\nDipodomys\nmerriami\nF\n36\n35\n\n\nPerognathus\nflavus\nM\n12\n7\n\n\nDipodomys\nmerriami\nF\n32\n22\n\n\nPerognathus\nflavus\nM\n16\n9\n\n\nDipodomys\nmerriami\nF\n34\n42\n\n\nPerognathus\nflavus\nF\n14\n8\n\n\nDipodomys\nmerriami\nF\n35\n41\n\n\nDipodomys\nmerriami\nF\n37\n37\n\n\nDipodomys\nmerriami\nF\n35\n43\n\n\nDipodomys\nmerriami\nF\n35\n41\n\n\nDipodomys\nmerriami\nF\n33\n40\n\n\nPerognathus\nflavus\nF\n11\n9\n\n\nDipodomys\nmerriami\nF\n35\n45\n\n\nChaetodipus\npenicillatus\nF\n20\n15\n\n\nDipodomys\nmerriami\nM\n35\n29\n\n\nDipodomys\nmerriami\nM\n35\n39\n\n\nDipodomys\nmerriami\nF\n36\n43\n\n\nDipodomys\nmerriami\nM\n38\n46\n\n\nDipodomys\nmerriami\nM\n36\n41\n\n\nDipodomys\nmerriami\nM\n36\n41\n\n\nDipodomys\nmerriami\nM\n38\n40\n\n\nDipodomys\nmerriami\nM\n37\n45\n\n\nDipodomys\nmerriami\nF\n35\n46\n\n\nDipodomys\nmerriami\nF\n35\n40\n\n\nDipodomys\nmerriami\nF\n35\n30\n\n\nDipodomys\nmerriami\nM\n35\n39\n\n\nDipodomys\nmerriami\nM\n35\n34\n\n\nDipodomys\nmerriami\nF\n37\n42\n\n\nDipodomys\nmerriami\nM\n37\n42\n\n\nPerognathus\nflavus\nF\n13\n8\n\n\nDipodomys\nmerriami\nF\n37\n31\n\n\nDipodomys\nmerriami\nF\n36\n40\n\n\nDipodomys\nmerriami\nM\n36\n37\n\n\nDipodomys\nmerriami\nM\n36\n48\n\n\nDipodomys\nmerriami\nM\n37\n42\n\n\nDipodomys\nmerriami\nF\n39\n45\n\n\nChaetodipus\npenicillatus\nF\n21\n16\n\n\nDipodomys\nmerriami\nF\n36\n36\n\n\nDipodomys\nmerriami\nM\n36\n42\n\n\nDipodomys\nmerriami\nM\n36\n44\n\n\nDipodomys\nmerriami\nF\n36\n41\n\n\nDipodomys\nmerriami\nF\n36\n40\n\n\nDipodomys\nmerriami\nM\n37\n34\n\n\nDipodomys\nmerriami\nM\n33\n40\n\n\nDipodomys\nmerriami\nM\n33\n44\n\n\nDipodomys\nmerriami\nM\n37\n44\n\n\nDipodomys\nmerriami\nM\n34\n36\n\n\nDipodomys\nmerriami\nM\n35\n33\n\n\nDipodomys\nmerriami\nF\n37\n46\n\n\nDipodomys\nmerriami\nF\n34\n35\n\n\nDipodomys\nmerriami\nM\n36\n46\n\n\nDipodomys\nmerriami\nF\n33\n37\n\n\nDipodomys\nmerriami\nM\n36\n34\n\n\nDipodomys\nmerriami\nF\n36\n45\n\n\nPerognathus\nflavus\nF\n15\n7\n\n\nDipodomys\nmerriami\nM\n37\n51\n\n\nDipodomys\nmerriami\nM\n35\n39\n\n\nDipodomys\nmerriami\nM\n36\n29\n\n\nDipodomys\nmerriami\nF\n32\n48\n\n\nDipodomys\nmerriami\nM\n38\n46\n\n\nDipodomys\nmerriami\nF\n37\n41\n\n\nDipodomys\nmerriami\nM\n37\n45\n\n\nDipodomys\nmerriami\nF\n35\n42\n\n\nDipodomys\nmerriami\nF\n36\n53\n\n\nDipodomys\nmerriami\nF\n35\n49\n\n\nDipodomys\nmerriami\nF\n36\n46\n\n\nPerognathus\nflavus\nF\n13\n9\n\n\nChaetodipus\npenicillatus\nF\n19\n15\n\n\nPerognathus\nflavus\nM\n13\n4\n\n\nDipodomys\nmerriami\nM\n36\n48\n\n\nDipodomys\nmerriami\nM\n37\n51\n\n\nDipodomys\nmerriami\nM\n38\n50\n\n\nDipodomys\nmerriami\nM\n35\n44\n\n\nDipodomys\nmerriami\nM\n25\n44\n\n\nDipodomys\nmerriami\nM\n35\n45\n\n\nDipodomys\nmerriami\nF\n37\n45\n\n\nPeromyscus\neremicus\nM\n20\n19\n\n\nDipodomys\nmerriami\nF\n38\n44\n\n\nDipodomys\nmerriami\nF\n36\n42\n\n\nDipodomys\nmerriami\nM\n37\n39\n\n\nDipodomys\nmerriami\nM\n37\n47\n\n\nDipodomys\nmerriami\nM\n36\n42\n\n\nDipodomys\nmerriami\nM\n36\n49\n\n\nDipodomys\nmerriami\nM\n38\n39\n\n\nDipodomys\nmerriami\nF\n36\n43\n\n\nDipodomys\nmerriami\nM\n35\n50\n\n\nDipodomys\nmerriami\nM\n36\n41\n\n\nDipodomys\nmerriami\nM\n37\n47\n\n\nDipodomys\nmerriami\nF\n36\n37\n\n\nDipodomys\nmerriami\nM\n36\n41\n\n\nDipodomys\nmerriami\nF\n36\n36\n\n\nDipodomys\nmerriami\nM\n36\n45\n\n\nPeromyscus\neremicus\nM\n19\n20"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#join-by-species-genus",
    "href": "slides/week-4/week-4-joins-2.html#join-by-species-genus",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Join by species + genus",
    "text": "Join by species + genus\n\n\nmeasurements |&gt; \n  left_join(species,\n            by = join_by(species == species, \n                         genus_name == genus)\n            )\n\n\n\n\n\n\n\n\ngenus_name\nspecies\nsex\nhindfoot_length\nweight\ntaxa\nspecies_id\n\n\n\n\nDipodomys\nmerriami\nM\n35\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n48\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n34\n29\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n36\nRodent\nDM\n\n\nDipodomys\nordii\nF\n32\n52\nRodent\nDO\n\n\nPerognathus\nflavus\nM\n15\n8\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n36\n35\nRodent\nDM\n\n\nPerognathus\nflavus\nM\n12\n7\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n32\n22\nRodent\nDM\n\n\nPerognathus\nflavus\nM\n16\n9\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n34\n42\nRodent\nDM\n\n\nPerognathus\nflavus\nF\n14\n8\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n35\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n37\n37\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n43\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n33\n40\nRodent\nDM\n\n\nPerognathus\nflavus\nF\n11\n9\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n35\n45\nRodent\nDM\n\n\nChaetodipus\npenicillatus\nF\n20\n15\nRodent\nPP\n\n\nDipodomys\nmerriami\nM\n35\n29\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n39\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n43\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n38\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n38\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n45\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n30\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n39\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n34\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n37\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n42\nRodent\nDM\n\n\nPerognathus\nflavus\nF\n13\n8\nRodent\nPF\n\n\nDipodomys\nmerriami\nF\n37\n31\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n37\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n48\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n39\n45\nRodent\nDM\n\n\nChaetodipus\npenicillatus\nF\n21\n16\nRodent\nPP\n\n\nDipodomys\nmerriami\nF\n36\n36\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n34\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n33\n40\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n33\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n34\n36\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n33\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n37\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n34\n35\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n33\n37\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n34\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n45\nRodent\nDM\n\n\nPerognathus\nflavus\nF\n15\n7\nRodent\nPF\n\n\nDipodomys\nmerriami\nM\n37\n51\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n39\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n29\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n32\n48\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n38\n46\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n37\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n45\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n53\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n35\n49\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n46\nRodent\nDM\n\n\nPerognathus\nflavus\nF\n13\n9\nRodent\nPF\n\n\nChaetodipus\npenicillatus\nF\n19\n15\nRodent\nPP\n\n\nPerognathus\nflavus\nM\n13\n4\nRodent\nPF\n\n\nDipodomys\nmerriami\nM\n36\n48\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n51\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n38\n50\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n25\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n45\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n37\n45\nRodent\nDM\n\n\nPeromyscus\neremicus\nM\n20\n19\nRodent\nPE\n\n\nDipodomys\nmerriami\nF\n38\n44\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n39\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n47\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n42\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n49\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n38\n39\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n43\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n35\n50\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n37\n47\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n37\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n41\nRodent\nDM\n\n\nDipodomys\nmerriami\nF\n36\n36\nRodent\nDM\n\n\nDipodomys\nmerriami\nM\n36\n45\nRodent\nDM\n\n\nPeromyscus\neremicus\nM\n19\n20\nRodent\nPE\n\n\n\n\n\n\n\n\n\n\nWhat if a species was included in the species dataset, but not in the measurement dataset?"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#what-is-a-factor-variable",
    "href": "slides/week-4/week-4-joins-2.html#what-is-a-factor-variable",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "What is a factor variable?",
    "text": "What is a factor variable?\n\nIn general, factors are used for:\n\ncategorical variables with a fixed and known set of possible values.\n\n\nE.g., day_born = Sunday, Monday, Tuesday, …, Saturday\n\n\ndisplaying character vectors in non-alphabetical order."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#eras-tour",
    "href": "slides/week-4/week-4-joins-2.html#eras-tour",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Eras Tour",
    "text": "Eras Tour\nLet’s consider songs that Taylor Swift played on her Eras Tour. I have randomly selected 25 songs (and their albums) to consider.\n\neras_data \n\n# A tibble: 25 × 2\n   Song               Album     \n   &lt;chr&gt;              &lt;chr&gt;     \n 1 22                 Red       \n 2 ...Ready for It?   Reputation\n 3 The Archer         Lover     \n 4 Bejeweled          Midnights \n 5 Style              1989      \n 6 You Belong With Me Fearless  \n 7 Don't Blame Me     Reputation\n 8 illicit affairs    Folklore  \n 9 Lavender Haze      Midnights \n10 marjorie           Evermore  \n# ℹ 15 more rows"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – Base R",
    "text": "Creating a Factor – Base R\n\nA character vector:A factor vector:\n\n\n\n\neras_data |&gt; \n  pull(Album)\n\n [1] \"Red\"        \"Reputation\" \"Lover\"      \"Midnights\"  \"1989\"      \n [6] \"Fearless\"   \"Reputation\" \"Folklore\"   \"Midnights\"  \"Evermore\"  \n[11] \"Evermore\"   \"Lover\"      \"Lover\"      \"Red\"        \"Reputation\"\n[16] \"Reputation\" \"Speak Now\"  \"Red\"        \"Midnights\"  \"Fearless\"  \n[21] \"1989\"       \"Midnights\"  \"Fearless\"   \"Folklore\"   \"Lover\"     \n\n\n\n\n\n\n\neras_data |&gt; \n  pull(Album) |&gt; \n  as.factor()\n\n [1] Red        Reputation Lover      Midnights  1989       Fearless  \n [7] Reputation Folklore   Midnights  Evermore   Evermore   Lover     \n[13] Lover      Red        Reputation Reputation Speak Now  Red       \n[19] Midnights  Fearless   1989       Midnights  Fearless   Folklore  \n[25] Lover     \n9 Levels: 1989 Evermore Fearless Folklore Lover Midnights Red ... Speak Now"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r-1",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – Base R",
    "text": "Creating a Factor – Base R\nWhen you create a factor variable from a vector…\n\nEvery unique element in the vector becomes a level.\nThe levels are ordered alphabetically.\nThe elements are no longer displayed in quotes."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r-2",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-base-r-2",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – Base R",
    "text": "Creating a Factor – Base R\nYou can specify the order of the levels with the levels argument.\n\neras_data |&gt; \n  pull(Album) |&gt; \n  factor(levels = c(\"Fearless\",\n                    \"Speak Now\",\n                    \"Red\",\n                    \"1989\",\n                    \"Reputation\",\n                    \"Lover\",\n                    \"Folklore\",\n                    \"Evermore\",\n                    \"Midnights\")\n         )"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#forcats",
    "href": "slides/week-4/week-4-joins-2.html#forcats",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "forcats",
    "text": "forcats\n\n\n\nWe use this package to…\n\nturn character variables into factors.\nmake factors by discretizing numeric variables.\nrename or reorder the levels of an existing factor.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nforcats loads with tidyverse!\n\n\nThe packages forcats (“for categoricals”) helps wrangle categorical variables."
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – fct",
    "text": "Creating a Factor – fct\nWith fct(), the levels are automatically ordered in the order of first appearance.\n\n\neras_data |&gt; \n  pull(Album) |&gt; \n  fct()\n\n [1] Red        Reputation Lover      Midnights  1989       Fearless  \n [7] Reputation Folklore   Midnights  Evermore   Evermore   Lover     \n[13] Lover      Red        Reputation Reputation Speak Now  Red       \n[19] Midnights  Fearless   1989       Midnights  Fearless   Folklore  \n[25] Lover     \n9 Levels: Red Reputation Lover Midnights 1989 Fearless Folklore ... Speak Now"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor",
    "text": "Creating a Factor\n\n\neras_data &lt;- eras_data |&gt; \n  mutate(Album = fct(Album))\n\n\n\n\n\n\n\n\n\nTo change a column type to factor, you must wrap fct() in a mutate() call.\n\n\n\n\n\n\n\n\n\n\nI am using pull() to display the outcome:\n\neras_data |&gt; \n  pull(Album) |&gt; \n  fct()\n\n [1] Red        Reputation Lover      Midnights  1989       Fearless  \n [7] Reputation Folklore   Midnights  Evermore   Evermore   Lover     \n[13] Lover      Red        Reputation Reputation Speak Now  Red       \n[19] Midnights  Fearless   1989       Midnights  Fearless   Folklore  \n[25] Lover     \n9 Levels: Red Reputation Lover Midnights 1989 Fearless Folklore ... Speak Now"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct-1",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – fct",
    "text": "Creating a Factor – fct\nYou can still specify the order of the levels with level.\n\n\neras_data |&gt; \n  pull(Album) |&gt; \n  fct(levels = c(\"Fearless\",\n                 \"Speak Now\",\n                 \"Red\",\n                 \"1989\",\n                 \"Reputation\",\n                 \"Lover\",\n                 \"Folklore\",\n                 \"Evermore\",\n                 \"Midnights\")\n      )"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct-2",
    "href": "slides/week-4/week-4-joins-2.html#creating-a-factor-fct-2",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Creating a Factor – fct",
    "text": "Creating a Factor – fct\nYou can also specify non-present levels.\n\neras_data |&gt; \n  pull(Album) |&gt; \n  fct(levels = c(\"Taylor Swift\",\n                 \"Fearless\",\n                 \"Speak Now\",\n                 \"Red\",\n                 \"1989\",\n                 \"Reputation\",\n                 \"Lover\",\n                 \"Folklore\",\n                 \"Evermore\",\n                 \"Midnights\",\n                 \"The Tortured Poets Department\")\n      )"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-coding-a-factor-fct_recode",
    "href": "slides/week-4/week-4-joins-2.html#re-coding-a-factor-fct_recode",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-coding a Factor – fct_recode",
    "text": "Re-coding a Factor – fct_recode\n\nOops, we have a typo in some of our levels! We change existing levels with the syntax: \"&lt;new level&gt;\" = \"&lt;old level&gt;\".\n\n\n\n\neras_data |&gt;\n  mutate(Album = fct_recode(.f = Album,\n                            \"folklore\" = \"Folklore\",\n                            \"evermore\" = \"Evermore\",\n                            \"reputation\" = \"Reputation\")\n         )\n\n# A tibble: 25 × 2\n   Song               Album     \n   &lt;chr&gt;              &lt;fct&gt;     \n 1 22                 Red       \n 2 ...Ready for It?   reputation\n 3 The Archer         Lover     \n 4 Bejeweled          Midnights \n 5 Style              1989      \n 6 You Belong With Me Fearless  \n 7 Don't Blame Me     reputation\n 8 illicit affairs    folklore  \n 9 Lavender Haze      Midnights \n10 marjorie           evermore  \n# ℹ 15 more rows"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-coding-a-factor-case_when",
    "href": "slides/week-4/week-4-joins-2.html#re-coding-a-factor-case_when",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-coding a Factor – case_when",
    "text": "Re-coding a Factor – case_when\n\nWe have similar functionality with the case_when() function…\n\n\n\n\neras_data |&gt;\n  mutate(Album = case_when(Album == \"Folklore\" ~ \"folklore\",\n                           Album == \"Evermore\" ~ \"evermore\",\n                           Album == \"Reputation\" ~ \"reputation\",\n                           .default = Album),\n         Album = fct(Album)) |&gt; \n  pull(Album)\n\n [1] Red        reputation Lover      Midnights  1989       Fearless  \n [7] reputation folklore   Midnights  evermore   evermore   Lover     \n[13] Lover      Red        reputation reputation Speak Now  Red       \n[19] Midnights  Fearless   1989       Midnights  Fearless   folklore  \n[25] Lover     \n9 Levels: Red reputation Lover Midnights 1989 Fearless folklore ... Speak Now"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#collapsing-a-factor-fct_collapse",
    "href": "slides/week-4/week-4-joins-2.html#collapsing-a-factor-fct_collapse",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Collapsing a Factor –fct_collapse",
    "text": "Collapsing a Factor –fct_collapse\n\nCollapse multiple existing levels of a factor with the syntax:\n\"&lt;new level&gt;\" = c(\"&lt;old level&gt;\", \"&lt;old level&gt;\", ...).\n\n\n\n\neras_data |&gt; \n  mutate(Genre = fct_collapse(.f = Album,\n                       \"country pop\" = c(\"Taylor Swift\", \"Fearless\"),\n                       \"pop rock\" = c(\"Speak Now\", \"Red\"),\n                       \"electropop\" = c(\"1989\", \"Reputation\", \"Lover\"),\n                       \"folk pop\" = c(\"Folklore\", \"Evermore\"),\n                       \"alt-pop\" = \"Midnights\")\n         ) |&gt; \n  slice_sample(n = 6)\n\n# A tibble: 6 × 3\n  Song                                    Album      Genre      \n  &lt;chr&gt;                                   &lt;fct&gt;      &lt;fct&gt;      \n1 willow                                  Evermore   folk pop   \n2 You Belong With Me                      Fearless   country pop\n3 Lavender Haze                           Midnights  alt-pop    \n4 We Are Never Ever Getting Back Together Red        pop rock   \n5 illicit affairs                         Folklore   folk pop   \n6 Look What You Made Me Do                Reputation electropop"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-leveling-a-factor-fct_relevel",
    "href": "slides/week-4/week-4-joins-2.html#re-leveling-a-factor-fct_relevel",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-leveling a Factor –fct_relevel",
    "text": "Re-leveling a Factor –fct_relevel\nChange the order of the levels of an existing factor.\n\nOriginalOrdered by Copies Sold\n\n\n\neras_data |&gt;\n  pull(Album) |&gt; \n  levels()\n\n [1] \"Taylor Swift\"                  \"Fearless\"                     \n [3] \"Speak Now\"                     \"Red\"                          \n [5] \"1989\"                          \"Reputation\"                   \n [7] \"Lover\"                         \"Folklore\"                     \n [9] \"Evermore\"                      \"Midnights\"                    \n[11] \"The Tortured Poets Department\"\n\n\n\n\n\n\neras_data |&gt; \n  pull(Album) |&gt;\n  fct_relevel(c(\"Fearless\",\n                \"1989\",\n                \"Taylor Swift\",\n                \"Speak Now\",\n                \"Red\",\n                \"Midnights\",\n                \"Reputation\",\n                \"Folklore\",\n                \"Lover\",\n                \"Evermore\")\n              ) |&gt; \n  levels()"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2",
    "href": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-ordering Factors in ggplot2",
    "text": "Re-ordering Factors in ggplot2\n\nOriginalPlotSpecify LevelsPlot\n\n\nThe bars follow the default factor levels.\n\n\nfull_eras |&gt; \n  mutate(Album = fct(Album)) |&gt; \n  ggplot(mapping = aes(y = Album,\n               fill = Album)\n         ) +\n  geom_bar() +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Number of Songs Played on the Eras Tour by Album\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can order factor levels to order the bar plot.\n\nfull_eras |&gt; \n  mutate(Album = fct(Album,\n                     levels = c(\"Fearless\",\n                                \"Speak Now\",\n                                \"Red\",\n                                \"1989\",\n                                \"Reputation\",\n                                \"Lover\",\n                                \"Folklore\",\n                                \"Evermore\",\n                                \"Midnights\")\n                     )\n         ) |&gt; \n  ggplot(mapping = aes(y = Album,\n               fill = Album)\n         ) +\n  geom_bar() +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Number of Songs Played on the Eras Tour by Album\")"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2-1",
    "href": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2-1",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-ordering Factors in ggplot2",
    "text": "Re-ordering Factors in ggplot2\n\n\n\n\nOriginalPlotfct_reorder()Plot\n\n\n\nThe ridge plots follow the order of the factor levels.\n\nfull_eras |&gt; \n  ggplot(mapping = aes(x = Length, \n                       y = Album, \n                       fill = Album)\n         ) +\n  geom_density_ridges() +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n  labs(x = \"Song Length (mins)\",\n       y = \"\",\n       title = \"Length of Songs Played on the Eras Tour by Album\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInside ggplot(), we can order factor levels by a summary value.\n\nfull_eras |&gt; \n  ggplot(aes(x = Length, \n             y = fct_reorder(.f = Album,\n                             .x = Length,\n                             .fun = mean), \n             fill = Album)\n         ) +\n  geom_density_ridges() +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Song Length (mins)\",\n       y = \"\",\n       title = \"Length of Songs Played on the Eras Tour by Album\")"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2-2",
    "href": "slides/week-4/week-4-joins-2.html#re-ordering-factors-in-ggplot2-2",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Re-ordering Factors in ggplot2",
    "text": "Re-ordering Factors in ggplot2\n\nOriginalPlotfct_reorder2()Plot\n\n\n\nThe legend follows the order of the factor levels.\n\nfull_eras |&gt; \n  filter(!Album %in% c(\"1989\",\"Fearless\")) |&gt; \n  group_by(Album, Single) |&gt; \n  summarise(avg_len = mean(Length)) |&gt; \n  ggplot(mapping = aes(x = Single, \n                       y = avg_len, \n                       color = Album)) +\n  geom_point(size = 1.5) +\n  geom_line() +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(0,1),\n                     labels = c(\"No\", \"Yes\")\n                     ) +\n  labs(y = \"\",\n       title = \"Are Taylor Swift's Singles Shorter?\",\n       color = \"Album\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInside ggplot(), we can order factor levels by the \\(y\\) values associated with the largest \\(x\\) values.\n\nfull_eras |&gt; \n  filter(!Album %in% c(\"1989\",\"Fearless\")) |&gt; \n  group_by(Album, Single) |&gt; \n  summarise(avg_len = mean(Length)) |&gt; \n  ggplot(mapping = aes(x = Single, \n                       y = avg_len, \n                       color = fct_reorder2(.f = Album,\n                                            .x = Single,\n                                            .y = avg_len)\n                       )\n         ) +\n  geom_point(size = 1.5) +\n  geom_line() +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(0,1),\n                     labels = c(\"No\", \"Yes\")\n                     ) +\n  labs(y = \"\",\n       title = \"Are Taylor Swift's Singles Shorter?\",\n       color = \"Album\")"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#chatgpt-to-the-rescue",
    "href": "slides/week-4/week-4-joins-2.html#chatgpt-to-the-rescue",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "ChatGPT to the Rescue!",
    "text": "ChatGPT to the Rescue!\n\n\n\ncollapse the CA regions into the 10 Census regions"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#to-do",
    "href": "slides/week-4/week-4-joins-2.html#to-do",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "To do…",
    "text": "To do…\n\nLab 4: Childcare Costs in California\n\nDue Sunday (2/2) at 11:59pm\n\nRead Chapter 5: Strings + Dates\n\nCheck-in 5.1 due Tuesday (2/4) at 12pm\nCheck-in 5.2 due Thursday (2/6) at 12pm"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#today-we-will",
    "href": "slides/week-8/iteration-part-1.html#today-we-will",
    "title": "Iteration",
    "section": "Today we will…",
    "text": "Today we will…\n\nNew Material\n\nPerforming Repeated Tasks + Vectorization\nFunctional Programming: the map() family\n\nPA 8: The Twelve Days of Christmas Starter Functions"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#repetition",
    "href": "slides/week-8/iteration-part-1.html#repetition",
    "title": "Iteration",
    "section": "Repetition",
    "text": "Repetition\nType out the task over and over.\n\n\n\n\n\n\n\n\n\n\nDo not do this."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#iteration",
    "href": "slides/week-8/iteration-part-1.html#iteration",
    "title": "Iteration",
    "section": "Iteration",
    "text": "Iteration\nRepeatedly execute the same operation over and over.\n\n\nLoops (e.g., for() and while()) allow us to iterate.\n\n\n\n\n\n\nfor(i in 1:6){\n  print(i^2)\n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n[1] 36"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#vectorization",
    "href": "slides/week-8/iteration-part-1.html#vectorization",
    "title": "Iteration",
    "section": "Vectorization",
    "text": "Vectorization\nMany operations in R are vectorized.\n\nThese functions operate on vectors of values rather than a single value.\nWe can iterate without writing a loop.\n\n\n\nx &lt;- seq(from = -4, to = 6)\n\n\n\n\n\n\n\nabs(x)\n\n [1] 4 3 2 1 0 1 2 3 4 5 6\n\n\n\n\n\n\n\nfor(i in 1:length(x)){\n  x[i] &lt;- abs(x[i])\n}\n\nx\n\n [1] 4 3 2 1 0 1 2 3 4 5 6"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#vectorization-1",
    "href": "slides/week-8/iteration-part-1.html#vectorization-1",
    "title": "Iteration",
    "section": "Vectorization",
    "text": "Vectorization\nNot every function is vectorized.\n\nFor example, if() statements cannot operate on vectors.\n\n\n\n\n\npos_neg_zero &lt;- function(x){\n  if(x &gt; 0){\n    return(\"Greater than 0!\")\n  } \n  else if (x &lt; 0){\n    return(\"Less than 0!\")\n  } \n  else {\n    return(\"Equal to 0!\")\n  }\n}\n\n\n\n\npos_neg_zero(x)\n\nError in if (x &gt; 0) {: the condition has length &gt; 1\n\n\n\n\n\nThis means that if(x &gt; 0) can only be checked for something of length 1 (a single number, not a vector)."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#what-do-we-do-instead",
    "href": "slides/week-8/iteration-part-1.html#what-do-we-do-instead",
    "title": "Iteration",
    "section": "What do we do instead?",
    "text": "What do we do instead?\n\nOption 1 – Looping\n\nresult &lt;- rep(NA, length(x))\n\nfor(i in 1:length(x)){\n  result[i] &lt;- pos_neg_zero(x[i])\n}\n\nresult\n\n [1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n [5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n [9] \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\""
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#what-do-we-do-instead-1",
    "href": "slides/week-8/iteration-part-1.html#what-do-we-do-instead-1",
    "title": "Iteration",
    "section": "What do we do instead?",
    "text": "What do we do instead?\n\nOption 2 – Write a Vectorized Function\n\nif_else() and case_when() are the vectorized versions of if() and else if()\n\n\n\n\npos_neg_zero &lt;- function(x){\n  state &lt;- case_when(x &gt; 0 ~ \"Greater than 0!\", \n                     x &lt; 0 ~ \"Less than 0!\", \n                     .default = \"Equal to 0!\")\n  return(state)\n}\n\n\n\n\npos_neg_zero(x)\n\n [1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n [5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n [9] \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\""
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#some-functions-cannot-be-vectorized",
    "href": "slides/week-8/iteration-part-1.html#some-functions-cannot-be-vectorized",
    "title": "Iteration",
    "section": "Some functions cannot be vectorized!",
    "text": "Some functions cannot be vectorized!\n\nApplying class() to a single variable in a data frame returns the data type of that column:\n\nclass(penguins[[1]])\n\n[1] \"factor\"\n\n\n\n\n\nTrying to apply class() to every variable in a data frame returns the data type of the data frame:\n\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#what-can-we-do-instead",
    "href": "slides/week-8/iteration-part-1.html#what-can-we-do-instead",
    "title": "Iteration",
    "section": "What can we do instead?",
    "text": "What can we do instead?\nWrite a for() loop…\n\ndata_type &lt;- rep(NA, length = ncol(penguins))\n\nfor(i in seq_along(penguins)){\n  data_type[i] &lt;- class(penguins[[i]])\n}\n\n\n\n\nCode\ntibble(column = names(penguins), \n       type = data_type) |&gt; \n  pivot_wider(names_from = column, \n              values_from = type) |&gt;  \n  knitr::kable() |&gt;\n  kableExtra::kable_styling(font_size = 30)\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\nfactor\nfactor\nnumeric\nnumeric\ninteger\ninteger\nfactor\ninteger"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#what-can-we-do-instead-1",
    "href": "slides/week-8/iteration-part-1.html#what-can-we-do-instead-1",
    "title": "Iteration",
    "section": "What can we do instead?",
    "text": "What can we do instead?\nWhat about across()?\n\nEasily perform the same operation on multiple columns.\n\n\npenguins |&gt; \n  summarise(across(.cols = everything(), \n                   .fns = class)\n            ) |&gt;  \n  knitr::kable() |&gt;\n  kableExtra::kable_styling(font_size = 30)\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\nfactor\nfactor\nnumeric\nnumeric\ninteger\ninteger\nfactor\ninteger"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#but-across-uses-a-for-loop",
    "href": "slides/week-8/iteration-part-1.html#but-across-uses-a-for-loop",
    "title": "Iteration",
    "section": "But across() uses a for() loop!",
    "text": "But across() uses a for() loop!\n \n\n\nfor (j in seq_fns) {\n  fn &lt;- fns[[j]]\n  out[[k]] &lt;- fn(col, ...)\n  k &lt;- k + 1L"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#functional-programming-big-picture",
    "href": "slides/week-8/iteration-part-1.html#functional-programming-big-picture",
    "title": "Iteration",
    "section": "Functional Programming – Big Picture",
    "text": "Functional Programming – Big Picture\n\nWe will use functions as the arguments to other functions!\n\n\n\n\n\n\n\n\nNote\n\n\nThere are a slew of apply() functions you will likely come across.\nWe will instead focus on the purrr package and the map() family of functions."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#purrr",
    "href": "slides/week-8/iteration-part-1.html#purrr",
    "title": "Iteration",
    "section": "purrr",
    "text": "purrr\n\n\nThe purrr package breaks common list manipulations into small, independent pieces.\n\nThis strategy involves two steps:\n\n\n\n\n\nBreak a complex problem into smaller sub-problems.\n\n\n\n\nSolve each sub-problem for a single element of a list.\n\nOnce done, purrr will generalize the solution to every element in the list."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#map",
    "href": "slides/week-8/iteration-part-1.html#map",
    "title": "Iteration",
    "section": "map()",
    "text": "map()\nThe map() function iterates through each item in a list and applies a function, then returns the new list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the |&gt;\n\n\nThe first argument in map() is the list, so if we pipe into it, we only specify the function we want to iterate!"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#map-dataframes",
    "href": "slides/week-8/iteration-part-1.html#map-dataframes",
    "title": "Iteration",
    "section": "map() + Dataframes",
    "text": "map() + Dataframes\nA data frame is just a list of columns – map() will apply a function to every column.\n\n\n\n\npenguins |&gt; \n  select(where(is.numeric)) |&gt;\n  map(.f = ~ mean(.x, na.rm = TRUE))\n\n$bill_length_mm\n[1] 43.92193\n\n$bill_depth_mm\n[1] 17.15117\n\n$flipper_length_mm\n[1] 200.9152\n\n$body_mass_g\n[1] 4201.754\n\n$year\n[1] 2008.029\n\n\n\n\n\n\nUse a lambda function (with ~ and .x), just like in across()!"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#the-map-family",
    "href": "slides/week-8/iteration-part-1.html#the-map-family",
    "title": "Iteration",
    "section": "The map() Family",
    "text": "The map() Family\nThe map_xxx() variants allow you to specify the type of output you want.\n\nmap() creates a list.\nmap_chr() creates a character vector.\nmap_lgl() creates an logical vector.\nmap_int() creates a integer vector.\nmap_dbl() creates a numeric vector.\n\nAll take in a list (.x) and a function (.f) as arguments."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#map-penguins",
    "href": "slides/week-8/iteration-part-1.html#map-penguins",
    "title": "Iteration",
    "section": "map() + penguins",
    "text": "map() + penguins\n\nmap_dbl()map_int()map_lgl()\n\n\nCalculate the mean of each column.\n\npenguins |&gt; \n  select(bill_length_mm:body_mass_g) |&gt; \n  map_dbl(.f = ~ mean(.x, na.rm = TRUE))\n\n   bill_length_mm     bill_depth_mm flipper_length_mm       body_mass_g \n         43.92193          17.15117         200.91520        4201.75439 \n\n\n\nOutput is a vector of doubles.\n\n\nCalculate the number of NAs in each column.\n\npenguins |&gt; \n  map_int(.f = ~ sum(is.na(.x)))\n\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex              year \n                2                 2                11                 0 \n\n\nOutput is a vector of integers.\n\n\nCalculate the number of NAs in each column.\n\npenguins |&gt; \n  map_lgl(.f = ~ sum(is.na(.x)))\n\nError in `map_lgl()`:\nℹ In index: 3.\nℹ With name: bill_length_mm.\nCaused by error:\n! Can't coerce from an integer to a logical.\n\n\nR returns an error if the output is of the wrong type!"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#comparing-speed",
    "href": "slides/week-8/iteration-part-1.html#comparing-speed",
    "title": "Iteration",
    "section": "Comparing Speed",
    "text": "Comparing Speed\nUsing functional programming can be much faster than using for loops.\n\nfor()map()RunCompare\n\n\n\nloop_func &lt;- function(df){\n  typ &lt;- rep(NA, ncol(df))\n  for(i in 1:ncol(df)){\n    typ[i] &lt;- class(df[[i]])\n  }\n  return(typ)\n}\n\n\n\n\nmap_func &lt;- function(df){\n  typ &lt;- map_chr(df, class)\n  return(typ)\n}\n\n\n\n\ndf &lt;- as.data.frame(matrix(1,\n                           nrow = 5,\n                           ncol = 7))\n\n\n\n\nloop_func(df)\n\n[1] \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\"\n\n\n\n\n\n\nmap_func(df)\n\n       V1        V2        V3        V4        V5        V6        V7 \n\"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \n\n\n\n\n\n\n\ndf &lt;- as_tibble(\n  matrix(1,\n         nrow = 5,\n         ncol = 100000)\n  )\n\nmicrobenchmark::microbenchmark(loop_func(df),\n                               map_func(df),\n                               times = 20)"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#map_if",
    "href": "slides/week-8/iteration-part-1.html#map_if",
    "title": "Iteration",
    "section": "map_if()",
    "text": "map_if()\nThe map_if() function allows us to conditionally apply a function to each item in a list.\n\n\nacross()map_if()map_if() to data frame\n\n\n\n\npenguins |&gt; \n  mutate(across(.cols = where(is.numeric), \n                .fns = scale))\n\n\n\n# A tibble: 8 × 5\n  species island    bill_length_mm[,1] bill_depth_mm[,1] sex   \n  &lt;fct&gt;   &lt;fct&gt;                  &lt;dbl&gt;             &lt;dbl&gt; &lt;fct&gt; \n1 Adelie  Torgersen             -0.883             0.784 male  \n2 Adelie  Torgersen             -0.810             0.126 female\n3 Adelie  Torgersen             -0.663             0.430 female\n4 Adelie  Torgersen             NA                NA     &lt;NA&gt;  \n5 Adelie  Torgersen             -1.32              1.09  female\n6 Adelie  Torgersen             -0.847             1.75  male  \n7 Adelie  Torgersen             -0.920             0.329 female\n8 Adelie  Torgersen             -0.865             1.24  male  \n\n\n\n\n\n\n\npenguins |&gt; \n  map_if(is.numeric, scale)\n\n$species\n  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   \n[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap\n[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[344] Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n$island\n  [1] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n  [8] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [15] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Biscoe   \n [22] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [29] Biscoe    Biscoe    Dream     Dream     Dream     Dream     Dream    \n [36] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [43] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [50] Dream     Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [57] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [64] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Torgersen Torgersen\n [71] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [78] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [85] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [92] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [99] Dream     Dream     Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[106] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[113] Biscoe    Biscoe    Biscoe    Biscoe    Torgersen Torgersen Torgersen\n[120] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n[127] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Dream    \n[134] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[141] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[148] Dream     Dream     Dream     Dream     Dream     Biscoe    Biscoe   \n[155] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[162] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[169] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[176] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[183] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[190] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[197] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[204] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[211] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[218] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[225] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[232] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[239] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[246] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[253] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[260] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[267] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[274] Biscoe    Biscoe    Biscoe    Dream     Dream     Dream     Dream    \n[281] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[288] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[295] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[302] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[309] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[316] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[323] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[330] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[337] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[344] Dream    \nLevels: Biscoe Dream Torgersen\n\n$bill_length_mm\n              [,1]\n  [1,] -0.88320467\n  [2,] -0.80993901\n  [3,] -0.66340769\n  [4,]          NA\n  [5,] -1.32279862\n  [6,] -0.84657184\n  [7,] -0.91983750\n  [8,] -0.86488825\n  [9,] -1.79902541\n [10,] -0.35202864\n [11,] -1.12131806\n [12,] -1.12131806\n [13,] -0.51687637\n [14,] -0.97478674\n [15,] -1.70744334\n [16,] -1.34111504\n [17,] -0.95647033\n [18,] -0.26044656\n [19,] -1.74407616\n [20,]  0.38062795\n [21,] -1.12131806\n [22,] -1.13963448\n [23,] -1.46932994\n [24,] -1.04805240\n [25,] -0.93815391\n [26,] -1.57922843\n [27,] -0.60845845\n [28,] -0.62677486\n [29,] -1.10300165\n [30,] -0.62677486\n [31,] -0.80993901\n [32,] -1.23121655\n [33,] -0.80993901\n [34,] -0.55350920\n [35,] -1.37774787\n [36,] -0.86488825\n [37,] -0.93815391\n [38,] -0.31539581\n [39,] -1.15795089\n [40,] -0.75498976\n [41,] -1.35943145\n [42,] -0.57182562\n [43,] -1.45101353\n [44,]  0.03261607\n [45,] -1.26784938\n [46,] -0.79162259\n [47,] -0.51687637\n [48,] -1.17626731\n [49,] -1.45101353\n [50,] -0.29707939\n [51,] -0.79162259\n [52,] -0.70004052\n [53,] -1.63417768\n [54,] -0.35202864\n [55,] -1.72575975\n [56,] -0.46192713\n [57,] -0.90152108\n [58,] -0.60845845\n [59,] -1.35943145\n [60,] -1.15795089\n [61,] -1.50596277\n [62,] -0.48024354\n [63,] -1.15795089\n [64,] -0.51687637\n [65,] -1.37774787\n [66,] -0.42529430\n [67,] -1.54259560\n [68,] -0.51687637\n [69,] -1.46932994\n [70,] -0.38866147\n [71,] -1.90892390\n [72,] -0.77330618\n [73,] -0.79162259\n [74,]  0.34399512\n [75,] -1.54259560\n [76,] -0.20549732\n [77,] -0.55350920\n [78,] -1.23121655\n [79,] -1.41438070\n [80,] -0.33371222\n [81,] -1.70744334\n [82,] -0.18718091\n [83,] -1.32279862\n [84,] -1.61586126\n [85,] -1.21290014\n [86,] -0.48024354\n [87,] -1.39606428\n [88,] -1.28616579\n [89,] -1.02973599\n [90,] -0.91983750\n [91,] -1.50596277\n [92,] -0.51687637\n [93,] -1.81734182\n [94,] -0.79162259\n [95,] -1.41438070\n [96,] -0.57182562\n [97,] -1.06636882\n [98,] -0.66340769\n [99,] -1.98218956\n[100,] -0.13223166\n[101,] -1.63417768\n[102,] -0.53519279\n[103,] -1.13963448\n[104,] -1.12131806\n[105,] -1.10300165\n[106,] -0.77330618\n[107,] -0.97478674\n[108,] -1.04805240\n[109,] -1.06636882\n[110,] -0.13223166\n[111,] -1.06636882\n[112,]  0.30736229\n[113,] -0.77330618\n[114,] -0.31539581\n[115,] -0.79162259\n[116,] -0.22381374\n[117,] -0.97478674\n[118,] -1.21290014\n[119,] -1.50596277\n[120,] -0.51687637\n[121,] -1.41438070\n[122,] -1.13963448\n[123,] -0.68172411\n[124,] -0.46192713\n[125,] -1.59754485\n[126,] -0.60845845\n[127,] -0.93815391\n[128,] -0.44361071\n[129,] -0.90152108\n[130,]  0.03261607\n[131,] -0.99310316\n[132,] -0.15054808\n[133,] -1.30448221\n[134,] -1.17626731\n[135,] -1.06636882\n[136,] -0.51687637\n[137,] -1.52427919\n[138,] -0.68172411\n[139,] -1.26784938\n[140,] -0.77330618\n[141,] -0.68172411\n[142,] -0.60845845\n[143,] -2.16535371\n[144,] -0.59014203\n[145,] -1.21290014\n[146,] -0.90152108\n[147,] -0.86488825\n[148,] -1.34111504\n[149,] -1.45101353\n[150,] -1.12131806\n[151,] -1.45101353\n[152,] -0.44361071\n[153,]  0.39894437\n[154,]  1.11328455\n[155,]  0.87517115\n[156,]  1.11328455\n[157,]  0.67369059\n[158,]  0.47221003\n[159,]  0.27072946\n[160,]  0.50884286\n[161,] -0.11391525\n[162,]  0.52715927\n[163,] -0.55350920\n[164,]  0.93012040\n[165,]  0.28904588\n[166,]  0.82022191\n[167,]  0.34399512\n[168,]  0.98506964\n[169,] -0.35202864\n[170,]  0.96675323\n[171,]  0.41726078\n[172,]  0.87517115\n[173,]  1.14991738\n[174,]  0.21578022\n[175,]  0.47221003\n[176,]  0.43557720\n[177,] -0.18718091\n[178,]  0.39894437\n[179,]  0.10588173\n[180,]  0.71032342\n[181,]  0.78358908\n[182,]  1.11328455\n[183,]  0.61874135\n[184,] -0.20549732\n[185,]  0.21578022\n[186,]  2.87166037\n[187,]  0.94843681\n[188,]  0.82022191\n[189,] -0.24213015\n[190,]  0.08756532\n[191,]  0.01429966\n[192,]  0.87517115\n[193,] -0.22381374\n[194,]  1.04001889\n[195,]  0.25241305\n[196,]  1.04001889\n[197,]  1.20486662\n[198,] -0.05896600\n[199,]  0.28904588\n[200,]  1.20486662\n[201,]  0.17914739\n[202,]  0.23409663\n[203,]  0.49052644\n[204,]  0.83853832\n[205,]  0.21578022\n[206,]  1.13160096\n[207,]  0.47221003\n[208,]  0.19746381\n[209,] -0.02233317\n[210,]  0.28904588\n[211,] -0.13223166\n[212,]  1.18655021\n[213,]  0.25241305\n[214,]  0.41726078\n[215,]  0.32567871\n[216,]  1.90089038\n[217,]  0.34399512\n[218,]  1.07665172\n[219,]  0.41726078\n[220,]  1.02170247\n[221,] -0.07728242\n[222,]  1.24149945\n[223,]  0.69200701\n[224,]  0.45389361\n[225,]  0.78358908\n[226,]  0.47221003\n[227,]  0.45389361\n[228,]  0.85685474\n[229,]  0.65537418\n[230,]  1.31476511\n[231,]  0.23409663\n[232,]  0.23409663\n[233,]  0.94843681\n[234,]  1.57119492\n[235,]  0.63705776\n[236,]  1.11328455\n[237,]  0.17914739\n[238,]  1.25981586\n[239,] -0.09559883\n[240,]  1.35139794\n[241,]  0.65537418\n[242,]  1.49792926\n[243,]  0.65537418\n[244,]  1.51624567\n[245,]  0.28904588\n[246,]  1.02170247\n[247,]  0.10588173\n[248,]  1.25981586\n[249,]  1.00338606\n[250,]  0.54547569\n[251,]  0.82022191\n[252,]  1.31476511\n[253,]  0.83853832\n[254,]  2.19395302\n[255,]  0.60042493\n[256,]  0.94843681\n[257,]  0.61874135\n[258,]  0.52715927\n[259,] -0.40697788\n[260,]  1.73604265\n[261,] -0.11391525\n[262,]  0.76527266\n[263,]  1.20486662\n[264,]  1.07665172\n[265,] -0.07728242\n[266,]  1.38803077\n[267,]  0.41726078\n[268,]  2.04742170\n[269,]  0.10588173\n[270,]  0.89348757\n[271,]  0.60042493\n[272,]          NA\n[273,]  0.52715927\n[274,]  1.18655021\n[275,]  0.23409663\n[276,]  1.09496813\n[277,]  0.47221003\n[278,]  1.11328455\n[279,]  1.35139794\n[280,]  0.27072946\n[281,]  1.60782775\n[282,]  0.23409663\n[283,]  0.39894437\n[284,]  1.35139794\n[285,]  0.38062795\n[286,]  1.35139794\n[287,]  0.49052644\n[288,]  1.42466360\n[289,]  0.56379210\n[290,]  1.47961284\n[291,]  0.36231154\n[292,]  1.20486662\n[293,]  1.16823379\n[294,]  2.57859773\n[295,]  0.45389361\n[296,]  0.96675323\n[297,] -0.27876298\n[298,]  0.83853832\n[299,] -0.13223166\n[300,]  1.22318303\n[301,]  0.50884286\n[302,]  1.47961284\n[303,]  1.20486662\n[304,]  1.02170247\n[305,]  0.45389361\n[306,]  1.62614416\n[307,] -0.55350920\n[308,]  1.88257397\n[309,] -0.26044656\n[310,]  1.29644869\n[311,]  1.05833530\n[312,]  0.65537418\n[313,]  0.67369059\n[314,]  1.47961284\n[315,]  0.54547569\n[316,]  1.75435906\n[317,]  0.93012040\n[318,]  0.41726078\n[319,]  1.27813228\n[320,]  0.28904588\n[321,]  1.27813228\n[322,]  1.25981586\n[323,]  1.13160096\n[324,]  0.93012040\n[325,]  1.38803077\n[326,]  1.07665172\n[327,]  0.76527266\n[328,]  1.36971435\n[329,]  0.32567871\n[330,]  1.24149945\n[331,] -0.26044656\n[332,]  1.51624567\n[333,]  0.23409663\n[334,]  0.98506964\n[335,]  1.14991738\n[336,]  0.30736229\n[337,]  1.46129643\n[338,]  0.52715927\n[339,]  0.32567871\n[340,]  2.17563660\n[341,] -0.07728242\n[342,]  1.04001889\n[343,]  1.25981586\n[344,]  1.14991738\nattr(,\"scaled:center\")\n[1] 43.92193\nattr(,\"scaled:scale\")\n[1] 5.459584\n\n$bill_depth_mm\n              [,1]\n  [1,]  0.78430007\n  [2,]  0.12600328\n  [3,]  0.42983257\n  [4,]          NA\n  [5,]  1.08812936\n  [6,]  1.74642615\n  [7,]  0.32855614\n  [8,]  1.24004400\n  [9,]  0.48047078\n [10,]  1.54387329\n [11,] -0.02591137\n [12,]  0.07536506\n [13,]  0.22727971\n [14,]  2.05025544\n [15,]  1.99961722\n [16,]  0.32855614\n [17,]  0.93621471\n [18,]  1.79706436\n [19,]  0.63238542\n [20,]  2.20217008\n [21,]  0.58174721\n [22,]  0.78430007\n [23,]  1.03749114\n [24,]  0.48047078\n [25,]  0.02472685\n [26,]  0.88557650\n [27,]  0.73366185\n [28,]  0.37919435\n [29,]  0.73366185\n [30,]  0.88557650\n [31,] -0.22846423\n [32,]  0.48047078\n [33,]  0.32855614\n [34,]  0.88557650\n [35,] -0.07654958\n [36,]  1.99961722\n [37,]  1.44259686\n [38,]  0.68302364\n [39,]  1.08812936\n [40,]  0.98685293\n [41,]  0.42983257\n [42,]  0.63238542\n [43,]  0.68302364\n [44,]  1.29068222\n [45,] -0.12718780\n [46,]  0.83493828\n [47,]  0.93621471\n [48,]  0.88557650\n [49,]  0.37919435\n [50,]  2.05025544\n [51,]  0.27791792\n [52,]  0.88557650\n [53,]  0.37919435\n [54,]  1.18940579\n [55,]  0.48047078\n [56,]  0.73366185\n [57,]  0.17664149\n [58,]  0.83493828\n [59,] -0.27910244\n [60,]  0.98685293\n [61,] -0.12718780\n [62,]  1.99961722\n [63,] -0.07654958\n [64,]  0.53110900\n [65,] -0.02591137\n [66,]  0.42983257\n [67,] -0.48165530\n [68,]  0.98685293\n [69,] -0.27910244\n [70,]  1.13876757\n [71,]  0.93621471\n [72,]  0.63238542\n [73,]  0.02472685\n [74,]  0.88557650\n [75,]  0.17664149\n [76,]  0.68302364\n [77,] -0.17782601\n [78,]  1.13876757\n [79,] -0.53229351\n [80,]  0.98685293\n [81,]  0.02472685\n [82,]  0.22727971\n [83,]  0.83493828\n [84,]  1.13876757\n [85,]  0.32855614\n [86,]  1.59451151\n [87,]  1.18940579\n [88,]  0.73366185\n [89,]  1.03749114\n [90,]  0.83493828\n [91,]  0.42983257\n [92,]  0.48047078\n [93,] -0.02591137\n [94,]  0.48047078\n [95,]  0.07536506\n [96,]  0.88557650\n [97,]  0.73366185\n [98,]  0.68302364\n [99,] -0.53229351\n[100,]  0.68302364\n[101,]  0.37919435\n[102,]  1.44259686\n[103,] -0.58293173\n[104,]  1.44259686\n[105,]  0.73366185\n[106,]  0.88557650\n[107,]  0.02472685\n[108,]  1.44259686\n[109,] -0.07654958\n[110,]  0.93621471\n[111,] -0.32974066\n[112,]  1.59451151\n[113,]  0.27791792\n[114,]  1.18940579\n[115,]  1.79706436\n[116,]  0.58174721\n[117,] -0.07654958\n[118,]  1.69578793\n[119,] -0.07654958\n[120,]  0.73366185\n[121,]  0.02472685\n[122,]  1.34132043\n[123,] -0.07654958\n[124,]  0.68302364\n[125,] -0.63356994\n[126,]  0.93621471\n[127,]  0.22727971\n[128,]  0.58174721\n[129,] -0.02591137\n[130,]  0.42983257\n[131,]  0.37919435\n[132,]  1.03749114\n[133,]  0.68302364\n[134,]  0.68302364\n[135,]  0.22727971\n[136,]  0.17664149\n[137,]  0.17664149\n[138,]  1.49323508\n[139,] -0.32974066\n[140,]  0.37919435\n[141,] -0.02591137\n[142,]  0.02472685\n[143,] -0.83612280\n[144,] -0.07654958\n[145,] -0.17782601\n[146,]  0.78430007\n[147,]  0.73366185\n[148,]  0.63238542\n[149,]  0.32855614\n[150,]  0.48047078\n[151,] -0.02591137\n[152,]  0.68302364\n[153,] -2.00080174\n[154,] -0.43101709\n[155,] -1.54505781\n[156,] -0.98803745\n[157,] -1.34250495\n[158,] -1.84888710\n[159,] -1.29186674\n[160,] -0.93739923\n[161,] -1.89952531\n[162,] -0.88676102\n[163,] -1.74761067\n[164,] -0.53229351\n[165,] -1.74761067\n[166,] -1.29186674\n[167,] -1.29186674\n[168,] -0.73484637\n[169,] -1.84888710\n[170,] -0.98803745\n[171,] -1.34250495\n[172,] -1.03867566\n[173,] -1.44378138\n[174,] -1.34250495\n[175,] -1.34250495\n[176,] -0.68420816\n[177,] -2.05143996\n[178,] -1.03867566\n[179,] -1.44378138\n[180,] -1.08931388\n[181,] -1.44378138\n[182,] -0.93739923\n[183,] -0.93739923\n[184,] -1.49441960\n[185,] -1.34250495\n[186,] -0.07654958\n[187,] -1.19059031\n[188,] -0.43101709\n[189,] -1.74761067\n[190,]  0.07536506\n[191,] -1.79824888\n[192,] -0.73484637\n[193,] -1.74761067\n[194,] -0.58293173\n[195,] -1.74761067\n[196,] -1.08931388\n[197,] -0.63356994\n[198,] -1.64633424\n[199,] -1.64633424\n[200,] -0.63356994\n[201,] -1.95016353\n[202,] -0.68420816\n[203,] -1.49441960\n[204,] -1.54505781\n[205,] -1.39314317\n[206,] -1.08931388\n[207,] -1.39314317\n[208,] -0.88676102\n[209,] -1.64633424\n[210,] -1.08931388\n[211,] -1.34250495\n[212,] -0.93739923\n[213,] -1.69697245\n[214,] -1.13995209\n[215,] -1.64633424\n[216,] -0.73484637\n[217,] -1.49441960\n[218,] -0.17782601\n[219,] -1.39314317\n[220,] -0.48165530\n[221,] -1.49441960\n[222,] -1.08931388\n[223,] -1.08931388\n[224,] -0.78548459\n[225,] -0.78548459\n[226,] -1.19059031\n[227,] -1.08931388\n[228,] -0.58293173\n[229,] -1.49441960\n[230,] -0.43101709\n[231,] -1.69697245\n[232,] -0.38037887\n[233,] -1.34250495\n[234,] -0.78548459\n[235,] -1.29186674\n[236,] -0.63356994\n[237,] -1.69697245\n[238,]  0.07536506\n[239,] -1.39314317\n[240,] -1.49441960\n[241,] -1.59569603\n[242,] -0.07654958\n[243,] -1.08931388\n[244,] -0.02591137\n[245,] -1.34250495\n[246,] -0.53229351\n[247,] -1.24122852\n[248,] -0.73484637\n[249,] -0.68420816\n[250,] -1.29186674\n[251,] -1.39314317\n[252,] -0.32974066\n[253,] -1.08931388\n[254,] -0.07654958\n[255,] -0.83612280\n[256,] -1.08931388\n[257,] -1.69697245\n[258,] -0.53229351\n[259,] -1.24122852\n[260,] -0.68420816\n[261,] -1.59569603\n[262,] -1.03867566\n[263,] -0.98803745\n[264,] -0.63356994\n[265,] -0.98803745\n[266,] -0.43101709\n[267,] -1.54505781\n[268,] -0.58293173\n[269,] -0.73484637\n[270,] -0.48165530\n[271,] -1.74761067\n[272,]          NA\n[273,] -1.44378138\n[274,] -0.73484637\n[275,] -1.19059031\n[276,] -0.53229351\n[277,]  0.37919435\n[278,]  1.18940579\n[279,]  1.03749114\n[280,]  0.78430007\n[281,]  1.34132043\n[282,]  0.32855614\n[283,]  0.53110900\n[284,]  0.53110900\n[285,]  0.88557650\n[286,]  1.39195865\n[287,]  0.32855614\n[288,]  1.59451151\n[289,]  0.07536506\n[290,]  0.48047078\n[291,] -0.02591137\n[292,]  1.24004400\n[293,]  1.44259686\n[294,]  0.32855614\n[295,]  0.73366185\n[296,]  0.53110900\n[297,]  0.07536506\n[298,]  0.17664149\n[299,] -0.27910244\n[300,]  1.13876757\n[301,]  0.37919435\n[302,]  0.93621471\n[303,]  0.63238542\n[304,]  0.93621471\n[305,]  0.32855614\n[306,]  1.44259686\n[307,] -0.27910244\n[308,]  1.84770258\n[309,] -0.22846423\n[310,]  0.83493828\n[311,]  0.73366185\n[312,] -0.17782601\n[313,]  0.58174721\n[314,]  1.79706436\n[315,] -0.27910244\n[316,]  1.39195865\n[317,]  1.18940579\n[318,]  0.17664149\n[319,]  0.98685293\n[320,] -0.07654958\n[321,]  0.37919435\n[322,]  0.68302364\n[323,]  0.37919435\n[324,]  1.24004400\n[325,]  0.78430007\n[326,]  0.07536506\n[327,] -0.38037887\n[328,]  0.93621471\n[329,]  0.07536506\n[330,]  1.29068222\n[331,]  0.07536506\n[332,]  0.83493828\n[333,] -0.27910244\n[334,]  1.39195865\n[335,]  0.83493828\n[336,]  1.13876757\n[337,]  1.18940579\n[338,] -0.32974066\n[339,] -0.07654958\n[340,]  1.34132043\n[341,]  0.48047078\n[342,]  0.53110900\n[343,]  0.93621471\n[344,]  0.78430007\nattr(,\"scaled:center\")\n[1] 17.15117\nattr(,\"scaled:scale\")\n[1] 1.974793\n\n$flipper_length_mm\n               [,1]\n  [1,] -1.416271525\n  [2,] -1.060696087\n  [3,] -0.420660299\n  [4,]           NA\n  [5,] -0.562890474\n  [6,] -0.776235737\n  [7,] -1.416271525\n  [8,] -0.420660299\n  [9,] -0.562890474\n [10,] -0.776235737\n [11,] -1.060696087\n [12,] -1.487386613\n [13,] -1.345156438\n [14,] -0.705120649\n [15,] -0.207315036\n [16,] -1.131811175\n [17,] -0.420660299\n [18,] -0.278430124\n [19,] -1.202926262\n [20,] -0.491775386\n [21,] -1.914077138\n [22,] -1.487386613\n [23,] -0.847350824\n [24,] -1.131811175\n [25,] -1.487386613\n [26,] -0.989581000\n [27,] -1.274041350\n [28,] -0.989581000\n [29,] -2.056307313\n [30,] -1.487386613\n [31,] -1.629616788\n [32,] -1.629616788\n [33,] -0.918465912\n [34,] -1.202926262\n [35,] -0.420660299\n [36,] -0.349545211\n [37,] -0.776235737\n [38,] -1.487386613\n [39,] -1.416271525\n [40,] -1.202926262\n [41,] -1.345156438\n [42,] -0.420660299\n [43,] -1.060696087\n [44,] -0.349545211\n [45,] -1.131811175\n [46,] -0.776235737\n [47,] -1.345156438\n [48,] -1.558501700\n [49,] -0.776235737\n [50,] -0.705120649\n [51,] -1.060696087\n [52,] -0.918465912\n [53,] -0.776235737\n [54,] -0.065084861\n [55,] -0.989581000\n [56,] -0.705120649\n [57,] -1.060696087\n [58,] -0.562890474\n [59,] -1.416271525\n [60,] -0.491775386\n [61,] -1.131811175\n [62,] -0.420660299\n [63,] -1.131811175\n [64,] -0.634005562\n [65,] -1.202926262\n [66,] -0.634005562\n [67,] -0.420660299\n [68,] -0.918465912\n [69,] -0.776235737\n [70,] -0.207315036\n [71,] -0.776235737\n [72,] -0.776235737\n [73,] -0.349545211\n [74,] -0.278430124\n [75,] -0.776235737\n [76,] -0.420660299\n [77,] -0.705120649\n [78,] -1.202926262\n [79,] -0.989581000\n [80,] -0.420660299\n [81,] -0.847350824\n [82,] -0.349545211\n [83,] -0.989581000\n [84,] -0.562890474\n [85,] -0.705120649\n [86,] -0.491775386\n [87,] -0.776235737\n [88,] -0.847350824\n [89,] -0.847350824\n [90,] -0.776235737\n [91,]  0.077145314\n [92,]  0.290490577\n [93,] -1.131811175\n [94,] -1.060696087\n [95,] -0.989581000\n [96,]  0.503835840\n [97,] -0.776235737\n [98,] -0.349545211\n [99,] -1.629616788\n[100,] -0.634005562\n[101,] -0.634005562\n[102,]  0.148260402\n[103,] -1.274041350\n[104,] -0.776235737\n[105,] -0.562890474\n[106,] -1.202926262\n[107,] -0.136199948\n[108,] -0.776235737\n[109,] -1.416271525\n[110,] -0.278430124\n[111,] -0.207315036\n[112,] -0.705120649\n[113,] -0.562890474\n[114,] -0.278430124\n[115,] -0.705120649\n[116,] -0.349545211\n[117,] -0.918465912\n[118,] -0.136199948\n[119,] -0.847350824\n[120,] -0.847350824\n[121,] -0.989581000\n[122,] -0.207315036\n[123,] -1.771846963\n[124,]  0.077145314\n[125,] -1.060696087\n[126,] -0.136199948\n[127,] -0.705120649\n[128,] -0.420660299\n[129,] -0.705120649\n[130,]  0.646066015\n[131,] -0.776235737\n[132,] -0.278430124\n[133,] -0.562890474\n[134,] -0.136199948\n[135,] -0.989581000\n[136,] -0.776235737\n[137,] -0.705120649\n[138,] -0.065084861\n[139,] -1.131811175\n[140,] -0.562890474\n[141,] -0.562890474\n[142,] -0.989581000\n[143,] -0.918465912\n[144,] -0.776235737\n[145,] -0.634005562\n[146,] -1.131811175\n[147,] -0.776235737\n[148,] -1.202926262\n[149,] -0.420660299\n[150,] -0.562890474\n[151,] -0.989581000\n[152,]  0.006030227\n[153,]  0.717181103\n[154,]  2.068367767\n[155,]  0.646066015\n[156,]  1.214986716\n[157,]  1.001641453\n[158,]  0.646066015\n[159,]  0.717181103\n[160,]  1.286101803\n[161,]  0.574950927\n[162,]  1.001641453\n[163,]  0.930526365\n[164,]  1.072756541\n[165,]  0.930526365\n[166,]  0.859411278\n[167,]  0.646066015\n[168,]  1.143871628\n[169,]  0.646066015\n[170,]  1.428331979\n[171,]  0.574950927\n[172,]  1.499447066\n[173,]  1.214986716\n[174,]  1.001641453\n[175,]  0.859411278\n[176,]  1.001641453\n[177,]  1.001641453\n[178,]  1.001641453\n[179,]  1.072756541\n[180,]  1.001641453\n[181,]  0.646066015\n[182,]  1.357216891\n[183,]  1.499447066\n[184,]  0.574950927\n[185,]  0.432720752\n[186,]  2.068367767\n[187,]  1.357216891\n[188,]  1.357216891\n[189,]  0.859411278\n[190,]  1.286101803\n[191,]  0.503835840\n[192,]  0.503835840\n[193,]  0.503835840\n[194,]  1.712792329\n[195,]  0.646066015\n[196,]  1.072756541\n[197,]  1.499447066\n[198,]  1.143871628\n[199,]  0.646066015\n[200,]  1.712792329\n[201,]  0.859411278\n[202,]  1.001641453\n[203,]  0.646066015\n[204,]  1.357216891\n[205,]  0.646066015\n[206,]  1.712792329\n[207,]  1.143871628\n[208,]  1.357216891\n[209,]  0.503835840\n[210,]  1.357216891\n[211,]  0.503835840\n[212,]  1.641677241\n[213,]  0.503835840\n[214,]  1.428331979\n[215,]  0.930526365\n[216,]  2.139482854\n[217,]  1.286101803\n[218,]  2.068367767\n[219,]  0.930526365\n[220,]  1.997252679\n[221,]  1.357216891\n[222,]  1.570562154\n[223,]  1.072756541\n[224,]  1.428331979\n[225,]  1.428331979\n[226,]  1.143871628\n[227,]  1.072756541\n[228,]  2.068367767\n[229,]  0.574950927\n[230,]  1.357216891\n[231,]  1.001641453\n[232,]  1.570562154\n[233,]  0.788296190\n[234,]  1.428331979\n[235,]  0.788296190\n[236,]  1.641677241\n[237,]  0.788296190\n[238,]  1.926137592\n[239,]  1.214986716\n[240,]  1.214986716\n[241,]  0.788296190\n[242,]  2.068367767\n[243,]  1.214986716\n[244,]  1.926137592\n[245,]  0.788296190\n[246,]  1.641677241\n[247,]  0.930526365\n[248,]  1.783907417\n[249,]  1.072756541\n[250,]  1.499447066\n[251,]  0.148260402\n[252,]  1.712792329\n[253,]  1.286101803\n[254,]  1.926137592\n[255,]  1.001641453\n[256,]  1.926137592\n[257,]  1.072756541\n[258,]  1.001641453\n[259,]  0.646066015\n[260,]  1.286101803\n[261,]  0.503835840\n[262,]  0.574950927\n[263,]  1.072756541\n[264,]  1.997252679\n[265,]  0.859411278\n[266,]  2.068367767\n[267,]  1.143871628\n[268,]  2.068367767\n[269,]  1.143871628\n[270,]  1.499447066\n[271,]  0.930526365\n[272,]           NA\n[273,]  1.001641453\n[274,]  1.499447066\n[275,]  0.788296190\n[276,]  0.859411278\n[277,] -0.634005562\n[278,] -0.349545211\n[279,] -0.562890474\n[280,] -0.918465912\n[281,] -0.278430124\n[282,] -0.207315036\n[283,] -1.629616788\n[284,] -0.278430124\n[285,] -0.420660299\n[286,] -0.207315036\n[287,] -0.562890474\n[288,] -0.491775386\n[289,] -1.131811175\n[290,]  0.006030227\n[291,] -0.776235737\n[292,]  0.006030227\n[293,] -0.278430124\n[294,] -1.416271525\n[295,] -0.776235737\n[296,] -0.420660299\n[297,] -1.416271525\n[298,] -0.705120649\n[299,] -0.989581000\n[300,] -0.562890474\n[301,] -0.420660299\n[302,] -0.278430124\n[303,] -0.065084861\n[304,] -0.065084861\n[305,] -0.705120649\n[306,]  0.290490577\n[307,] -0.989581000\n[308,]  0.006030227\n[309,] -0.989581000\n[310,]  0.148260402\n[311,] -0.420660299\n[312,] -0.136199948\n[313,] -0.420660299\n[314,]  0.646066015\n[315,] -0.634005562\n[316,]  0.290490577\n[317,]  0.646066015\n[318,] -0.989581000\n[319,] -0.349545211\n[320,] -0.349545211\n[321,] -0.349545211\n[322,]  0.006030227\n[323,] -0.776235737\n[324,]  0.788296190\n[325,] -0.989581000\n[326,] -0.207315036\n[327,] -0.136199948\n[328,]  0.006030227\n[329,] -0.562890474\n[330,]  0.148260402\n[331,] -0.989581000\n[332,] -0.278430124\n[333,] -0.705120649\n[334,]  0.148260402\n[335,]  0.077145314\n[336,] -0.491775386\n[337,]  0.361605665\n[338,] -0.847350824\n[339,] -0.420660299\n[340,]  0.432720752\n[341,]  0.077145314\n[342,] -0.562890474\n[343,]  0.646066015\n[344,] -0.207315036\nattr(,\"scaled:center\")\n[1] 200.9152\nattr(,\"scaled:scale\")\n[1] 14.06171\n\n$body_mass_g\n               [,1]\n  [1,] -0.563316704\n  [2,] -0.500969030\n  [3,] -1.186793445\n  [4,]           NA\n  [5,] -0.937402749\n  [6,] -0.688012052\n  [7,] -0.719185889\n  [8,]  0.590115266\n  [9,] -0.906228912\n [10,]  0.060160036\n [11,] -1.124445771\n [12,] -0.625664378\n [13,] -1.249141119\n [14,] -0.500969030\n [15,]  0.247203059\n [16,] -0.625664378\n [17,] -0.937402749\n [18,]  0.371898407\n [19,] -1.093271934\n [20,] -0.002187638\n [21,] -0.999750423\n [22,] -0.750359726\n [23,] -0.500969030\n [24,] -0.313926008\n [25,] -0.500969030\n [26,] -0.500969030\n [27,] -0.812707400\n [28,] -1.249141119\n [29,] -1.311488793\n [30,] -0.313926008\n [31,] -1.186793445\n [32,] -0.376273682\n [33,] -1.124445771\n [34,] -0.376273682\n [35,] -1.093271934\n [36,] -0.064535312\n [37,] -0.313926008\n [38,] -0.812707400\n [39,] -1.124445771\n [40,]  0.558941429\n [41,] -1.311488793\n [42,] -0.376273682\n [43,] -1.373836467\n [44,]  0.247203059\n [45,] -1.498531815\n [46,]  0.496593755\n [47,] -0.968576586\n [48,] -1.529705652\n [49,] -0.937402749\n [50,] -0.064535312\n [51,] -0.875055074\n [52,]  0.122507710\n [53,] -0.937402749\n [54,] -0.189230660\n [55,] -1.623227163\n [56,] -0.625664378\n [57,] -0.812707400\n [58,] -0.500969030\n [59,] -1.685574837\n [60,] -0.563316704\n [61,] -1.311488793\n [62,]  0.247203059\n [63,] -0.750359726\n [64,] -0.189230660\n [65,] -1.685574837\n [66,] -0.313926008\n [67,] -1.062098097\n [68,] -0.126882986\n [69,] -1.436184141\n [70,]  0.309550733\n [71,] -0.750359726\n [72,] -0.376273682\n [73,] -0.812707400\n [74,] -0.064535312\n [75,] -0.625664378\n [76,]  0.060160036\n [77,] -0.625664378\n [78,] -0.376273682\n [79,] -0.812707400\n [80,] -0.251578334\n [81,] -1.249141119\n [82,]  0.621289103\n [83,] -0.500969030\n [84,] -0.002187638\n [85,] -1.062098097\n [86,] -0.812707400\n [87,] -0.500969030\n [88,] -0.875055074\n [89,] -0.313926008\n [90,] -0.750359726\n [91,] -0.812707400\n [92,]  0.122507710\n [93,] -0.999750423\n [94,]  0.309550733\n [95,] -1.124445771\n [96,]  0.122507710\n [97,] -0.625664378\n [98,]  0.184855384\n [99,] -1.623227163\n[100,] -0.126882986\n[101,] -0.594490541\n[102,]  0.652462940\n[103,] -1.405010304\n[104,]  0.060160036\n[105,] -1.592053326\n[106,] -0.812707400\n[107,] -0.563316704\n[108,] -0.376273682\n[109,] -1.280314956\n[110,]  0.714810614\n[111,] -0.469795193\n[112,]  0.496593755\n[113,] -1.249141119\n[114,]  0.091333873\n[115,] -0.376273682\n[116,] -0.158056823\n[117,] -1.623227163\n[118,] -0.532142867\n[119,] -1.062098097\n[120,] -1.093271934\n[121,] -1.311488793\n[122,] -0.875055074\n[123,] -0.937402749\n[124,] -0.407447519\n[125,] -1.436184141\n[126,] -0.251578334\n[127,] -1.155619608\n[128,]  0.122507710\n[129,] -1.436184141\n[130,] -0.251578334\n[131,] -1.093271934\n[132,] -0.875055074\n[133,] -0.875055074\n[134,]  0.340724570\n[135,] -0.968576586\n[136,] -0.376273682\n[137,] -1.280314956\n[138,] -0.282752171\n[139,] -0.999750423\n[140,]  0.060160036\n[141,] -0.999750423\n[142,] -0.906228912\n[143,] -1.436184141\n[144,] -0.594490541\n[145,] -1.498531815\n[146,] -0.688012052\n[147,]  0.060160036\n[148,] -0.906228912\n[149,] -0.937402749\n[150,] -0.563316704\n[151,] -0.625664378\n[152,] -0.251578334\n[153,]  0.371898407\n[154,]  1.868242584\n[155,]  0.309550733\n[156,]  1.868242584\n[157,]  1.494156540\n[158,]  0.434246081\n[159,]  0.745984451\n[160,]  1.244765843\n[161,]  0.247203059\n[162,]  1.182418169\n[163,]  0.558941429\n[164,]  1.681199562\n[165,]  0.558941429\n[166,]  2.055285606\n[167,] -0.002187638\n[168,]  2.055285606\n[169,] -0.064535312\n[170,]  2.616414673\n[171,]  0.745984451\n[172,]  1.431808866\n[173,]  1.868242584\n[174,]  0.995375147\n[175,]  0.247203059\n[176,]  1.057722821\n[177,]  0.995375147\n[178,]  1.120070495\n[179,] -0.126882986\n[180,]  1.805894910\n[181,]  0.496593755\n[182,]  1.681199562\n[183,]  1.307113518\n[184,]  0.621289103\n[185,]  1.057722821\n[186,]  2.304676302\n[187,]  1.182418169\n[188,]  1.494156540\n[189,]  0.933027473\n[190,]  1.307113518\n[191,]  0.184855384\n[192,]  1.431808866\n[193,] -0.313926008\n[194,]  1.868242584\n[195,]  0.122507710\n[196,]  0.683636777\n[197,]  1.681199562\n[198,]  0.870679799\n[199,] -0.002187638\n[200,]  1.494156540\n[201,]  1.120070495\n[202,]  1.369461192\n[203,]  0.808332125\n[204,]  1.369461192\n[205,]  0.247203059\n[206,]  0.995375147\n[207,]  0.870679799\n[208,]  1.057722821\n[209,]  0.122507710\n[210,]  0.995375147\n[211,]  0.309550733\n[212,]  1.681199562\n[213,] -0.002187638\n[214,]  1.369461192\n[215,]  0.247203059\n[216,]  1.805894910\n[217,]  0.621289103\n[218,]  1.868242584\n[219,]  0.558941429\n[220,]  1.992937932\n[221,]  0.621289103\n[222,]  1.681199562\n[223,]  0.683636777\n[224,]  0.995375147\n[225,]  1.120070495\n[226,]  1.244765843\n[227,]  0.621289103\n[228,]  1.992937932\n[229,]  0.496593755\n[230,]  2.242328628\n[231,]  0.683636777\n[232,]  2.179980954\n[233,]  0.527767592\n[234,]  1.556504214\n[235,]  0.652462940\n[236,]  1.431808866\n[237,]  0.683636777\n[238,]  1.743547236\n[239,]  0.496593755\n[240,]  1.369461192\n[241,]  0.839505962\n[242,]  1.681199562\n[243,]  0.933027473\n[244,]  1.494156540\n[245,]  0.683636777\n[246,]  1.805894910\n[247,]  0.808332125\n[248,]  1.244765843\n[249,]  0.901853636\n[250,]  0.839505962\n[251,]  0.527767592\n[252,]  1.307113518\n[253,]  0.808332125\n[254,]  1.743547236\n[255,]  0.964201310\n[256,]  1.618851888\n[257,]  0.652462940\n[258,]  1.618851888\n[259,]  0.621289103\n[260,]  1.618851888\n[261,]  0.465419918\n[262,]  1.618851888\n[263,]  0.995375147\n[264,]  2.179980954\n[265,]  0.558941429\n[266,]  1.618851888\n[267,]  0.216029222\n[268,]  2.055285606\n[269,]  0.839505962\n[270,]  2.242328628\n[271,]  0.901853636\n[272,]           NA\n[273,]  0.808332125\n[274,]  1.930590258\n[275,]  1.244765843\n[276,]  1.494156540\n[277,] -0.875055074\n[278,] -0.376273682\n[279,] -0.688012052\n[280,] -0.843881237\n[281,] -0.594490541\n[282,] -0.313926008\n[283,] -1.186793445\n[284,] -0.563316704\n[285,] -0.064535312\n[286,] -0.625664378\n[287,] -0.500969030\n[288,] -0.532142867\n[289,] -0.625664378\n[290,] -0.189230660\n[291,] -0.781533563\n[292,] -0.189230660\n[293,] -1.124445771\n[294,] -0.625664378\n[295,] -0.937402749\n[296,]  0.247203059\n[297,] -0.750359726\n[298,] -0.999750423\n[299,] -1.623227163\n[300,] -0.500969030\n[301,] -1.124445771\n[302,] -0.064535312\n[303,] -0.999750423\n[304,] -0.500969030\n[305,] -0.625664378\n[306,]  0.434246081\n[307,] -1.249141119\n[308,]  0.122507710\n[309,] -1.062098097\n[310,] -0.126882986\n[311,] -0.750359726\n[312,] -0.376273682\n[313,] -0.438621356\n[314,]  0.745984451\n[315,] -1.872617859\n[316,]  0.371898407\n[317,] -0.313926008\n[318,] -0.688012052\n[319,] -0.812707400\n[320,] -0.875055074\n[321,] -0.656838215\n[322,]  0.309550733\n[323,] -0.999750423\n[324,]  0.122507710\n[325,] -1.186793445\n[326,] -0.656838215\n[327,] -1.093271934\n[328,] -0.313926008\n[329,] -0.750359726\n[330,] -0.189230660\n[331,] -1.062098097\n[332,] -0.937402749\n[333,] -1.186793445\n[334,] -0.189230660\n[335,] -0.500969030\n[336,] -0.843881237\n[337,] -0.313926008\n[338,] -0.688012052\n[339,] -0.688012052\n[340,] -0.251578334\n[341,] -0.999750423\n[342,] -0.532142867\n[343,] -0.126882986\n[344,] -0.532142867\nattr(,\"scaled:center\")\n[1] 4201.754\nattr(,\"scaled:scale\")\n[1] 801.9545\n\n$sex\n  [1] male   female female &lt;NA&gt;   female male   female male   &lt;NA&gt;   &lt;NA&gt;  \n [11] &lt;NA&gt;   &lt;NA&gt;   female male   male   female female male   female male  \n [21] female male   female male   male   female male   female female male  \n [31] female male   female male   female male   male   female female male  \n [41] female male   female male   female male   male   &lt;NA&gt;   female male  \n [51] female male   female male   female male   female male   female male  \n [61] female male   female male   female male   female male   female male  \n [71] female male   female male   female male   female male   female male  \n [81] female male   female male   female male   male   female male   female\n [91] female male   female male   female male   female male   female male  \n[101] female male   female male   female male   female male   female male  \n[111] female male   female male   female male   female male   female male  \n[121] female male   female male   female male   female male   female male  \n[131] female male   female male   female male   female male   female male  \n[141] female male   female male   female male   male   female female male  \n[151] female male   female male   female male   male   female female male  \n[161] female male   female male   female male   female male   female male  \n[171] female male   male   female female male   female male   &lt;NA&gt;   male  \n[181] female male   male   female female male   female male   female male  \n[191] female male   female male   female male   male   female female male  \n[201] female male   female male   female male   female male   female male  \n[211] female male   female male   female male   female male   &lt;NA&gt;   male  \n[221] female male   female male   male   female female male   female male  \n[231] female male   female male   female male   female male   female male  \n[241] female male   female male   female male   female male   male   female\n[251] female male   female male   female male   &lt;NA&gt;   male   female male  \n[261] female male   female male   female male   female male   &lt;NA&gt;   male  \n[271] female &lt;NA&gt;   female male   female male   female male   male   female\n[281] male   female female male   female male   female male   female male  \n[291] female male   male   female female male   female male   female male  \n[301] female male   female male   female male   female male   female male  \n[311] male   female female male   female male   male   female male   female\n[321] female male   female male   male   female female male   female male  \n[331] female male   female male   male   female male   female female male  \n[341] female male   male   female\nLevels: female male\n\n$year\n              [,1]\n  [1,] -1.25748435\n  [2,] -1.25748435\n  [3,] -1.25748435\n  [4,] -1.25748435\n  [5,] -1.25748435\n  [6,] -1.25748435\n  [7,] -1.25748435\n  [8,] -1.25748435\n  [9,] -1.25748435\n [10,] -1.25748435\n [11,] -1.25748435\n [12,] -1.25748435\n [13,] -1.25748435\n [14,] -1.25748435\n [15,] -1.25748435\n [16,] -1.25748435\n [17,] -1.25748435\n [18,] -1.25748435\n [19,] -1.25748435\n [20,] -1.25748435\n [21,] -1.25748435\n [22,] -1.25748435\n [23,] -1.25748435\n [24,] -1.25748435\n [25,] -1.25748435\n [26,] -1.25748435\n [27,] -1.25748435\n [28,] -1.25748435\n [29,] -1.25748435\n [30,] -1.25748435\n [31,] -1.25748435\n [32,] -1.25748435\n [33,] -1.25748435\n [34,] -1.25748435\n [35,] -1.25748435\n [36,] -1.25748435\n [37,] -1.25748435\n [38,] -1.25748435\n [39,] -1.25748435\n [40,] -1.25748435\n [41,] -1.25748435\n [42,] -1.25748435\n [43,] -1.25748435\n [44,] -1.25748435\n [45,] -1.25748435\n [46,] -1.25748435\n [47,] -1.25748435\n [48,] -1.25748435\n [49,] -1.25748435\n [50,] -1.25748435\n [51,] -0.03552216\n [52,] -0.03552216\n [53,] -0.03552216\n [54,] -0.03552216\n [55,] -0.03552216\n [56,] -0.03552216\n [57,] -0.03552216\n [58,] -0.03552216\n [59,] -0.03552216\n [60,] -0.03552216\n [61,] -0.03552216\n [62,] -0.03552216\n [63,] -0.03552216\n [64,] -0.03552216\n [65,] -0.03552216\n [66,] -0.03552216\n [67,] -0.03552216\n [68,] -0.03552216\n [69,] -0.03552216\n [70,] -0.03552216\n [71,] -0.03552216\n [72,] -0.03552216\n [73,] -0.03552216\n [74,] -0.03552216\n [75,] -0.03552216\n [76,] -0.03552216\n [77,] -0.03552216\n [78,] -0.03552216\n [79,] -0.03552216\n [80,] -0.03552216\n [81,] -0.03552216\n [82,] -0.03552216\n [83,] -0.03552216\n [84,] -0.03552216\n [85,] -0.03552216\n [86,] -0.03552216\n [87,] -0.03552216\n [88,] -0.03552216\n [89,] -0.03552216\n [90,] -0.03552216\n [91,] -0.03552216\n [92,] -0.03552216\n [93,] -0.03552216\n [94,] -0.03552216\n [95,] -0.03552216\n [96,] -0.03552216\n [97,] -0.03552216\n [98,] -0.03552216\n [99,] -0.03552216\n[100,] -0.03552216\n[101,]  1.18644003\n[102,]  1.18644003\n[103,]  1.18644003\n[104,]  1.18644003\n[105,]  1.18644003\n[106,]  1.18644003\n[107,]  1.18644003\n[108,]  1.18644003\n[109,]  1.18644003\n[110,]  1.18644003\n[111,]  1.18644003\n[112,]  1.18644003\n[113,]  1.18644003\n[114,]  1.18644003\n[115,]  1.18644003\n[116,]  1.18644003\n[117,]  1.18644003\n[118,]  1.18644003\n[119,]  1.18644003\n[120,]  1.18644003\n[121,]  1.18644003\n[122,]  1.18644003\n[123,]  1.18644003\n[124,]  1.18644003\n[125,]  1.18644003\n[126,]  1.18644003\n[127,]  1.18644003\n[128,]  1.18644003\n[129,]  1.18644003\n[130,]  1.18644003\n[131,]  1.18644003\n[132,]  1.18644003\n[133,]  1.18644003\n[134,]  1.18644003\n[135,]  1.18644003\n[136,]  1.18644003\n[137,]  1.18644003\n[138,]  1.18644003\n[139,]  1.18644003\n[140,]  1.18644003\n[141,]  1.18644003\n[142,]  1.18644003\n[143,]  1.18644003\n[144,]  1.18644003\n[145,]  1.18644003\n[146,]  1.18644003\n[147,]  1.18644003\n[148,]  1.18644003\n[149,]  1.18644003\n[150,]  1.18644003\n[151,]  1.18644003\n[152,]  1.18644003\n[153,] -1.25748435\n[154,] -1.25748435\n[155,] -1.25748435\n[156,] -1.25748435\n[157,] -1.25748435\n[158,] -1.25748435\n[159,] -1.25748435\n[160,] -1.25748435\n[161,] -1.25748435\n[162,] -1.25748435\n[163,] -1.25748435\n[164,] -1.25748435\n[165,] -1.25748435\n[166,] -1.25748435\n[167,] -1.25748435\n[168,] -1.25748435\n[169,] -1.25748435\n[170,] -1.25748435\n[171,] -1.25748435\n[172,] -1.25748435\n[173,] -1.25748435\n[174,] -1.25748435\n[175,] -1.25748435\n[176,] -1.25748435\n[177,] -1.25748435\n[178,] -1.25748435\n[179,] -1.25748435\n[180,] -1.25748435\n[181,] -1.25748435\n[182,] -1.25748435\n[183,] -1.25748435\n[184,] -1.25748435\n[185,] -1.25748435\n[186,] -1.25748435\n[187,] -0.03552216\n[188,] -0.03552216\n[189,] -0.03552216\n[190,] -0.03552216\n[191,] -0.03552216\n[192,] -0.03552216\n[193,] -0.03552216\n[194,] -0.03552216\n[195,] -0.03552216\n[196,] -0.03552216\n[197,] -0.03552216\n[198,] -0.03552216\n[199,] -0.03552216\n[200,] -0.03552216\n[201,] -0.03552216\n[202,] -0.03552216\n[203,] -0.03552216\n[204,] -0.03552216\n[205,] -0.03552216\n[206,] -0.03552216\n[207,] -0.03552216\n[208,] -0.03552216\n[209,] -0.03552216\n[210,] -0.03552216\n[211,] -0.03552216\n[212,] -0.03552216\n[213,] -0.03552216\n[214,] -0.03552216\n[215,] -0.03552216\n[216,] -0.03552216\n[217,] -0.03552216\n[218,] -0.03552216\n[219,] -0.03552216\n[220,] -0.03552216\n[221,] -0.03552216\n[222,] -0.03552216\n[223,] -0.03552216\n[224,] -0.03552216\n[225,] -0.03552216\n[226,] -0.03552216\n[227,] -0.03552216\n[228,] -0.03552216\n[229,] -0.03552216\n[230,] -0.03552216\n[231,] -0.03552216\n[232,] -0.03552216\n[233,]  1.18644003\n[234,]  1.18644003\n[235,]  1.18644003\n[236,]  1.18644003\n[237,]  1.18644003\n[238,]  1.18644003\n[239,]  1.18644003\n[240,]  1.18644003\n[241,]  1.18644003\n[242,]  1.18644003\n[243,]  1.18644003\n[244,]  1.18644003\n[245,]  1.18644003\n[246,]  1.18644003\n[247,]  1.18644003\n[248,]  1.18644003\n[249,]  1.18644003\n[250,]  1.18644003\n[251,]  1.18644003\n[252,]  1.18644003\n[253,]  1.18644003\n[254,]  1.18644003\n[255,]  1.18644003\n[256,]  1.18644003\n[257,]  1.18644003\n[258,]  1.18644003\n[259,]  1.18644003\n[260,]  1.18644003\n[261,]  1.18644003\n[262,]  1.18644003\n[263,]  1.18644003\n[264,]  1.18644003\n[265,]  1.18644003\n[266,]  1.18644003\n[267,]  1.18644003\n[268,]  1.18644003\n[269,]  1.18644003\n[270,]  1.18644003\n[271,]  1.18644003\n[272,]  1.18644003\n[273,]  1.18644003\n[274,]  1.18644003\n[275,]  1.18644003\n[276,]  1.18644003\n[277,] -1.25748435\n[278,] -1.25748435\n[279,] -1.25748435\n[280,] -1.25748435\n[281,] -1.25748435\n[282,] -1.25748435\n[283,] -1.25748435\n[284,] -1.25748435\n[285,] -1.25748435\n[286,] -1.25748435\n[287,] -1.25748435\n[288,] -1.25748435\n[289,] -1.25748435\n[290,] -1.25748435\n[291,] -1.25748435\n[292,] -1.25748435\n[293,] -1.25748435\n[294,] -1.25748435\n[295,] -1.25748435\n[296,] -1.25748435\n[297,] -1.25748435\n[298,] -1.25748435\n[299,] -1.25748435\n[300,] -1.25748435\n[301,] -1.25748435\n[302,] -1.25748435\n[303,] -0.03552216\n[304,] -0.03552216\n[305,] -0.03552216\n[306,] -0.03552216\n[307,] -0.03552216\n[308,] -0.03552216\n[309,] -0.03552216\n[310,] -0.03552216\n[311,] -0.03552216\n[312,] -0.03552216\n[313,] -0.03552216\n[314,] -0.03552216\n[315,] -0.03552216\n[316,] -0.03552216\n[317,] -0.03552216\n[318,] -0.03552216\n[319,] -0.03552216\n[320,] -0.03552216\n[321,]  1.18644003\n[322,]  1.18644003\n[323,]  1.18644003\n[324,]  1.18644003\n[325,]  1.18644003\n[326,]  1.18644003\n[327,]  1.18644003\n[328,]  1.18644003\n[329,]  1.18644003\n[330,]  1.18644003\n[331,]  1.18644003\n[332,]  1.18644003\n[333,]  1.18644003\n[334,]  1.18644003\n[335,]  1.18644003\n[336,]  1.18644003\n[337,]  1.18644003\n[338,]  1.18644003\n[339,]  1.18644003\n[340,]  1.18644003\n[341,]  1.18644003\n[342,]  1.18644003\n[343,]  1.18644003\n[344,]  1.18644003\nattr(,\"scaled:center\")\n[1] 2008.029\nattr(,\"scaled:scale\")\n[1] 0.8183559\n\n\n\n\n\n\n\npenguins |&gt; \n  map_if(is.numeric, scale) |&gt; \n  bind_cols()\n\n\n\n# A tibble: 8 × 5\n  species island    bill_length_mm[,1] bill_depth_mm[,1] sex   \n  &lt;fct&gt;   &lt;fct&gt;                  &lt;dbl&gt;             &lt;dbl&gt; &lt;fct&gt; \n1 Adelie  Torgersen             -0.883             0.784 male  \n2 Adelie  Torgersen             -0.810             0.126 female\n3 Adelie  Torgersen             -0.663             0.430 female\n4 Adelie  Torgersen             NA                NA     &lt;NA&gt;  \n5 Adelie  Torgersen             -1.32              1.09  female\n6 Adelie  Torgersen             -0.847             1.75  male  \n7 Adelie  Torgersen             -0.920             0.329 female\n8 Adelie  Torgersen             -0.865             1.24  male"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#the-pmap-family",
    "href": "slides/week-8/iteration-part-1.html#the-pmap-family",
    "title": "Iteration",
    "section": "The pmap() Family",
    "text": "The pmap() Family\nThese functions take in a list of vectors and a function.\n\nThe function must accept a number of arguments equal to the length of the list,"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#the-pmap-family-1",
    "href": "slides/week-8/iteration-part-1.html#the-pmap-family-1",
    "title": "Iteration",
    "section": "The pmap() Family",
    "text": "The pmap() Family\nThe vectors need to have the same names as the arguments of the function you are applying.\n\n\nfruit &lt;- data.frame(string = c(\"apple\", \"banana\", \"cherry\"),\n                    pattern = c(\"p\", \"n\", \"h\"),\n                    replacement = c(\"P\", \"N\", \"H\"))\nfruit\n\n  string pattern replacement\n1  apple       p           P\n2 banana       n           N\n3 cherry       h           H\n\n\n\n\n\n\nfruit |&gt; \n  pmap_chr(str_replace_all)\n\n[1] \"aPPle\"  \"baNaNa\" \"cHerry\""
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#use-functional-programming",
    "href": "slides/week-8/iteration-part-1.html#use-functional-programming",
    "title": "Iteration",
    "section": "Use functional programming!",
    "text": "Use functional programming!"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#pa-8-the-twelve-days-of-christmas",
    "href": "slides/week-8/iteration-part-1.html#pa-8-the-twelve-days-of-christmas",
    "title": "Iteration",
    "section": "PA 8: The Twelve Days of Christmas",
    "text": "PA 8: The Twelve Days of Christmas"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#glue",
    "href": "slides/week-8/iteration-part-1.html#glue",
    "title": "Iteration",
    "section": "glue()",
    "text": "glue()\n\n\nThe glue package embeds R expressions in curly brackets that are then evaluated and inserted into the argument string.\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(glue)\n\nname &lt;- \"Dr. Theobold\"\nglue('My name is {name}.')\n\nMy name is Dr. Theobold.\n\n\n\nThis will be a handy function (and package) for putting our song together!"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#pa-8",
    "href": "slides/week-8/iteration-part-1.html#pa-8",
    "title": "Iteration",
    "section": "PA 8",
    "text": "PA 8\n\nYou will write two functions, one helper function and one body function, to assist you in singing phrases from the 12 Days of Christmas.\nMany of the functions have been started for you, but none of them are complete as is.\n\n\n\n\n\nThis activity will require knowledge of:\n\ndetecting patterns in strings\nreplacing patterns in strings\nconditional operations (if, else if, else)\nfunction syntax\nfunction arguments\n\n\n\n\n\n \nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#task-card",
    "href": "slides/week-8/iteration-part-1.html#task-card",
    "title": "Iteration",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\nOn the front:\n\nReminders about string functions from stringr\nReminders about regular expressions\n\n\nOn the back:\n\nif(), else if(), and else() statements\nif_else() and case_when() functions"
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#getting-started",
    "href": "slides/week-8/iteration-part-1.html#getting-started",
    "title": "Iteration",
    "section": "Getting Started",
    "text": "Getting Started\nThe partner who has the most vowels in their name starts as the Coder (dictating their proposed solution to the Developer (typing and listening).\nIf you are tied, play rock-paper-scissors. :)\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-8/iteration-part-1.html#submission",
    "href": "slides/week-8/iteration-part-1.html#submission",
    "title": "Iteration",
    "section": "Submission",
    "text": "Submission\n\nYour full_phrase column is the answer to this week’s Practice Activity.\n\n\nEach person will copy and paste your full_phrase column to show me the phrases your group made!\nEach person download and submit the PA-8-iteration.html file."
  },
  {
    "objectID": "weeks/week-8-iteration.html",
    "href": "weeks/week-8-iteration.html",
    "title": "Loops and Iteration",
    "section": "",
    "text": "After this lesson, you should be able to:",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "weeks/week-8-iteration.html#performing-multiple-operations",
    "href": "weeks/week-8-iteration.html#performing-multiple-operations",
    "title": "Loops and Iteration",
    "section": "1.1 Performing Multiple Operations",
    "text": "1.1 Performing Multiple Operations\nWhat if we wanted to perform multiple transformations on each of many variables?\nWithin the different values of diamond cut, let’s summarize the mean, median, and standard deviation of the numeric variables. When we look at the .fns argument in the across() documentation, we see that we can provide a list of functions:\n\ndiamonds %&gt;%\n    group_by(cut) %&gt;% \n    summarize(across(.cols = where(is.numeric), \n                     .fns = list(mean = mean, \n                                 med = median, \n                                 sd = sd)\n                     )\n              )\n\n# A tibble: 5 × 22\n  cut     carat_mean carat_med carat_sd depth_mean depth_med depth_sd table_mean\n  &lt;ord&gt;        &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n1 Fair         1.05       1       0.516       64.0      65      3.64        59.1\n2 Good         0.849      0.82    0.454       62.4      63.4    2.17        58.7\n3 Very G…      0.806      0.71    0.459       61.8      62.1    1.38        58.0\n4 Premium      0.892      0.86    0.515       61.3      61.4    1.16        58.7\n5 Ideal        0.703      0.54    0.433       61.7      61.8    0.719       56.0\n# ℹ 14 more variables: table_med &lt;dbl&gt;, table_sd &lt;dbl&gt;, price_mean &lt;dbl&gt;,\n#   price_med &lt;dbl&gt;, price_sd &lt;dbl&gt;, x_mean &lt;dbl&gt;, x_med &lt;dbl&gt;, x_sd &lt;dbl&gt;,\n#   y_mean &lt;dbl&gt;, y_med &lt;dbl&gt;, y_sd &lt;dbl&gt;, z_mean &lt;dbl&gt;, z_med &lt;dbl&gt;,\n#   z_sd &lt;dbl&gt;\n\n\nWhat does the list of functions look like? What is the structure of this list object?\n\nlist_of_fcts &lt;- list(mean = mean, \n                     med = median, \n                     sd = sd)\nlist_of_fcts\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x0000013dc8f331b0&gt;\n&lt;environment: namespace:base&gt;\n\n$med\nfunction (x, na.rm = FALSE, ...) \nUseMethod(\"median\")\n&lt;bytecode: 0x0000013dc804e798&gt;\n&lt;environment: namespace:stats&gt;\n\n$sd\nfunction (x, na.rm = FALSE) \nsqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n    na.rm = na.rm))\n&lt;bytecode: 0x0000013dcd7a7370&gt;\n&lt;environment: namespace:stats&gt;\n\nstr(list_of_fcts)\n\nList of 3\n $ mean:function (x, ...)  \n $ med :function (x, na.rm = FALSE, ...)  \n $ sd  :function (x, na.rm = FALSE)  \n\n\nLet’s explore lists a bit more…\n\n\n\n\n\n\nReview of Lists\n\n\n\n\n\nA list is a 1-dimensional data structure that has no restrictions on what type of content is stored within it. A list is a “vector”, but it is not an atomic vector - that is, it does not necessarily contain things that are all the same type.\n\nmylist &lt;- list(\n    logicals = c(TRUE, TRUE, FALSE, FALSE, TRUE), \n    numeric_vec = 1:12, \n    third_thing = letters[1:2]\n    )\n\nmylist\n\n$logicals\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n$numeric_vec\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\n$third_thing\n[1] \"a\" \"b\"\n\n\nList components may have names (or not), be homogeneous (or not), have the same length (or not).\n\nIndexing\nIndexing necessarily differs between R and Python, and since the list types are also somewhat different (e.g. lists cannot be named in python), we will treat list indexing in the two languages separately.\n\n\n\n\n\n\n\n\nAn unusual pepper shaker which we’ll call pepper\n\n\n\n\n\n\n\nWhen a list is indexed with single brackets, pepper[1], the return value is always a list containing the selected element(s).\n\n\n\n\n\n\n\nWhen a list is indexed with double brackets, pepper[[1]], the return value is the selected element.\n\n\n\n\n\n\n\nTo actually access the pepper, we have to use double indexing and index both the list object and the sub-object, as in pepper[[1]][[1]].\n\n\n\n\n\n\nFigure 1: The types of indexing are made most memorable with a fantastic visual example from Grolemund and Wickham (2017), which I have repeated here.\n\n\n\nThere are 3 ways to index a list:\n\nWith single square brackets, just like we index atomic vectors. In this case, the return value is always a list.\n\n\nmylist[1]\n\n$logicals\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\nmylist[2]\n\n$numeric_vec\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\nmylist[c(T, F, T)]\n\n$logicals\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n$third_thing\n[1] \"a\" \"b\"\n\n\n\nWith double square brackets. In this case, the return value is the thing inside the specified position in the list, but you also can only get one entry in the main list at a time. You can also get things by name.\n\n\nmylist[[1]]\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\nmylist[[\"third_thing\"]]\n\n[1] \"a\" \"b\"\n\n\n\nUsing x$name. This is equivalent to using x[[\"name\"]]. Note that this does not work on unnamed entries in the list.\n\n\nmylist$third_thing\n\n[1] \"a\" \"b\"\n\n\nTo access the contents of a list object, we have to use double-indexing:\n\nmylist[[\"third_thing\"]][[1]]\n\n[1] \"a\"",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "weeks/week-8-iteration.html#is-every-function-vectorized",
    "href": "weeks/week-8-iteration.html#is-every-function-vectorized",
    "title": "Loops and Iteration",
    "section": "2.1 Is every function vectorized?",
    "text": "2.1 Is every function vectorized?\nShort answer, no. There exist occasions where you either can’t or choose not to write a function that is vectorized. For example, if the function you’ve written makes use of if() statements, your function cannot operate on vectors. For example, take the pos_neg_zero() function below:\n\npos_neg_zero &lt;- function(x){\n  stopifnot(is.numeric(x))\n  \n  if(x &gt; 0){\n    return(\"Greater than 0!\")\n  } else if (x &lt; 0){\n    return(\"Less than 0!\")\n  } else {\n    return(\"Equal to 0!\")\n      }\n}\n\nWhen I call the pos_neg_zero() function on a vector I receive an error:\n\nx &lt;- seq(from = -4, to = 4, by = 1)\n\npos_neg_zero(x)\n\nError in if (x &gt; 0) {: the condition has length &gt; 1\n\n\nThis error means that the if(x &gt; 0) condition can only be checked for something of length 1. So, to use this function on the vector x, you would need to apply the function individually to each element:\n\nresult &lt;- rep(NA, \n              length(x)\n              )\n\nfor(i in 1:length(x)){\n  result[i] &lt;- pos_neg_zero(x[i])\n}\n\nresult\n\n[1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n[5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n[9] \"Greater than 0!\"\n\n\n\n\n\n\n\n\n\n\nVector initialization\n\n\n\nNote that I initialized a result vector to store the results of calling the pos_neg_zero() function for the vector x. Similar to C++ and Java, R is an assembly language that requires objects be created before they are used, which is why I couldn’t initialize result inside the for()-loop. Second, when I initialized the result vector I made it the size I wanted, rather than iteratively making it larger and larger (which makes operations incredibly slow).\n\n\nYes, I could have written a “better” function which used a vectorized function (e.g., case-when()) instead of a non-vectorized function (e.g., if()).\n\npos_neg_zero &lt;- function(x){\n  stopifnot(is.numeric(x))\n  \n  state &lt;- case_when(x &gt; 0 ~ \"Greater than 0!\", \n                     x &lt; 0 ~ \"Less than 0!\", \n                     .default = \"Equal to 0!\")\n  return(state)\n}\n\nWhen I call this function on the vector x, I no longer receive an error:\n\npos_neg_zero(x)\n\n[1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n[5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n[9] \"Greater than 0!\"\n\n\nThat’s because the case_when() is vectorized!",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "weeks/week-8-iteration.html#when-cant-you-vectorize-your-function",
    "href": "weeks/week-8-iteration.html#when-cant-you-vectorize-your-function",
    "title": "Loops and Iteration",
    "section": "2.2 When can’t you vectorize your function?",
    "text": "2.2 When can’t you vectorize your function?\nIt is not always the case that we can write a “better” vectorized function. For example, let’s suppose we are interested in finding the datatype of each column in a data frame. The typeof() function can tell us the datatype of a specific column in the penguins data frame:\n\ntypeof(penguins$species)\n\n[1] \"integer\"\n\n\nBut, I want the datatype of every column in the penguins data frame! But applying the typeof() function to penguins returns the object structure of the penguins data frame, not the datatype of its columns.\n\ntypeof(penguins)\n\n[1] \"list\"\n\n\nWhat can you do? Well, we could rely on our old CS 101 friend, the for()-loop:\n\ndata_type &lt;- rep(NA, \n                 length = ncol(penguins)\n                 )\n\nfor(i in 1:ncol(penguins)){\n  data_type[i] &lt;- typeof(penguins[[i]])\n}\n\n## Getting a nicely formatted table!\ntibble(column = names(penguins), \n       type = data_type) %&gt;% \n  pivot_wider(names_from = column, \n              values_from = type) %&gt;% \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\ninteger\ninteger\ndouble\ndouble\ninteger\ninteger\ninteger\ninteger\n\n\n\n\n\nIn R, for()-loops are not as important as they are in other languages because R is a functional programming language. In fact, we would prefer not to use for()-loops as they do not take advantage of R’s functional programming. Take for example, our friend across() that we talked about at the beginning of this reading:\n\npenguins %&gt;% \n  summarise(\n    across(\n      .cols = everything(), \n      .fns = ~sum(is.na(.x))\n      )\n    ) %&gt;% \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\n0\n2\n2\n2\n2\n11\n0\n\n\n\n\n\nThe across() function looks like an “ordinary” function, it applies a specified function / functions to the columns specified. However, when you look at the source code for across() you will find a for()-loop:\n\nfor (j in seq_fns) {\n  fn &lt;- fns[[j]]\n  out[[k]] &lt;- fn(col, ...)\n  k &lt;- k + 1L\n  }\n\nThis shows you that it is possible to include for()-loops in a function, and call that function instead of using the for()-loop directly.",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "weeks/week-8-iteration.html#reading-videos-tutorial",
    "href": "weeks/week-8-iteration.html#reading-videos-tutorial",
    "title": "Loops and Iteration",
    "section": "3.1 Reading, Videos & Tutorial",
    "text": "3.1 Reading, Videos & Tutorial\n\n📖 Required Reading: R4DS – The map() Functions\n\n\n\n\n\n\nYes, you should be reading the first edition of R4DS, not the second edition.\n\n\n\n\n\n\n\n\n📖 Optional Reading: Advanced R - Functionals\n\n\n\n\n\n\nIf you want to learn more about the concept of functionals!\n\n\n\n\n\n\n\n\n▶️ Required Video: Iteration with the map() family (6 minutes)\n\n\n\n\n\n\n\n\npurr cheatsheet\n\n\n\nCheatsheet for purrr functions can be found here.\n\n\n\n\n✅: Check-in 8.2: Working with the map() Functions\n\nFill in the correct map functions to:\n\n\nCompute the mean of every column in mtcars.\n\n\n____(.x = mtcars, .f = mean)\n\n\nDetermine the type of each column in the nycflights dataset (from the openintro package).\n\n\n____(.x = flights, .f = typeof)\n\n\nCompute the number of unique values in each column of the penguins dataset (from the palmerpenguins package).\n\n\n____(.x = penguins, .f = n_distinct)\n\n\nDetermine whether or not each column in the penguins dataset is a factor.\n\n\n____(.x = penguins, .f = is.factor)\n\n\nLast week we discussed the challenge of standardizing many columns in a data frame. For example, If we wanted to standardize a numeric variable to be centered at the mean and scaled by the standard deviation, we could use the following function:\n\n\nstandardize &lt;- function(vec) {\n  stopifnot(is.numeric(vec))\n  \n  # Center with mean\n  deviations &lt;- vec - mean(vec, na.rm = TRUE)\n  # Scale with standard deviation\n  newdata &lt;- deviations / sd(vec, na.rm = TRUE)\n  \n  return(newdata)\n}\n\nWhy does the following return a vector of NAs?\n\npenguins |&gt;\n  mutate(\n    body_mass_g = map_dbl(body_mass_g, standardize)\n  )\n\n\nBecause body_mass_g needs to be passed to standardize() as an argument\nBecause mutate() operates on rows, so map_dbl() is supplying standardize() with one row of body_mass_g at a time\nBecause map_dbl() only takes one input, so you need to use map2_dbl() instead\nBecause there is no function named standardize(), so it cannot be applied to the body_mass_g column\nbody_mass_g is not a data frame so it is not a valid argument for map_dbl()\n\n\nThus far in the course, we have used the across() function to apply the same function to multiple columns. For example, if we wanted to apply the standardize() function from above to every numeric column, we could use the following code:\n\n\npenguins %&gt;% \n  mutate(across(.cols = where(is.numeric), \n                .fns = standardize)\n         )\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen         -0.883         0.784            -1.42      -0.563 \n 2 Adelie  Torgersen         -0.810         0.126            -1.06      -0.501 \n 3 Adelie  Torgersen         -0.663         0.430            -0.421     -1.19  \n 4 Adelie  Torgersen         NA            NA                NA         NA     \n 5 Adelie  Torgersen         -1.32          1.09             -0.563     -0.937 \n 6 Adelie  Torgersen         -0.847         1.75             -0.776     -0.688 \n 7 Adelie  Torgersen         -0.920         0.329            -1.42      -0.719 \n 8 Adelie  Torgersen         -0.865         1.24             -0.421      0.590 \n 9 Adelie  Torgersen         -1.80          0.480            -0.563     -0.906 \n10 Adelie  Torgersen         -0.352         1.54             -0.776      0.0602\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;dbl&gt;\n\n\nWhich of the following map functions would return the same output?\n\n## Option (a)\npenguins |&gt; \n  map_at(.at = c(\"bill_length_mm\", \n                 \"bill_depth_mm\", \n                 \"flipper_length_mm\", \n                 \"body_mass_g\"), \n         .f = standardize)\n\n## Option (b)\npenguins |&gt; \n  map_at(.at = c(\"bill_length_mm\", \n                 \"bill_depth_mm\", \n                 \"flipper_length_mm\", \n                 \"body_mass_g\"), \n         .f = standardize) %&gt;% \n  bind_cols()\n\n## Option (c)\npenguins |&gt; \n  map_if(.p = is.numeric, .f = standardize) \n\n## Option (d)\npenguins |&gt; \n  map_if(.p = is.numeric, .f = standardize) %&gt;% \n  bind_cols()",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "weeks/week-8-iteration.html#footnotes",
    "href": "weeks/week-8-iteration.html#footnotes",
    "title": "Loops and Iteration",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI fully support more R packages being cat themed.↩︎",
    "crumbs": [
      "Weekly materials",
      "Week 8 - Iteration"
    ]
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#tuesday-october-1",
    "href": "slides/week-2/week-2-ggplot.html#tuesday-october-1",
    "title": "Basics of Graphics",
    "section": "Tuesday, October 1",
    "text": "Tuesday, October 1\nToday we will…\n\nAccessing Practice Activities\nNew Material\n\nTidy Data\nLoad External Data\nGraphics (and ggplot2)\n\nPA 2: Using Data Visualization to Find the Penguins\n\nPeer Programming"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#grammar-of-graphics-1",
    "href": "slides/week-2/week-2-ggplot.html#grammar-of-graphics-1",
    "title": "Basics of Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nThe Grammar of Graphics (GoG) is a principled way of specifying exactly how to create a particular graph from a given data set. It helps us to systematically design new graphs.\n\n\nThink of a graph or a data visualization as a mapping…\n…FROM variables in the data set (or statistics computed from the data)…\n…TO visual attributes (or “aesthetics”) of marks (or “geometric elements”) on the page/screen."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#why-gog",
    "href": "slides/week-2/week-2-ggplot.html#why-gog",
    "title": "Basics of Graphics",
    "section": "Why GoG?",
    "text": "Why GoG?\n\nIt’s more flexible than a “chart zoo” of named graphs.\nThe software understands the structure of your graph.\nIt easily automates graphing of data subsets."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#components-of-gog",
    "href": "slides/week-2/week-2-ggplot.html#components-of-gog",
    "title": "Basics of Graphics",
    "section": "Components of GoG",
    "text": "Components of GoG\n\n\ndata: dataframe containing variables\naes : aesthetic mappings (position, color, symbol, …)\ngeom : geometric element (point, line, bar, box, …)\nstat : statistical variable transformation (identity, count, linear model, quantile, …)\nscale : scale transformation (log scale, color mapping, axes tick breaks, …)\ncoord : Cartesian, polar, map projection, …\nfacet : divide into subplots using a categorical variable"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#how-to-build-a-graphic",
    "href": "slides/week-2/week-2-ggplot.html#how-to-build-a-graphic",
    "title": "Basics of Graphics",
    "section": "How to Build a Graphic",
    "text": "How to Build a Graphic\nComplete this template to build a basic graphic:\n\nggplot(\n  data = &lt;DATA&gt;, \n  mapping = aes(&lt;MAPPINGS&gt;)\n  ) +\n  &lt;GEOM FUNCTION&gt;() + \n  any other arguments...\n\n\nNotice, every + adds another layer to our graphic.\n\n\nAlso notice that I’m using named arguments to make my code easier to read."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#section",
    "href": "slides/week-2/week-2-ggplot.html#section",
    "title": "Basics of Graphics",
    "section": "",
    "text": "Add dataAdd aestheticsAdd one geom per layer\n\n\nThis begins a plot that you can add layers to:\n\nggplot(data = mpg)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, y = hwy)\n       )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, \n                     y = hwy)\n       ) +\n  geom_jitter()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, \n                     y = hwy)\n       ) +\n  geom_jitter() +\n  geom_boxplot()"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#aesthetics",
    "href": "slides/week-2/week-2-ggplot.html#aesthetics",
    "title": "Basics of Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\nWe map variables (columns) from the data to aesthetics on the graphic using the aes() function.\n\nWhat aesthetics can we set (see ggplot2 cheat sheet for more)?\n\n\n\n\nx, y\ncolor, fill\nlinetype\nsize\nshape"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#aesthetics-1",
    "href": "slides/week-2/week-2-ggplot.html#aesthetics-1",
    "title": "Basics of Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\nWe map variables (columns) from the data to aesthetics on the graphic using the aes() function.\nWhat aesthetics can we set (see ggplot2 cheat sheet for more)?\n\n\n\n\nx, y\ncolor, fill\nlinetype\nsize\nshape"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#special-properties-of-aesthetics",
    "href": "slides/week-2/week-2-ggplot.html#special-properties-of-aesthetics",
    "title": "Basics of Graphics",
    "section": "Special Properties of Aesthetics",
    "text": "Special Properties of Aesthetics\n\nGlobal AestheticsLocal Aesthetics\n\n\n\nggplot(data = housingsub, \n       mapping = aes(\n         x = date, \n         y = median)\n       ) +\n  geom_point()\n\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date,\n                           y = median)\n             )"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#special-properties-of-aesthetics-1",
    "href": "slides/week-2/week-2-ggplot.html#special-properties-of-aesthetics-1",
    "title": "Basics of Graphics",
    "section": "Special Properties of Aesthetics",
    "text": "Special Properties of Aesthetics\n\nMapping AestheticsSetting Aesthetics\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date, \n                           y = median,\n                           color = city)\n             )\n\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date, \n                           y = median), \n             color = \"blue\")"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#geometric-objects",
    "href": "slides/week-2/week-2-ggplot.html#geometric-objects",
    "title": "Basics of Graphics",
    "section": "Geometric Objects",
    "text": "Geometric Objects\nWee use a geom_XXX() function to represent data points.\n\n\n\n\none variable\n\ngeom_density()\ngeom_dotplot()\ngeom_histogram()\ngeom_boxplot()\n\n\n\n\ntwo variable\n\ngeom_point()\ngeom_line()\ngeom_density_2d()\n\n\n\n\nthree variable\n\ngeom_contour()\ngeom_raster()\n\n\n\n\nThis is not an exhaustive list – see ggplot2 cheat sheet."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#creating-a-graphic",
    "href": "slides/week-2/week-2-ggplot.html#creating-a-graphic",
    "title": "Basics of Graphics",
    "section": "Creating a Graphic",
    "text": "Creating a Graphic\nTo create a specific type of graphic, we will combine aesthetics and geometric objects.\n\n\nLet’s try it!"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#section-1",
    "href": "slides/week-2/week-2-ggplot.html#section-1",
    "title": "Basics of Graphics",
    "section": "",
    "text": "The GoalGame Planggplot\n\n\nStart with the TX housing data.\n\nMake a plot of  median house price  over  time  (including both  individual data points  and  a smoothed trend line), distinguishing between  different cities .\n\n\n\n\n\n\n\n\nCode\nggplot(data = sm_tx,\n       mapping = aes(x = date, \n                     y = median, \n                     color = city)\n       ) + \n  geom_point() + \n  geom_smooth(method = \"loess\") + \n  labs(x = \"Date\",\n       y = \"\",\n       color = \" \",\n       title = \"Changes in Median Home Price for Texas Metro Areas\") +\n  scale_y_continuous(labels = scales::label_dollar())"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#faceting",
    "href": "slides/week-2/week-2-ggplot.html#faceting",
    "title": "Basics of Graphics",
    "section": "Faceting",
    "text": "Faceting\nExtracts subsets of data and places them in side-by-side plots.\n\n\nCode\nggplot(data = sm_tx,\n       mapping = aes(x = date, \n                     y = median)\n       ) + \n  geom_point() + \n  facet_wrap(~city) +\n  geom_smooth(method = \"loess\") + \n  labs(x = \"Date\",\n       y = \"\",\n       color = \" \",\n       title = \"Changes in Median Home Price for Texas Metro Areas\") +\n  scale_y_continuous(labels = scales::label_dollar())"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#faceting-1",
    "href": "slides/week-2/week-2-ggplot.html#faceting-1",
    "title": "Basics of Graphics",
    "section": "Faceting",
    "text": "Faceting\n\nOptionsScales\n\n\n\n\nfacet_wrap(~ b): facets by one variable\n\nnrow controls the number of rows the facets are output into\nncol controls the number of columns the facets are output into\n\nfacet_grid(a ~ b): facet by two variables\n\nvariable a will be assigned to the rows\nvariable b will be assigned to the columns into both rows and columns\n\n\n\n\n\n\nYou can set scales to let axis limits vary across facets:\nfacet_grid(y ~ x, scales = ______)\n\n\"free\" – both x- and y-axis limits adjust to individual facets\n\"free_x\" – only x-axis limits adjust\n\"free_y\" – only y-axis limits adjust"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#statistical-transformation-stat",
    "href": "slides/week-2/week-2-ggplot.html#statistical-transformation-stat",
    "title": "Basics of Graphics",
    "section": "Statistical Transformation: stat",
    "text": "Statistical Transformation: stat\nA stat transforms an existing variable into a new variable to plot.\n\nidentity leaves the data as is.\ncount counts the number of observations.\nsummary allows you to specify a desired transformation function.\n\n\nSometimes these statistical transformations happen under the hood when we use a specific geom_XXX()."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#statistical-transformation-stat-1",
    "href": "slides/week-2/week-2-ggplot.html#statistical-transformation-stat-1",
    "title": "Basics of Graphics",
    "section": "Statistical Transformation: stat",
    "text": "Statistical Transformation: stat\n\nstat_count()stat_summary()\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class)\n       ) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class)\n       ) +\n  stat_count(geom = \"bar\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class,\n                     y = hwy)\n       ) +\n  stat_summary(geom = \"bar\",\n               fun = \"mean\") +\n  scale_y_continuous(limits = c(0, 45))\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class,\n                     y = hwy)\n       ) +\n  stat_summary(geom = \"bar\",\n               fun = \"max\") +\n  scale_y_continuous(limits = c(0, 45))"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#position-adjustements",
    "href": "slides/week-2/week-2-ggplot.html#position-adjustements",
    "title": "Basics of Graphics",
    "section": "Position Adjustements",
    "text": "Position Adjustements\nPosition adjustments determine how to arrange geom’s that would otherwise occupy the same space.\n\n\nposition = \"dodge\": Arrange elements side by side.\nposition = \"fill\": Stack elements on top of one another + normalize height.\nposition = \"stack\": Stack elements on top of one another.\nposition = \"jitter\": Add random noise to x & y position of each element to avoid overplotting (see geom_jitter())."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#position-adjustements-1",
    "href": "slides/week-2/week-2-ggplot.html#position-adjustements-1",
    "title": "Basics of Graphics",
    "section": "Position Adjustements",
    "text": "Position Adjustements\n\n\nggplot(data = mpg, \n       mapping = aes(fl, fill = drv)\n       ) + \n  geom_bar(position = \"_____\")"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#plot-customizations",
    "href": "slides/week-2/week-2-ggplot.html#plot-customizations",
    "title": "Basics of Graphics",
    "section": "Plot Customizations",
    "text": "Plot Customizations\n\nLabelsThemesScales: Axes TicksScales: Color\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  scale_y_continuous(limits = c(0, 50),\n                     breaks = seq(from = 0, to = 50, by = 5)\n                     )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  scale_color_gradient(low = \"white\", high = \"green4\")"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#ggplot-code",
    "href": "slides/week-2/week-2-ggplot.html#ggplot-code",
    "title": "Basics of Graphics",
    "section": "ggplot Code",
    "text": "ggplot Code\n\nIt is good practice to put each geom and aes on a new line.\n\nThis makes code easier to read!\nGenerally: no line of code should be over 80 characters long.\n\n\n\nBadGoodAmazing\n\n\n\n\nggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) + geom_point() + theme_bw() + labs(x = \"City (mpg)\", y = \"Highway (mpg)\")\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = cty, y = hwy, color = class)) + \n  geom_point() + \n  theme_bw() + \n  labs(x = \"City (mpg)\", y = \"Highway (mpg)\")\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(\n         x = cty, \n         y = hwy, \n         color = class\n         )\n       ) + \n  geom_point() + \n  theme_bw() + \n  labs(x = \"City (mpg)\", \n       y = \"Highway (mpg)\")"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#using-data-visualization-to-find-the-penguins",
    "href": "slides/week-2/week-2-ggplot.html#using-data-visualization-to-find-the-penguins",
    "title": "Basics of Graphics",
    "section": "Using Data Visualization to Find the Penguins",
    "text": "Using Data Visualization to Find the Penguins\n\n\n\nThis puzzle activity will require knowledge of:\n\ninstalling and loading packages in R\nformatting code chunks in Quarto\ninterpreting the context of a dataset\ndata types / variable types\ndifferent types of visualizations\nwhat visualization(s) go with different data types\nhow to make visualizations with ggplot2\nchoosing between different aesthetic options\n\n\n\n\n\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#pair-programming-expectations",
    "href": "slides/week-2/week-2-ggplot.html#pair-programming-expectations",
    "title": "Basics of Graphics",
    "section": "Pair Programming Expectations",
    "text": "Pair Programming Expectations\n\nDuring your collaboration, you and your partner will alternate between two roles:\n\n\n\n\nDeveloper\n\n\nReads prompt and ensures Coder understands what is being asked.\nTypes the code specified by the Coder into the Quarto document.       \nRuns the code provided by the Coder.\nWorks with Coder to debug the code. \nEvaluates the output.\n\nWorks with Coder to write code comments.\n\n\n\n\n\n\nCoder\n\n\nReads out instructions or prompts\nDirects the Developer what to type.\nTalks with Developer about their ideas. \nManages resources (e.g., cheatsheets, textbook). \nWorks with Developer to debug the code. \nWorks with Developer to write code comments."
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#section-2",
    "href": "slides/week-2/week-2-ggplot.html#section-2",
    "title": "Basics of Graphics",
    "section": "",
    "text": "Group Norms\n\n\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nBe open minded.\nNo cross-talk with other groups.\nCommunicate with each other!"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#ggplot2-resources",
    "href": "slides/week-2/week-2-ggplot.html#ggplot2-resources",
    "title": "Basics of Graphics",
    "section": "ggplot2 Resources",
    "text": "ggplot2 Resources\nEvery group should have a ggplot2 cheatsheet!\n\n\n\nOn the Front\n\n\n\nColumn 1: the “template” for making a ggplot\nColumn 3: creating plots for two continuous variables\nColumn 4: creating plots for one discrete or one continuous variable\n\n\n\n\n\n\n\n\nOn the Back\n\n\n\nColumn 4: adding facets and labels to your plot\nColumn 3: adding themes to your plot (if you have extra time)"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#opening-the-practice-activity-in-posit-cloud",
    "href": "slides/week-2/week-2-ggplot.html#opening-the-practice-activity-in-posit-cloud",
    "title": "Basics of Graphics",
    "section": "Opening the Practice Activity in Posit Cloud",
    "text": "Opening the Practice Activity in Posit Cloud\nThe partner whose family name starts first alphabetically starts as the Developer!\nBoth of you need to do the following:\n\n\nOpen the email you were sent (from me and / or Posit Cloud)\nClick on the link to join your workspace\nLog-in to Posit Cloud\nOpen the PA 2: Using Data Visualization to Find the Penguins project\nOpen the PA2-ggplot.qmd file\nGet started!"
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#submission",
    "href": "slides/week-2/week-2-ggplot.html#submission",
    "title": "Basics of Graphics",
    "section": "Submission",
    "text": "Submission\n\nWhen you have completed the visualization tasks, you will work as a group to answer the five questions posed at the end of the document.\nEach person will input the answers to these questions in the PA2 Canvas quiz.\nEach person also needs to submit their PA-2.html file on Canvas."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#thursday-october-10",
    "href": "slides/week-3/week-3-dplyr-pt2.html#thursday-october-10",
    "title": "Extending Data Wrangling Verbs",
    "section": "Thursday, October 10",
    "text": "Thursday, October 10\nToday we will…\n\n\nDebrief PA 3\nDebrief Lab 2 & Challenge 2\nDiscuss Lab 2 Peer Review\nOutline Grade Expectations for Syllabus\nNew Material\n\nExtend dplyr verbs to have more functionality\n\nLab 3: Teacher Evaluations"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#efficient-coding",
    "href": "slides/week-3/week-3-dplyr-pt2.html#efficient-coding",
    "title": "Extending Data Wrangling Verbs",
    "section": "Efficient Coding",
    "text": "Efficient Coding\nFor the final problem, many groups’ code looked like this:\n\ncolleges_clean |&gt; \n  filter(REGION == 7) |&gt;\n  filter(ADM_RATE &gt; median(ADM_RATE)) |&gt;\n  filter(TUITION_DIFF != 0) |&gt;\n  filter(SAT_AVG %% 2 == 1) |&gt;\n  filter(STABBR != \"ID\") |&gt;\n  filter(UGDS &lt; 10000) |&gt;\n  filter(STABBR != \"MT\") |&gt; \n  slice_min(order_by = ADM_RATE) \n\n\n\nIs there a more “efficient” way do this?"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#a-few-words-about-drop_na",
    "href": "slides/week-3/week-3-dplyr-pt2.html#a-few-words-about-drop_na",
    "title": "Extending Data Wrangling Verbs",
    "section": "A few words about drop_na()",
    "text": "A few words about drop_na()\n\nEasy tool to remove missing values\nUnilaterally removes any row with a missing value for any variable\nBut you can specify what columns it should look at for missing values!\n\n\ncolleges_clean |&gt; \n  drop_na(REGION, \n          ADM_RATE, \n          TUITION_DIFF, \n          SAT_AVG, \n          STABBR, \n          UGDS)"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#grading-feedback-revisions",
    "href": "slides/week-3/week-3-dplyr-pt2.html#grading-feedback-revisions",
    "title": "Extending Data Wrangling Verbs",
    "section": "Grading / Feedback & Revisions",
    "text": "Grading / Feedback & Revisions\n\n\nEach question will earn a score of “Success” or “Growing”.\n\nQuestions marked “Growing” will receive feedback on how to improve your solution.\nThese questions can be resubmitted for additional feedback.\n\n\n\n\n\n\nEarning a “Success” doesn’t necessarily mean your solution is without error.\n\nYou may still receive feedback on how to improve your solution.\nThese questions cannot be resubmitted for additional feedback.\n\n\n\n\n\n\n\nRevisions for Lab 2 & Challenge 2 are due next Friday (October 18th)\n\nYou must submit your revised HTML to the original Lab 2 / Challenge 2 assignment portal.\nYou must include reflections on what you learned by completing the revisions."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#lab-2-growing-points",
    "href": "slides/week-3/week-3-dplyr-pt2.html#lab-2-growing-points",
    "title": "Extending Data Wrangling Verbs",
    "section": "Lab 2 Growing Points",
    "text": "Lab 2 Growing Points\n\n\nQ1: Loading in data with the here() function\n\nIn this class, we use a package oriented workflow to read in the data.\nWe do not specify relative paths to read in our data.\n\n\n\n\n\n\nQ5: Adding transparency\n\nOnly variables being mapped to aesthetics are inserted into the aes() function!\nHard coded values (e.g., alpha = 0.5) belong outside the aes() function.\n\n\n\n\n\n\n\nReport formatting: No messages or warnings should be output in the HTML document!\n\nUse code chunk options and execute options to suppress these messages and warnings."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#dont-make-people-tilt-their-head",
    "href": "slides/week-3/week-3-dplyr-pt2.html#dont-make-people-tilt-their-head",
    "title": "Extending Data Wrangling Verbs",
    "section": "Don’t make people tilt their head",
    "text": "Don’t make people tilt their head"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#what-feedback-would-you-give",
    "href": "slides/week-3/week-3-dplyr-pt2.html#what-feedback-would-you-give",
    "title": "Extending Data Wrangling Verbs",
    "section": "What feedback would you give?",
    "text": "What feedback would you give?\n\nggplot(data = surveys, mapping = aes(x=hindfoot_length,y= weight)) +  \n  geom_jitter(alpha=.2,color='tomato')+ facet_wrap(~species)+geom_boxplot(outlier.shape = NA)+labs(\n    title ='Weight to hindfoot comparison'\n  )+ xlab('length (mm)')+ylab('Weight(g)')"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#defining-grades-in-331",
    "href": "slides/week-3/week-3-dplyr-pt2.html#defining-grades-in-331",
    "title": "Extending Data Wrangling Verbs",
    "section": "Defining Grades in 331",
    "text": "Defining Grades in 331\n\nA: Superior Attainment of Course Objectives\nB: Good Attainment of Course Objectives\nC: Acceptable Attainment of Course Objectives\nD: Poor Attainment of Course Objectives\n\n\nWe need to define criteria for each of these grades based on the four objectives of this course—learning targets, revising thinking, extending thinking, collaborating with peers."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#example-data-set-cereal",
    "href": "slides/week-3/week-3-dplyr-pt2.html#example-data-set-cereal",
    "title": "Extending Data Wrangling Verbs",
    "section": "Example Data set – Cereal",
    "text": "Example Data set – Cereal\n\n\nlibrary(liver)\ndata(cereal)\n\nglimpse(cereal)\n\nRows: 77\nColumns: 16\n$ name     &lt;fct&gt; 100% Bran, 100% Natural Bran, All-Bran, All-Bran with Extra F…\n$ manuf    &lt;fct&gt; N, Q, K, K, R, G, K, G, R, P, Q, G, G, G, G, R, K, K, G, K, N…\n$ type     &lt;fct&gt; cold, cold, cold, cold, cold, cold, cold, cold, cold, cold, c…\n$ calories &lt;int&gt; 70, 120, 70, 50, 110, 110, 110, 130, 90, 90, 120, 110, 120, 1…\n$ protein  &lt;int&gt; 4, 3, 4, 4, 2, 2, 2, 3, 2, 3, 1, 6, 1, 3, 1, 2, 2, 1, 1, 3, 3…\n$ fat      &lt;int&gt; 1, 5, 1, 0, 2, 2, 0, 2, 1, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 3, 0…\n$ sodium   &lt;int&gt; 130, 15, 260, 140, 200, 180, 125, 210, 200, 210, 220, 290, 21…\n$ fiber    &lt;dbl&gt; 10.0, 2.0, 9.0, 14.0, 1.0, 1.5, 1.0, 2.0, 4.0, 5.0, 0.0, 2.0,…\n$ carbo    &lt;dbl&gt; 5.0, 8.0, 7.0, 8.0, 14.0, 10.5, 11.0, 18.0, 15.0, 13.0, 12.0,…\n$ sugars   &lt;int&gt; 6, 8, 5, 0, 8, 10, 14, 8, 6, 5, 12, 1, 9, 7, 13, 3, 2, 12, 13…\n$ potass   &lt;int&gt; 280, 135, 320, 330, -1, 70, 30, 100, 125, 190, 35, 105, 45, 1…\n$ vitamins &lt;int&gt; 25, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25…\n$ shelf    &lt;int&gt; 3, 3, 3, 3, 3, 1, 2, 3, 1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 2, 3, 2…\n$ weight   &lt;dbl&gt; 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.33, 1.00, 1.00, 1…\n$ cups     &lt;dbl&gt; 0.33, 1.00, 0.33, 0.50, 0.75, 0.75, 1.00, 0.75, 0.67, 0.67, 0…\n$ rating   &lt;dbl&gt; 68.40297, 33.98368, 59.42551, 93.70491, 34.38484, 29.50954, 3…"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#count-with-count",
    "href": "slides/week-3/week-3-dplyr-pt2.html#count-with-count",
    "title": "Extending Data Wrangling Verbs",
    "section": "Count with count()",
    "text": "Count with count()\nHow many cereals does each manuf have in this dataset?\n\n\ncereal |&gt; \n  group_by(manuf) |&gt; \n  count()\n\n\n\n\n\n\n\nmanuf\nn\n\n\n\n\nA\n1\n\n\nG\n22\n\n\nK\n23\n\n\nN\n6\n\n\nP\n9\n\n\nQ\n8\n\n\nR\n8"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#group_by-slice",
    "href": "slides/week-3/week-3-dplyr-pt2.html#group_by-slice",
    "title": "Extending Data Wrangling Verbs",
    "section": "group_by() + slice()",
    "text": "group_by() + slice()\nFor each manuf, find the cereal with the most fiber.\n\n\ncereal |&gt; \n  group_by(manuf) |&gt; \n  slice_max(order_by = fiber)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15\n6\n125\n25\n1\n1.00\n0.67\n49.12025"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#multiple-variables-in-slice",
    "href": "slides/week-3/week-3-dplyr-pt2.html#multiple-variables-in-slice",
    "title": "Extending Data Wrangling Verbs",
    "section": "Multiple Variables in slice()",
    "text": "Multiple Variables in slice()\nFind the 3 cereals with the highest fiber and potass.\n\n\nIf you are ordering by multiple variables, wrap them in a data.frame!\n\n\ncereal |&gt; \n  slice_max(order_by = data.frame(fiber, potass),\n            n = 3)\n\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14\n8\n0\n330\n25\n3\n1\n0.50\n93.70491\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10\n5\n6\n280\n25\n3\n1\n0.33\n68.40297\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9\n7\n5\n320\n25\n3\n1\n0.33\n59.42551"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#discretize-with-if_else",
    "href": "slides/week-3/week-3-dplyr-pt2.html#discretize-with-if_else",
    "title": "Extending Data Wrangling Verbs",
    "section": "Discretize with if_else()",
    "text": "Discretize with if_else()\nFor each cereal, label the potass as “high” or “low”.\n\n\nif_else(&lt;CONDITION&gt;, &lt;TRUE OUTPUT&gt;, &lt;FALSE OUTPUT&gt;)\n\n\n\n\ncereal |&gt; \n  mutate(po_category = if_else(potass &lt;= 100, \n                               \"low\", \n                               \"high\"),\n         .after = potass)\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\npo_category\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\nhigh\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\nhigh\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\nhigh\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\nhigh\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\nlow\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\nlow\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\nlow\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\nlow\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\nhigh\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\nhigh\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\nlow\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\nhigh\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\nlow\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\nhigh\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\nlow\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\nlow\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\nlow\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\nlow\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\nlow\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\nhigh\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\nlow\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\nlow\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\nhigh\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\nlow\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\nlow\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\nlow\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\nlow\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\nhigh\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\nhigh\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\nlow\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\nlow\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\nlow\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\nlow\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\nlow\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\nlow\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\nlow\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\nlow\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\nlow\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\nlow\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\nlow\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\nlow\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\nlow\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\nlow\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\nlow\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\nhigh\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\nhigh\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\nhigh\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\nlow\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\nlow\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\nhigh\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\nlow\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\nhigh\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\nhigh\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\nlow\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\nlow\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\nlow\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\nhigh\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\nhigh\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\nhigh\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\nhigh\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\nhigh\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\nlow\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\nlow\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\nlow\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\nhigh\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\nhigh\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\nlow\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\nlow\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\nlow\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\nlow\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\nhigh\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\nhigh\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\nlow\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\nlow\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\nhigh\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\nhigh\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\nlow\n25\n1\n1.00\n0.75\n36.18756\n\n\n\n\n\n\n\n\n\nWhat do you think .after does?"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#re-level-with-case_when",
    "href": "slides/week-3/week-3-dplyr-pt2.html#re-level-with-case_when",
    "title": "Extending Data Wrangling Verbs",
    "section": "Re-level with case_when()",
    "text": "Re-level with case_when()\nFor each manufacturer, change the manuf code to the name of the manufacturer.\n\nA series of if-else statements.\n\ncereal |&gt; \n  mutate(manuf = case_when(manuf == \"A\" ~ \"American Home Food Products\", \n                           manuf == \"G\" ~ \"General Mills\", \n                           manuf == \"K\" ~ \"Kelloggs\", \n                           manuf == \"N\" ~ \"Nabisco\", \n                           manuf == \"P\" ~ \"Post\", \n                           manuf == \"Q\" ~ \"Quaker Oats\", \n                           manuf == \"R\" ~ \"Ralston Purina\")\n         )\n\n\n\nDoes this code create a new variable or change an existing variable?"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#section",
    "href": "slides/week-3/week-3-dplyr-pt2.html#section",
    "title": "Extending Data Wrangling Verbs",
    "section": "",
    "text": "name\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nNabisco\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nQuaker Oats\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nKelloggs\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nKelloggs\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nRalston Purina\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nGeneral Mills\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nKelloggs\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nGeneral Mills\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nRalston Purina\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nPost\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nQuaker Oats\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nGeneral Mills\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nGeneral Mills\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nGeneral Mills\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nGeneral Mills\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nRalston Purina\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nKelloggs\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nKelloggs\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nGeneral Mills\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nKelloggs\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nNabisco\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nKelloggs\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nGeneral Mills\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nRalston Purina\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nKelloggs\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nKelloggs\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nKelloggs\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nPost\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nKelloggs\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nPost\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nPost\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nGeneral Mills\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nPost\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nPost\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nPost\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nQuaker Oats\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nGeneral Mills\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nPost\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nKelloggs\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nKelloggs\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nGeneral Mills\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nQuaker Oats\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nGeneral Mills\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nAmerican Home Food Products\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nRalston Purina\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nRalston Purina\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nKelloggs\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nGeneral Mills\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nKelloggs\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nKelloggs\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nKelloggs\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nGeneral Mills\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nPost\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nKelloggs\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nQuaker Oats\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nQuaker Oats\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nQuaker Oats\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nQuaker Oats\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nKelloggs\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nGeneral Mills\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nKelloggs\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nRalston Purina\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nKelloggs\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nNabisco\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nNabisco\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nNabisco\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nKelloggs\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nKelloggs\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nNabisco\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nGeneral Mills\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nGeneral Mills\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nGeneral Mills\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nGeneral Mills\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nGeneral Mills\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nRalston Purina\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nGeneral Mills\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nGeneral Mills\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#calculate-a-summary-statistic-for-many-columns",
    "href": "slides/week-3/week-3-dplyr-pt2.html#calculate-a-summary-statistic-for-many-columns",
    "title": "Extending Data Wrangling Verbs",
    "section": "Calculate a Summary Statistic for Many Columns",
    "text": "Calculate a Summary Statistic for Many Columns\nFor each type of cereal, calculate the mean nutrient levels.\n\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarize(mean_cal = mean(calories), \n            mean_protein = mean(protein), \n            mean_fat = mean(fat), \n            mean_sodium = mean(sodium), \n            mean_fiber = mean(fiber), \n            mean_carbs = mean(carbo), \n            mean_sugars = mean(sugars), \n            mean_potassium = mean(potass)\n            )\n\n\n\nDoes this seem like the most efficient way we could do this?"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across",
    "href": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across",
    "title": "Extending Data Wrangling Verbs",
    "section": "Summarize multiple columns with across()",
    "text": "Summarize multiple columns with across()\nWithin the summarize() function, we use the across() function, with three arguments:\n\n.cols – to specify the columns to apply functions to.\n.fns – to specify the function(s) to apply.\n.x – as a placeholder (alias) for the variables being passed into the function.\n\n\nWe use lambda functions: ~ &lt;FUN_NAME&gt;(.x, &lt;ARGS&gt;) to specify what function(s) to apply"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across-1",
    "href": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across-1",
    "title": "Extending Data Wrangling Verbs",
    "section": "Summarize multiple columns with across()",
    "text": "Summarize multiple columns with across()\nFor each type of cereal, calculate the mean nutrient levels.\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarise(\n    across(.cols = calories:potass, \n           .fns = ~ mean(.x)\n           )\n    )\n\n\n\n\n\n\n\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\n\n\n\n\ncold\n107.1622\n2.486486\n1.013513\n165.06757\n2.189189\n14.7027\n7.1756757\n97.21622\n\n\nhot\n100.0000\n4.000000\n1.000000\n26.66667\n1.233333\n12.0000\n0.6666667\n68.00000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across-2",
    "href": "slides/week-3/week-3-dplyr-pt2.html#summarize-multiple-columns-with-across-2",
    "title": "Extending Data Wrangling Verbs",
    "section": "Summarize multiple columns with across()",
    "text": "Summarize multiple columns with across()\nIf missing values were present, we would need to remove them when calculating the mean!\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarise(\n    across(.cols = calories:potass, \n           .fns = ~ mean(.x, na.rm = TRUE)\n           )\n    )\n\n\n\n\n\n\n\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\n\n\n\n\ncold\n107.6667\n2.416667\n0.8833333\n170.08333\n1.800000\n14.66667\n7.2000000\n86.66667\n\n\nhot\n100.0000\n4.000000\n1.0000000\n26.66667\n1.233333\n12.00000\n0.6666667\n68.00000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#getting-fancy-with-names",
    "href": "slides/week-3/week-3-dplyr-pt2.html#getting-fancy-with-names",
    "title": "Extending Data Wrangling Verbs",
    "section": "Getting Fancy with Names",
    "text": "Getting Fancy with Names\n\n\n\n.names\n\n\n\n\n\nA glue specification that describes how to name the output columns. This can use {.col} to stand for the selected column name, and {.fn} to stand for the name of the function being applied. The default (NULL) is equivalent to \"{.col}\" for the single function case and \"{.col}_{.fn}\" for the case where a list is used for .fns.\n\n\n\n\n\n\ncereal |&gt; \n  group_by(type) |&gt; \n  summarise(\n    across(.cols = calories:potass, \n           .fns = ~ mean(.x), \n           .names = \"mean_{.col}\"\n           )\n    )\n\n\n\n\n\n\n\n\n\ntype\nmean_calories\nmean_protein\nmean_fat\nmean_sodium\nmean_fiber\nmean_carbo\nmean_sugars\nmean_potass\n\n\n\n\ncold\n107.1622\n2.486486\n1.013513\n165.06757\n2.189189\n14.7027\n7.1756757\n97.21622\n\n\nhot\n100.0000\n4.000000\n1.000000\n26.66667\n1.233333\n12.0000\n0.6666667\n68.00000"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#piping-into-ggplot",
    "href": "slides/week-3/week-3-dplyr-pt2.html#piping-into-ggplot",
    "title": "Extending Data Wrangling Verbs",
    "section": "Piping into ggplot()",
    "text": "Piping into ggplot()\nPlot the mean protein per cup for each manuf.\n\n\ncereal |&gt; \n  mutate(manuf = case_when(manuf == \"A\" ~ \"American Home Food Products\", \n                           manuf == \"G\" ~ \"General Mills\", \n                           manuf == \"K\" ~ \"Kelloggs\", \n                           manuf == \"N\" ~ \"Nabisco\", \n                           manuf == \"P\" ~ \"Post\", \n                           manuf == \"Q\" ~ \"Quaker Oats\", \n                           manuf == \"R\" ~ \"Ralston Purina\")) |&gt; \n  filter(type == \"cold\") |&gt; \n  mutate(pro_per_cup = protein / cups) |&gt; \n  group_by(manuf) |&gt; \n  summarise(mean_pro_per_cup = mean(pro_per_cup)) |&gt; \n  ggplot(mapping = aes(y = manuf, \n                       x = mean_pro_per_cup, \n                       shape = manuf)) +\n  geom_point(show.legend = FALSE,\n             size = 6) +\n  labs(subtitle = \"for 77 different breakfast cereals\",\n       title = \"Mean Grams of Protein per Cup\", \n       x = \"\", \n       y = \"\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 24),\n        plot.subtitle = element_text(size = 18),\n        axis.text = element_text(size = 22)\n        ) +\n  scale_x_continuous(limits = c(0, 10))"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#piping-into-ggplot-output",
    "href": "slides/week-3/week-3-dplyr-pt2.html#piping-into-ggplot-output",
    "title": "Extending Data Wrangling Verbs",
    "section": "Piping into ggplot()",
    "text": "Piping into ggplot()"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#creating-a-game-plan-1",
    "href": "slides/week-3/week-3-dplyr-pt2.html#creating-a-game-plan-1",
    "title": "Extending Data Wrangling Verbs",
    "section": "Creating a Game Plan",
    "text": "Creating a Game Plan\n\nJust like when creating graphics with ggplot, wrangling data with dplyr involves thinking through many steps and writing many layers of code.\n\nTo help you think through a wrangling problem, I strongly encourage you to create a game plan before we start writing code.\n\nThis might involve…\n\na sketch or flowchart.\na list of dplyr verbs and variable names.\nannotating the head of the dataframe."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#creating-a-game-plan-2",
    "href": "slides/week-3/week-3-dplyr-pt2.html#creating-a-game-plan-2",
    "title": "Extending Data Wrangling Verbs",
    "section": "Creating a Game Plan",
    "text": "Creating a Game Plan\n\nThe QuestionThe Code\n\n\nWhat is the median grams of sugars per shelf and the number of cereals per shelf, when we drop the missing values (coded as sugars = -1)?\n\nThe person with the nearest birthday: explain out loud to your neighbor how you would do this manipulation.\n\n\n\ncereal |&gt; \n  select(sugars, shelf) |&gt; \n  filter(sugars != -1) |&gt; \n  group_by(shelf) |&gt; \n  summarise(med_sugars = median(sugars),\n            num_shelf = n()\n            )\n\n# A tibble: 3 × 3\n  shelf med_sugars num_shelf\n  &lt;int&gt;      &lt;dbl&gt;     &lt;int&gt;\n1     1          3        19\n2     2         12        21\n3     3          6        36"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#to-do",
    "href": "slides/week-3/week-3-dplyr-pt2.html#to-do",
    "title": "Extending Data Wrangling Verbs",
    "section": "To do…",
    "text": "To do…\n\nLab 3: Student Evaluations of Teaching\n\nDue Sunday, 1/26 at 11:59pm\n\nChallenge 3: Extending Teaching Evaluation Investigations\n\nDue Sunday, 1/26 at 11:59pm\n\nRead Chapter 4: Data Joins and Transformations\n\nCheck-in 4.1 + 4.2 due Tuesday 1/28 at 12pm"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#tuesday-november-19",
    "href": "slides/week-9/data-simulation-part-1.html#tuesday-november-19",
    "title": "Simulating Data in R",
    "section": "Tuesday, November 19",
    "text": "Tuesday, November 19\nToday we will…\n\nPlan for Week 9 & 10\nNew Material\n\nStatistical Distributions\nSimulating Data\n\nPA 9: Instrument Con"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#statistical-distributions-1",
    "href": "slides/week-9/data-simulation-part-1.html#statistical-distributions-1",
    "title": "Simulating Data in R",
    "section": "Statistical Distributions",
    "text": "Statistical Distributions\nRecall from your statistics classes…\n\nRandom VariableDistribution\n\n\nA random variable is a value we don’t know until we take a sample.\n\nCoin flip: could be heads (0) or tails (1)\nPerson’s height: could be anything from 0 feet to 10 feet.\nAnnual income of a US worker: could be anything from $0 to $1.6 billion\n\n\n\nThe distribution of a random variable tells us its possible values and how likely they are to occur.\n\n\n\nCoin flip: 50% chance of heads and tails.\nHeights follow a bell curve centered at 5 foot 7.\nMost American workers make under $100,000."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#statistical-distributions-with-names",
    "href": "slides/week-9/data-simulation-part-1.html#statistical-distributions-with-names",
    "title": "Simulating Data in R",
    "section": "Statistical Distributions with Names!",
    "text": "Statistical Distributions with Names!\n\nunifnormtchisqbinom\n\n\nUniform Distribution\n\n\n\nWhen you know the range of values, but not much else.\nAll values in the range are equally likely to occur.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNormal Distribution\n\n\n\nWhen you expect values to fall near the center.\nFrequency of values follows a bell shaped curve.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt-Distribution\n\n\n\nA slightly wider bell curve.\nBasically used in the same context as the Normal distribution, but more common with real data (when the standard deviation is unknown).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChi-Square Distribution\n\n\n\nSomewhat skewed, and only allows values above zero.\nUsed in testing count data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBinomial Distribution\n\n\n\n\nAppears when you have two possible outcomes, and you are counting how many times each outcome occurred.\nThis is a discrete distribution, as there can only be whole number values!"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#distribution-functions-in-r",
    "href": "slides/week-9/data-simulation-part-1.html#distribution-functions-in-r",
    "title": "Simulating Data in R",
    "section": "Distribution Functions in R",
    "text": "Distribution Functions in R\n\nrpqd\n\n\nr is for random sampling.\n\n\nGenerate random values from a distribution.\nWe use this to simulate data (create pretend observations).\n\n\n\n\n\n\nrunif(n = 3, min = 10, max = 20)\n\n[1] 12.39305 10.05442 15.47226\n\nrnorm(n = 3)\n\n[1] -0.4262411  0.8939456 -0.2120931\n\nrnorm(n = 3, mean = -100, sd = 50)\n\n[1] -193.37034 -139.95379  -78.93276\n\n\n\n\n\n\nrt(n = 3, df = 11)\n\n[1] -0.81031377  0.68131652  0.05096835\n\nrbinom(n = 3, size = 10, prob = 0.7)\n\n[1] 9 7 9\n\nrchisq(n = 3, df = 11)\n\n[1] 13.18364 15.80086 17.71515\n\n\n\n\n\n\np is for probability.\n\nCompute the chances of observing a value less than x.\nWe use this for calculating p-values.\n\n\n\n\npnorm(q = 1.5)\n\n[1] 0.9331928\n\npnorm(q = 70, mean = 67, sd = 3)\n\n[1] 0.8413447\n\n\n\n\n1 - pnorm(q = 70, mean = 67, sd = 3)\n\n[1] 0.1586553\n\npnorm(q = 70, mean = 67, sd = 3, lower.tail = FALSE)\n\n[1] 0.1586553\n\n\n\n\n\nq is for quantile.\n\nGiven a probability \\(p\\), compute \\(x\\) such that \\(P(X &lt; x) = p\\).\nThe q functions are “backwards” of the p functions.\n\n\nqnorm(p = 0.95)\n\n[1] 1.644854\n\nqnorm(p = 0.95, mean = 67, sd = 3)\n\n[1] 71.93456\n\n\n\n\nd is for density.\n\n\nCompute the height of a distribution curve at a given \\(x\\).\nFor discrete dist: probability of getting exactly \\(x\\).\nFor continuous dist: usually meaningless.\n\n\nProbability of exactly 12 heads in 20 coin tosses, with a 70% chance of tails?\n\ndbinom(x = 12, size = 20, prob = 0.3)\n\n[1] 0.003859282"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#simulate-a-dataset",
    "href": "slides/week-9/data-simulation-part-1.html#simulate-a-dataset",
    "title": "Simulating Data in R",
    "section": "Simulate a Dataset",
    "text": "Simulate a Dataset\n\nThe Ideaset.seed()tibblevisualize\n\n\nWe can generate fake data based on the assumption that a variable follows a certain distribution.\n\nWe randomly sample observations from the distribution.\n\n\nage &lt;- runif(1000, min = 15, max = 75)\n\n\n\n\nSince there is randomness involved, we will get a different result each time we run the code.\n\n\n\n\n\nrunif(3, min = 15, max = 75)\n\n[1] 61.85689 49.08084 30.63219\n\n\n\n\n\n\nrunif(3, min = 15, max = 75)\n\n[1] 53.77562 67.76394 15.88530\n\n\n\n\n\n\n\nTo make a reproducible random sample, we first set the seed:\n\n\n\n\n\nset.seed(93401)\nrunif(3, min = 15, max = 75)\n\n[1] 20.84739 51.61768 42.68515\n\n\n\n\n\n\nset.seed(93401)\nrunif(3, min = 15, max = 75)\n\n[1] 20.84739 51.61768 42.68515\n\n\n\n\n\n\n\n\n\nset.seed(435)\n\nfake_data &lt;- tibble(names   = charlatan::ch_name(1000),\n                    height  = rnorm(1000, mean = 67, sd = 3),\n                    age     = runif(1000, min = 15, max = 75),\n                    measure = rbinom(1000, size = 1, prob = 0.6)\n                    ) |&gt; \n  mutate(supports_measure_A = ifelse(measure == 1, \"yes\", \"no\"))\n\nhead(fake_data)\n\n# A tibble: 6 × 5\n  names                 height   age measure supports_measure_A\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;chr&gt;             \n1 Elbridge Kautzer        67.4  66.3       1 yes               \n2 Brandon King            65.0  61.5       0 no                \n3 Phyllis Thompson        68.1  53.8       1 yes               \n4 Humberto Corwin         67.5  33.9       1 yes               \n5 Theresia Koelpin        71.4  16.1       1 yes               \n6 Hayden O'Reilly-Johns   66.2  37.0       0 no                \n\n\n\n\n\nCheck to see the ages look uniformly distributed.\n\n\n\nCode\nfake_data |&gt; \n  ggplot(mapping = aes(x = age,\n                       fill = supports_measure_A)) +\n  geom_histogram(show.legend = F) +\n  facet_wrap(~ supports_measure_A,\n             ncol = 1) +\n  scale_fill_brewer(palette = \"Paired\") +\n  theme_bw() +\n  labs(x = \"Age (years)\",\n       y = \"\",\n       subtitle = \"Number of Individuals Supportng Measure A for Different Ages\",)"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#pa-9",
    "href": "slides/week-9/data-simulation-part-1.html#pa-9",
    "title": "Simulating Data in R",
    "section": "PA 9",
    "text": "PA 9\n\nIn this practice activity you and your partner will write a function to simulate the weight of various band instruments, with the goal of identifying whether a particular shipment of instruments has a “reasonable” weight.\n\n\n\n\n\nThis activity will require knowledge of:\n\nnamed distributions\nprobability calculations related to distributions\nfunction documentation\nfunction syntax\nfunction arguments\n\n\n\n\n\n \nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#task-card",
    "href": "slides/week-9/data-simulation-part-1.html#task-card",
    "title": "Simulating Data in R",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\n\nThe table on distributions provides pictures on what each function (e.g., p, d, q) means\nThe list of distributions should help you decide what function to use (e.g., pchisq())"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#getting-started",
    "href": "slides/week-9/data-simulation-part-1.html#getting-started",
    "title": "Simulating Data in R",
    "section": "Getting Started",
    "text": "Getting Started\nThe person who whose birthday is closest to today starts as the Coder (giving instructions on what to type to the Developer)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-1.html#submission",
    "href": "slides/week-9/data-simulation-part-1.html#submission",
    "title": "Simulating Data in R",
    "section": "Submission",
    "text": "Submission\nYou and your partner together should address the following questions:\n\nHow many of these samples had a weight less than or equal to Professor Hill’s shipment?\n\n\nDo you beleive Professor Hill ordered genuine instruments?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#vectorized-function-checks",
    "href": "slides/week-8/iteration-part-2.html#vectorized-function-checks",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Vectorized Function Checks",
    "text": "Vectorized Function Checks\n\n\nrescale_01 &lt;- function(vec) {\n  \n  if(!is.numeric(vec)) {\n    stop(\"Input vector is not numeric\")\n  }\n  \n  if(length(vec) &lt;= 1) {\n    stop(\"Input vector length must have at least two elements\")\n  }\n  \n  range &lt;- range(vec, na.rm = TRUE)\n  \n  return((vec - range[1]) / (range[2] - range[1]))\n}\n\n\n\nHow would you transform these input checks so the rescale_01() function is vectorized?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#function-checks-for-data-frames",
    "href": "slides/week-8/iteration-part-2.html#function-checks-for-data-frames",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Function Checks for Data Frames",
    "text": "Function Checks for Data Frames\n\n\nrescale_column &lt;- function(df, var) {\n  \n  df &lt;- df |&gt;\n    dplyr::mutate(across(.cols = {{ var }}, .fns = ~rescale_01(..x)\n                         )\n                  )\n  \n  return(df)\n}\n\n\n\nHow would you check if the input df was a data frame?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#function-checks-for-data-frames-columns",
    "href": "slides/week-8/iteration-part-2.html#function-checks-for-data-frames-columns",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Function Checks for Data Frames – Columns",
    "text": "Function Checks for Data Frames – Columns\n\n\nrescale_column &lt;- function(df, cols){\n  \n  stopifnot(is.data.frame(df))\n  \n  df &lt;- df |&gt;\n    dplyr::mutate(across(.cols = {{ cols }}, .fns = ~rescale_01(.x)\n                         )\n                  )\n  \n  return(df)\n}\n\n\n\nHow would you check if the input cols were columns that existed in df?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#stacked-bars-with-color",
    "href": "slides/week-8/iteration-part-2.html#stacked-bars-with-color",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Stacked Bars with Color!",
    "text": "Stacked Bars with Color!\n\n\n\n\n\n\n\nNotice how their facets have more informative titles?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#more-stacked-bars-with-color",
    "href": "slides/week-8/iteration-part-2.html#more-stacked-bars-with-color",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "More Stacked Bars with Color!",
    "text": "More Stacked Bars with Color!\n\n\n\n\n\n\n\nNotice how every year with measurements is displayed?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#combining-year-and-trip",
    "href": "slides/week-8/iteration-part-2.html#combining-year-and-trip",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Combining Year and Trip",
    "text": "Combining Year and Trip"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#faceting-by-year",
    "href": "slides/week-8/iteration-part-2.html#faceting-by-year",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Faceting by Year!",
    "text": "Faceting by Year!"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#a-line-plot-with-colors",
    "href": "slides/week-8/iteration-part-2.html#a-line-plot-with-colors",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "A Line Plot with Colors!",
    "text": "A Line Plot with Colors!"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#do-you-want-your-legend-on-the-left",
    "href": "slides/week-8/iteration-part-2.html#do-you-want-your-legend-on-the-left",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Do you want your legend on the left?",
    "text": "Do you want your legend on the left?\n\n\n\nCode\nfish |&gt;\n  group_by(year, section, trip) |&gt;\n  summarize(missing_count = sum(is.na(weight)), .groups = \"drop\") |&gt;\n  mutate(trip = case_when(\n    trip == 1 ~ \"Trip 1\",\n    trip == 2 ~ \"Trip 2\")) |&gt;\n  ggplot(aes(x = year, y = missing_count, color = section)) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Number of Missing Weight Measurements of Trout Species (Blackfoot River)\",\n    x = \"\",\n    subtitle = \"Across Sections of River and Trip Number\",\n    y = \"\",\n    color = \"Section\") +\n  facet_wrap(~ trip) +\n  theme_minimal() +\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#could-you-remove-your-legend",
    "href": "slides/week-8/iteration-part-2.html#could-you-remove-your-legend",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Could you remove your legend?",
    "text": "Could you remove your legend?\n\n\n\nCode\nplot &lt;- fish |&gt;\n  group_by(year, section, trip) |&gt;\n  summarize(missing_count = sum(is.na(weight)), .groups = \"drop\") |&gt;\n  mutate(trip = case_when(\n    trip == 1 ~ \"Trip 1\",\n    trip == 2 ~ \"Trip 2\")) |&gt;\n  ggplot(aes(x = year, y = missing_count, color = section)) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Missing Fish Weights for Trout Species on the Blackfoot River\",\n    x = \"Year\",\n    y = \"\",\n    color = \"Section\") +\n  facet_wrap(~ trip) +\n  theme_minimal()\n\n\nannotate_text &lt;- data.frame(year = c(1994, 1993), \n                            missing_count = c(150, 40),\n                            trip = factor(c(\"Trip 2\", \"Trip 2\"), \n                                          levels = c(\"Trip 1\",\"Trip 2\"), \n                                          ), \n                            section = factor(c(\"Johnsrud\", \"ScottyBrown\"), \n                                             levels = c(\"Johnsrud\", \"ScottyBrown\"))\n                            )\nplot + \n  geom_text(data = annotate_text, label = c(\"Johnsrud\", \"ScottyBrown\")) + \n  theme(legend.position = \"none\", \n        plot.title = element_text(size = 12), \n        axis.text.x = element_text(size = 12), \n        axis.text.y = element_text(size = 12), \n        axis.title = element_text(size = 12),\n        strip.text.x = element_text(size = 12)\n        )"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#could-you-remove-your-legend-1",
    "href": "slides/week-8/iteration-part-2.html#could-you-remove-your-legend-1",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Could you remove your legend?",
    "text": "Could you remove your legend?\n\n\n\nCode\nlibrary(ggtext)\n\nfish |&gt;\n  group_by(year, section, trip) |&gt;\n  summarize(missing_count = sum(is.na(weight)), .groups = \"drop\") |&gt;\n  mutate(trip = case_when(\n    trip == 1 ~ \"Trip 1\",\n    trip == 2 ~ \"Trip 2\")) |&gt;\n  ggplot(aes(x = year, y = missing_count, color = section)) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = str_c(\"Missing Fish Weights for the \",\n      \"&lt;span style = 'color:#66C2A5'&gt;**Johnsrud**&lt;/span&gt;\",\n      \" and &lt;span style = 'color:#FC8D62'&gt;**ScottyBrown**&lt;/span&gt;\",\n      \" Sections of the Blackfoot River\"),\n    x = \"Year\",\n    y = \"\",\n    color = \"Section\") +\n  facet_wrap(~ trip) +\n  theme_minimal() + \n  theme(plot.title = ggtext::element_markdown(size = 16), \n        legend.position = \"none\",\n        axis.text.x = element_text(size = 12), \n        axis.text.y = element_text(size = 12), \n        axis.title = element_text(size = 12),\n        strip.text.x = element_text(size = 12)\n        )"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#function-formatting",
    "href": "slides/week-8/iteration-part-2.html#function-formatting",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Function Formatting",
    "text": "Function Formatting\n\nThere should be a new line after the opening {\nThe closing } should be on its own line\nThe body of the function should be indented\nThe code uses whitespace around all commas and arithmetic operators\nThe code uses new lines (returns) to eliminate character wrapping"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#good",
    "href": "slides/week-8/iteration-part-2.html#good",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Good",
    "text": "Good\n\nrescale_01 &lt;- function(x) {\n  if (!is.numeric(x)) {\n    stop(\"Input must be a numeric vector\")\n  }\n  \n  if (length(x) &lt;= 1) {\n    stop(\"Length of the input vector is not greater than 1\")\n  }\n  \n  get_range &lt;- range(x, na.rm = TRUE)\n  (x - get_range[1]) / (get_range[2] - get_range[1])\n}"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#not-so-good",
    "href": "slides/week-8/iteration-part-2.html#not-so-good",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "Not so good",
    "text": "Not so good\n\nrescale_01 &lt;- function(x) \n{\n  if (!is.numeric(x)) {\n    stop(\"Input must be a numeric vector\")\n  }\n  \n  if (length(x) &lt;= 1) {\n    stop(\"Length of the input vector is not greater than 1\")\n  }\n  \n  get_range &lt;- range(x, na.rm=TRUE)\n  (x-get_range[1]) / (get_range[2]-get_range[1])}"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#if-on-a-single-line",
    "href": "slides/week-8/iteration-part-2.html#if-on-a-single-line",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "if() on a single line?",
    "text": "if() on a single line?\n\nrescale_01 &lt;- function(x) {\n  \n  if(!is.numeric(x)) stop(\"Input vector must be numeric.\")\n  if(length(x) &lt;= 1) stop(\"Input vector requires more than one element.\")\n  \n  range_1 &lt;- range(x, na.rm = TRUE)\n  \n  (x - range_1[1]) / (range_1[2] - range_1[1])\n}\n\nThis technically works because the stop() is on the same line as if().\n\nBut what if you have multiple things that happen if the condition is met?"
  },
  {
    "objectID": "slides/week-8/iteration-part-2.html#if-on-multiple-lines",
    "href": "slides/week-8/iteration-part-2.html#if-on-multiple-lines",
    "title": "Cool Plots & Searching for Efficiency",
    "section": "if() on multiple lines",
    "text": "if() on multiple lines\n\npluralize_gift &lt;- function(gift){\n\n  # Check if the word ends in a y\n  if(str_detect(gift, \"y$\")){\n    \n    # Replace the y at the end with an ies\n    gift &lt;- str_replace(gift, \n                        pattern = \"y\",\n                        replacement = \"ies\")\n    } \n  # Check for a oo (goose)\n  else if(str_detect(gift,\"oo\")){ \n    \n    # Replace the oo with a ee\n    gift &lt;- str_replace(gift, \n                        pattern = \"oo\",\n                        replacement = \"ee\")\n    } \n  else{\n    # Add an s to the end of the gift\n    gift &lt;- str_c(gift, replacement = \"s\")\n    }\n\n  return(gift)\n\n}"
  },
  {
    "objectID": "labs/exemplars/student-work.html",
    "href": "labs/exemplars/student-work.html",
    "title": "Gallary of Exemplary Student Work",
    "section": "",
    "text": "Challenge 2\nThis code is brought to us by Zack Kramer! I think this code is so special because Zack managed to specify every annotation within one call to the annotate() function—very efficient!\n\nggplot(data = survey_data,\n       mapping = aes(x = weight, y = species)) + \n  geom_boxplot(aes(color = genus),\n               outliers = FALSE) + \n  scale_colour_brewer(palette = \"Set1\") +\n  annotate(\"text\", y = 1:14, x = 250, label = c(\"Neomota\",\n                                                \"Chaetodipus\",\n                                                \"Peromyscus\",\n                                                \"Perognathus\",\n                                                \"Reithrodontomys\",\n                                                \"Sigmodon\",\n                                                \"Onychomys\",\n                                                \"Peromyscus\",\n                                                \"Reithrodontomys\",\n                                                \"Dipodomys\",\n                                                \"Dipodomys\",\n                                                \"Chaetodipus\",\n                                                \"Dipodomys\",\n                                                \"Onychromys\")) +\n  theme(legend.position = \"none\") +\n  labs(title = \"Rodent Weight Distribution by Species\",\n       x = \"Weight (g)\",\n       y = \"\")\n\n\n\n\n\n\n\n\n\n\nLab 3\nThis code is brought to us by a student who wishes to remain anonymous. What I appreciated about their code is both their efficiency and their concise output!\n3. Provide a brief overview (~4 sentences) of the dataset.\nThis data set contains the metrics generated from students’ teacher evaluations at a University in Poland during the winter semester of the 2020-2021 academic year. The data set is 8015 by 22, representing 8015 observations with 22 variables. Each row of data corresponds to a specific teacher, their class identifier and an evaluation question. And for each of these, the average score of the question, the teacher’s information, and additional student metrics are observed.\n6. How many unique instructors and unique courses are present in the cleaned dataset?\n\nteacher_evals_clean |&gt;\n  summarise(unique_teachers = n_distinct(teacher_id),\n            unique_courses = n_distinct(course_id),\n            unique_combinations = n_distinct(course_id,teacher_id))\n\n# A tibble: 1 × 3\n  unique_teachers unique_courses unique_combinations\n            &lt;int&gt;          &lt;int&gt;               &lt;int&gt;\n1             297            939                1094\n\n\n9. Each course seems to have used a different subset of the nine evaluation questions. How many teacher-course combinations asked all nine questions?\n\nteacher_evals_clean |&gt;\n  group_by(course_id, teacher_id) |&gt;\n  summarise(question_count = n_distinct(question_no), \n            .groups = \"drop\") |&gt;\n  filter(question_count == 9) |&gt;\n  count() |&gt;\n  rename(teacher_course = n)\n\n# A tibble: 1 × 1\n  teacher_course\n           &lt;int&gt;\n1             49\n\n\n10. Which instructors had the highest and lowest average rating for Question 1 (I learnt a lot during the course.) across all their courses?\n\nteacher_evals_clean |&gt;\n  group_by(teacher_id) |&gt;\n  filter(question_no == 901) |&gt;\n  summarize(avg_q1_score = mean(SET_score_avg), \n            .groups = \"drop\") |&gt;\n  filter(avg_q1_score == min(avg_q1_score) |\n            avg_q1_score == max(avg_q1_score))\n\n# A tibble: 82 × 2\n   teacher_id avg_q1_score\n   &lt;fct&gt;             &lt;dbl&gt;\n 1 3471                  5\n 2 3513                  5\n 3 3543                  5\n 4 3608                  5\n 5 3662                  5\n 6 3682                  5\n 7 37013                 5\n 8 37023                 5\n 9 37026                 5\n10 37988                 5\n# ℹ 72 more rows\n\n\n\n\nLab 4\n4. Let’s consider the median household income of each region, and how that income has changed over time. Create a table with ten rows, one for each region, and two columns, one for 2008 and one for 2018. The cells should contain the median of the median household income (expressed in 2018 dollars) of the region and the study_year. Arrange the rows by 2018 values.\nThis code is brought to us by Oliver Lane & Cassandra Miller! What I appreciate about their code is how their tables have descriptive titles!\nOliver’s Code:\n\nca_childcare |&gt;\n  filter(study_year %in% c(2008, 2018)) |&gt;\n  group_by(region, study_year) |&gt;\n  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |&gt;\n  pivot_wider(names_from = study_year,\n              values_from = median_income,\n              names_prefix = \"median_income_\") |&gt;\n  arrange(desc(median_income_2018))\n\n# A tibble: 10 × 3\n   region                      median_income_2008 median_income_2018\n   &lt;fct&gt;                                    &lt;dbl&gt;              &lt;dbl&gt;\n 1 San Francisco Bay Area                  90412.            104552 \n 2 Orange County                           86452.             85398 \n 3 Central Coast                           72979              74849 \n 4 Los Angeles County                      63471.             64251 \n 5 Inland Empire                           65977.             62056 \n 6 San Diego - Imperial                    58201.             60344.\n 7 Northern San Joaquin Valley             59108.             57769 \n 8 Superior California                     57831.             53270 \n 9 Southern San Joaquin Valley             52676.             52479 \n10 North Coast                             47862.             45528 \n\n\nCassandra’s Code:\n\nmedian_income_by_region &lt;- ca_childcare |&gt; \n  filter(study_year %in% c(2008, 2018)) |&gt; \n  group_by(region, study_year) |&gt; \n  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |&gt; \n  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = \"Income_\")\n\n5. Which California region had the lowest median full-time median weekly price for center-based childcare for infants in 2018? Does this region correspond to the region with the lowest median income in 2018 that you found in Q4?\nThis code is brought to us by Eva Moylan & Tillman Erb! What I appreciate about their code is how they went above and beyond by including both the median price of center-based childcare for infants and median household income for each region.\nEva’s Code:\n\nca_childcare |&gt;\n  group_by(region, study_year) |&gt;\n  summarize(mhi_2018 = median(mhi_2018), #values now are median for each year at each county\n            mc_infant = median(mc_infant),\n            .groups = 'drop') |&gt;\n  filter(study_year == 2018) |&gt;\n  pivot_wider(id_cols = \"region\", #region stays from original table orientation \n              names_from = study_year,\n              values_from = c(mhi_2018,\n                              mc_infant)) |&gt; \n  slice_min(mc_infant_2018) #Superior CA has the lowest med childcare for infants in 2018\n\n# A tibble: 1 × 3\n  region              mhi_2018_2018 mc_infant_2018\n  &lt;fct&gt;                       &lt;dbl&gt;          &lt;dbl&gt;\n1 Superior California         53270           215.\n\n\nTillman’s Code:\n\nca_childcare |&gt;\n  filter(study_year == 2018) |&gt;\n  group_by(region) |&gt;\n  summarize(median_weekly_cc_price = median(mc_infant)) |&gt;\n  arrange(median_weekly_cc_price) |&gt;\n  inner_join(select(median_inc, -`2008`)) |&gt;\n  rename(median_household_income =`2018`)\n\n# A tibble: 10 × 3\n   region                      median_weekly_cc_price median_household_income\n   &lt;fct&gt;                                        &lt;dbl&gt;                   &lt;dbl&gt;\n 1 Superior California                           215.                  53270 \n 2 North Coast                                   226.                  45528 \n 3 Northern San Joaquin Valley                   238.                  57769 \n 4 San Diego - Imperial                          262.                  60344.\n 5 Southern San Joaquin Valley                   287.                  52479 \n 6 Inland Empire                                 294.                  62056 \n 7 Central Coast                                 318.                  74849 \n 8 Los Angeles County                            334.                  64251 \n 9 Orange County                                 341.                  85398 \n10 San Francisco Bay Area                        402.                 104552 \n\n\n6. The following plot shows, for all ten regions, the change over time of the full-time median price for center-based childcare for infants, toddlers, and preschoolers. Recreate the plot. You do not have to replicate the exact colors or theme, but your plot should have the same content, including the order of the facets and legend, reader-friendly labels, axes breaks, and a loess smoother.\nThis code is brought to us by Isabel Villafuerte! What I appreciate about their code is the reordering of the facets and legend, adding dollar signs to the y-axis labels, and dodging the x-axis labels (a clever way to not need to remove some labels!).\n\nca_childcare |&gt;\n  filter(study_year &gt;= 2008) |&gt;\n  pivot_longer(cols = c(mc_infant,\n                        mc_toddler,\n                        mc_preschool),\n               names_to = \"age_demo\",\n               values_to = \"median_weekly_price\") |&gt;\n  mutate(age_demo = fct_recode(age_demo,\n                               \"Infant\" = \"mc_infant\",\n                               \"Toddler\" = \"mc_toddler\",\n                               \"Preschool\" = \"mc_preschool\"),\n         age_demo = fct_relevel(age_demo,\n                                 \"Infant\",\n                                 \"Toddler\",\n                                 \"Preschool\")\n         ) |&gt; \nggplot(mapping = aes (x = study_year,\n                        y = median_weekly_price,\n                      color = fct_reorder2(region,\n                                           .x = study_year,\n                                           .y = median_weekly_price))) +\n  geom_point() +\n  geom_smooth(method = \"loess\",\n              se = TRUE) +\n  facet_wrap(~age_demo) +\n  labs(x = \"Study Year\",\n       y = \"\",\n       title = \"Weekly Median Price for Center-Based Childcare ($)\",\n       color = \"California Region\") +\n  scale_x_continuous(breaks = seq(2008,\n                                  2018,\n                                  by = 2)) +\n  guides(x = guide_axis(n.dodge = 2)) +\n  theme_bw() +\n  scale_y_continuous(limits = c(0,\n                                500),\n                     labels = scales::label_dollar())\n\n\n\n\n\n\n\n\n7. Create a scatterplot showing the relationship between median household income (expressed in 2018 dollars) and the full-time median weekly price charged for center-based childcare for an infant in California. Overlay a linear regression line (lm) to show the trend.\nThis code is brought to us by Oliver Lane & Cassandra Miller! What I appreciate about their plot is their use of color, themes, and thoughtful plot titles!\n\nggplot(ca_childcare, aes(x = mhi_2018, y = mc_infant)) +\n  geom_point(alpha = 0.6, color = \"steelblue\") +  # Scatterplot points\n  geom_smooth(method = \"lm\", se = TRUE, color = \"darkred\", linetype = \"dashed\") + \n  theme_bw() +\n  labs(\n    title = \"Household Income vs. Infant Care Prices\",\n    x = \"Median Household Income (dollars)\",\n    y = \"\",\n    subtitle = \"Median Weekly Price for Infant Care (dollars)\"\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\") \n  )\n\n\n\n\n\n\n\n\n\n\nLab 7\n2. Create ONE thoughtful visualization that explores the frequency of missing values across the different years, sections, and trips.\nThis code is brought to us by Tillman Erb! I appreciate Tillman’s use of non-standard colors and facet titles that are clear to the reader.\n\nfish |&gt;\n  filter(if_any(.cols = everything(), .fns = is.na)) |&gt;\n  mutate(trip = as.character(trip),\n         trip = fct_recode(trip,\n      \"Trip 1\" = \"1\",\n      \"Trip 2\" = \"2\")) |&gt;\n  ggplot(mapping = aes(x = year, fill = section)) +\n  facet_grid(~ trip) + \n  geom_bar() +\n  scale_fill_viridis_d() + \n  labs(x = \"Year\",\n       y = NULL,\n       title = \"Missing observation frequency by section, trip and year\",\n       subtitle = \"Number of missing observations\",\n       color = \"Section\")\n\n\n\n\n\n\n\n\nThis code is brought to us by Christopher Hawkins! I really like how Christopher thought outside the box and combined the year and the trip number to a single variable on the y-axis (with a descriptive plot title!).\n\nfish |&gt;\n  group_by(year, section, trip) |&gt;\n  summarize(missing_weight = sum(is.na(weight)), .groups = \"drop\") |&gt;\n  # Create a combined label for year and trip\n  mutate(year_trip = paste(year, trip, sep = \"-\")) |&gt;\n  # Plotting the data\n  ggplot(mapping = aes(x = missing_weight, y = year_trip, fill = section)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Count of Missing Values in Weight by Year, Section, and Trip\",\n    subtitle = \"Year-Trip #\",\n    x = \"Count of Missing Weight Values\",\n    y = \"\",\n    fill = \"Section\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis visualization is brought to us by Siwuthara Prak! What I really appreciate about this plot is how it plots every year that there were measurements.\n\nfish |&gt;\n  filter(is.na(weight)) |&gt;\n  mutate(trip = factor(trip, levels = c(\"1\", \"2\")), \n         trip = fct_recode(trip, \n                           `Trip 1` = \"1\",\n                           `Trip 2` = \"2\")\n         )|&gt;\n  group_by(year, \n           section, \n           trip) |&gt;\n  summarise(missing_count = n(), \n            .groups = 'drop') |&gt;\n  ggplot(aes(x = factor(year), \n             y = missing_count, \n             fill = section)) +\n  geom_bar(stat = \"identity\", \n           position = \"stack\") +\n  facet_wrap(~ trip, ncol = 2) +\n  theme_bw(base_size = 8) +\n  labs(\n    x = \"Year\",\n    y = \"\",\n    subtitle = \"Number of Missing Values\",\n    fill = \"Section\",\n    title = \"Frequency of Missing Values in 'Weight' by Year, Section, and Trip\"\n  ) +\n  scale_fill_manual(values = c(\"Johnsrud\" = \"steelblue\", \"ScottyBrown\" = \"gray\"))  # Adjusted color for ScottyBrown\n\n\n\n\n\n\n\n\nThis code is brought to us by Alex Lung! I love the idea of faceting by year, since it gets at the same idea as Siwuthara’s plot, where the reader can see every year there are data values for. Alex also uses some fun (non-standard) colors!\n\nfish |&gt; \n  #Make sure it is rows lacking wight data\n  filter(is.na(weight)) |&gt;\n  #Alter into a usable distincter variable\n  mutate(trip = as.factor(trip)) |&gt;\n  group_by(year, section, trip) |&gt;\n  summarise(Missing_Count = n(), .groups = \"drop\") |&gt;\n  ggplot(aes(x = section, y = Missing_Count, fill = trip)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~ year, ncol = 5) +\n  labs(\n    title = \"Frequency of Missing Weight Values by Year, Section, and Trip\",\n    subtitle = \"Count of Missing Values\",\n    x = \"Section\",\n    y = \"\",\n    fill = \"Trip\"\n  ) +\n  theme_bw(base_size = 8) +  \n  theme(\n    strip.text = element_text(size = 12),\n    aspect.ratio = 0.6,\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank()\n  ) +\n  scale_fill_manual(values = c(\"darkcyan\", \"cyan2\"))\n\n\n\n\n\n\n\n\nThis code is brought to us by a student who wishes to remain anonymous. I think a line plot is a great approach here to see the changes in missing values over time, plus they use some great colors!\n\nfish |&gt;\n  group_by(year, section, trip) |&gt;\n  summarize(missing_count = sum(is.na(weight)), .groups = \"drop\") |&gt;\n  mutate(trip = case_when(\n    trip == 1 ~ \"Trip 1\",\n    trip == 2 ~ \"Trip 2\")) |&gt;\n  ggplot(aes(x = year, y = missing_count, color = section)) +\n  geom_line(size = 1) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Missing Data in Measurements of Trout Species (Blackfoot River)\",\n    x = \"Year\",\n    subtitle = \"Weight Values\",\n    y = \"\",\n    color = \"Section\") +\n  facet_wrap(~ trip) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis code is brought to us by Cassandra Miller! Cassandra also used a line plot, with great facet labels and a great plot title!\n\nfish |&gt;   \n  filter(is.na(weight)) |&gt;   \n  group_by(year, section, trip) |&gt;   \n  mutate(trip = recode(trip, \n                       '1' = 'Trip 1',\n                       '2' = 'Trip 2')) |&gt;   \n  summarise(Missing_amount = n(), .groups = 'drop') |&gt;   \n  ggplot(aes(x = year, y = Missing_amount, color = section)) +   \n  geom_line() +   \n  facet_wrap(~trip) +   \n  theme_minimal() +   \n  labs(\n    x = 'Year',\n    y = '',\n    title = 'Frequency of Missing Values Across Various Years, Sections and Trips',\n    subtitle = 'Count of Missing Values Across Years',\n    color = 'Section'\n  )\n\n\n\n\n\n\n\n\n5. Let’s incorporate some input validation into your function. Modify your previous code so that the function stops if …\n\n… the input vector is not numeric.\n… the length of the input vector is not greater than 1.\n\nThis code is brought to us by Ryan Chen! I was excited to see that Ryan figured out how to add messages to the stopifnot() function!\n\nrescale_01 &lt;- function(vec){\n  # validate input vector\n  stopifnot(\"Error: Input vector must be numeric\" = is.numeric(vec),\n            \"Error: Input vector must contain more than one element\" = length(x) &gt; 1)\n  \n  min_val = min(vec,\n                na.rm = TRUE)\n  max_val = max(vec,\n                na.rm = TRUE)\n  return((vec - min_val) / (max_val - min_val))\n}\n\nThis code is brought to us by Daniel Bush! I thought it was really clever to add an additional check to see if the min and the max values were identical.\n\nrescale_01 &lt;- function(vector) {   \n  stopifnot(is.numeric(vector),\n            length(vector) &gt; 1)  \n\n  range_vals &lt;- range(vector, na.rm = TRUE)\n  min_val &lt;- range_vals[1]  \n  max_val &lt;- range_vals[2]\n  \n  if (min_val == max_val) {     \n    return(rep(NA,\n               length(vector)))  \n  }     \n    rescaled_vector &lt;- (vector - min_val) / (max_val - min_val)      \n\n  return(rescaled_vector) \n}\n\nThis code is brought to us by Tillman! I was very impressed with the addition of a na.rm argument (that’s optional!), to control the output of the final vector.\n\nrescale_01 &lt;- function(vec, na.rm = TRUE) {\n  if (!is.numeric(vec[1])){\n    stop(\"Error: vector provided is not numeric\")\n  } else if (length(vec) &lt;= 1) {\n    stop(\"Error: vector length must be greater than 1\")\n  }\n  vec_range &lt;- range(vec, na.rm = TRUE, finite = TRUE)\n  vec &lt;- (vec - vec_range[1]) / \n           (vec_range[2] - vec_range[1])\n  if (na.rm){\n    vec &lt;- vec[!is.na(vec)]\n    }\n  return(vec)\n}\n\n\n\n [1] 0.00000000 0.04166667 0.08333333 0.12500000 0.16666667 0.20833333\n [7] 0.25000000 0.29166667 0.33333333 0.37500000 0.41666667 0.45833333\n[13] 0.50000000 0.54166667 0.58333333 0.62500000 0.66666667 0.70833333\n[19] 0.75000000 0.79166667 0.83333333 0.87500000 0.91666667 0.95833333\n[25] 1.00000000         NA\n\n\nError in rescale_01(y): Input vector is not numeric\n\n\nError in rescale_01(z): Input vector length must have at least two elements",
    "crumbs": [
      "Gallary of Student Work",
      "Exemplary Student Work"
    ]
  },
  {
    "objectID": "group-activities/week-7/PA-7-functions.html",
    "href": "group-activities/week-7/PA-7-functions.html",
    "title": "PA 7: Writing Functions",
    "section": "",
    "text": "You will write several small functions, then use them to unscramble a message. Many of the functions have been started for you below, but none of them are complete as is.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group.\n\n1. Write code to manipulate the vector of numbers nums. Your code should divide each element in the vector by the smallest element and round the results to the nearest whole number. Hint: This code should not be a function.\n\nnums &lt;- 3:12\n\n2. Turn your code from Q1 into a function called divide_and_round(). Fill in the skeleton code below.\n\ndivide_and_round &lt;- function(vec){\n  \n}\n\n3. Test your function by running the code below.\n\ntest &lt;- c(5:10, NA)\ndivide_and_round(test)\n\nNULL\n\n\n\n4. Write code to manipulate the vector of numbers nums. Your code should, for each element, return TRUE if the number is NOT divisible by 9 or 12, and return FALSE otherwise. Hint: This code should not be a function.\n5. Turn your code from Q4 into a function called no_nines_or_twelves().\n6. Test your function by running the code below.\n\ntest &lt;- c(seq(from = 15, to = 60, by = 5), \n          NA)\n\nno_nines_or_twelves(test)\n\nError in no_nines_or_twelves(test): could not find function \"no_nines_or_twelves\"\n\n\n\n7. Write a function called every_other(). This function should take in a vector and return every other value in the vector. Include an optional argument called start which lets you choose where to start skipping; that is, if start = 1, the function returns the 1st, 3rd, 5th, etc. values and if start = 2, the function returns the 2nd, 4th, 6th, etc. values. Fill in the skeleton below.\nHint: Do not use a for() loop to do this! Accomplish this with the seq_along() function, bracket subsetting ([]), and modulus arithmetic (%%).\n\nevery_other &lt;- function(vec){\n  \n  if(start == 2){\n    vec[]\n  } else if(start == 1) {\n    vec[]\n  }\n  \n}\n\n8. Test your function by running the code below.\n\ntest &lt;- c(1:10)\n\nevery_other(test)\n\nError in start == 2: comparison (==) is possible only for atomic and list types\n\nevery_other(test, start = 2)\n\nError in every_other(test, start = 2): unused argument (start = 2)\n\n\n\n9. Write a function called shorten(). This function should take in a vector, drop all values BEFORE the cumulative sum is greater than a provided number, and return the remaining values from the original vector.\nHint: Do not use a while() loop to do this! Accomplish this with the cumsum() function and bracketing.\n\nshorten &lt;- function(x, sum){\n  \n}\n\n10. Test your function by running the code below.\n\ntest &lt;- 20:50 \nshorten(test, 350)\n\nNULL\n\n\n11. Once you have written your four functions correctly, run the following code:\n\nmy_vec &lt;- c(39, 1.87, 48, 11, 8, 45, 21, 5, 12, 33, 9, 11, 108,\n            4, 18, 5, 16, 17, 8, 48, 27, 24, 4, 22, 12, 27, 23,\n            46, 42, 35, 15, 34, 36, 26, 18, 10, 18.21, 72.04,\n            36.9, 41.81, 29, 89.75, 34.03, 20.18, 48.74, 15.76,\n            31.86, 83.6, 43.55, 39.99, 23.55, 8.54, 24.71, 22.02,\n            9.71, 62.14, 35.46, 16.61, 15.66, 21.29, 30.52,\n            201.07, 45.81, 7.85, 30.13, 34.14, 22.62, 10.2, 6.02,\n            30.12, 10.64, 31.72, 24.57, 14.43, 43.37, 89.93,\n            44.72, 51.32, 13.62, 45.56, 22.96, 7.05, 29.99, 41.38,\n            26.59, 23.04, 19.82, 50.73, 39.56, 43.79, 30.22, 85.85,\n            5.78, 78.85, 29.52, 66.27, 44.06, 27.28, 24.43, 64.32,\n            3.35, 67.45, 46.72, 48.44, 48.65, 33.3, 40.28, 19.04)\n\nmy_vec &lt;- every_other(my_vec, start = 2)\n\nError in every_other(my_vec, start = 2): unused argument (start = 2)\n\n# Should have 54 elements! \n\nmy_vec &lt;- divide_and_round(my_vec)\n\nmy_vec &lt;- every_other(my_vec, start = 1)\n\nError in every_other(my_vec, start = 1): unused argument (start = 1)\n\n# Should have 27 elements!\n\nmy_vec &lt;- shorten(my_vec, 350)\n# Should have 12 elements!\n\nmy_vec &lt;- my_vec[no_nines_or_twelves(my_vec)]\n\nError in no_nines_or_twelves(my_vec): could not find function \"no_nines_or_twelves\"\n\n# Should have 6 elements! \n\nmy_vec &lt;- sort(my_vec)\n\nmy_vec\n\nNULL\n\n\n\nCanvas Submission\nIf you have done everything correctly, your final vector will be six numbers long. Google these six numbers to find a TV show as your final answer and submit to Canvas."
  },
  {
    "objectID": "labs/instructions/lab-9-instructions.html",
    "href": "labs/instructions/lab-9-instructions.html",
    "title": "Lab 9: Data Simulation Exploration",
    "section": "",
    "text": "Perhaps you have seen the Random Babies applet? Suppose one night at a hospital four babies are born. The hospital is not very organized and looses track of which baby belongs to each parent(s), so they decide to return the babies to parents at random. Here, we are interested in the number of babies that are correctly returned to their respective parent(s).\n1. Simulate the distribution of the number of babies that are correctly returned. Use 10,000 simulations.\n\n\n\n\n\n\nTip\n\n\n\nWrite a function to accomplish one simulation, then use map_int() to run 10,000 simulations.\nKeep in mind that your function needs to output a single number (not data frame) for it to be compatible with map_int()!\n\n\n\nrandomBabies &lt;- function(nBabies){\n  ...\n}\n\nresults &lt;- map_int(.x = 1:10000,\n                  .f = \n                  )\n\n2. Create a table displaying the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s). Hint: A pivot_wider() will be helpful here!\n\n\n\n\n\n\nTip\n\n\n\nThe output of your map_int() is a vector, but to make a nice table (and plot) you need this to be a data frame! Luckily, the enframe() function does just that–it converts a vector to a data frame.\nYou may find the following code helpful:\n\nenframe(results, \n        name = \"simulation_number\", \n        value = \"ncorrect\")\n\n\n\n3. Now create a barplot showing the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s).\n\n\n\n\n\n\nTip\n\n\n\nYou may find the following code helpful:\n\ngeom_bar(mapping = aes(y = after_stat(count) / sum(after_stat(count))\n                       )\n         )"
  },
  {
    "objectID": "labs/instructions/lab-9-instructions.html#random-babies-simulation",
    "href": "labs/instructions/lab-9-instructions.html#random-babies-simulation",
    "title": "Lab 9: Data Simulation Exploration",
    "section": "",
    "text": "Perhaps you have seen the Random Babies applet? Suppose one night at a hospital four babies are born. The hospital is not very organized and looses track of which baby belongs to each parent(s), so they decide to return the babies to parents at random. Here, we are interested in the number of babies that are correctly returned to their respective parent(s).\n1. Simulate the distribution of the number of babies that are correctly returned. Use 10,000 simulations.\n\n\n\n\n\n\nTip\n\n\n\nWrite a function to accomplish one simulation, then use map_int() to run 10,000 simulations.\nKeep in mind that your function needs to output a single number (not data frame) for it to be compatible with map_int()!\n\n\n\nrandomBabies &lt;- function(nBabies){\n  ...\n}\n\nresults &lt;- map_int(.x = 1:10000,\n                  .f = \n                  )\n\n2. Create a table displaying the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s). Hint: A pivot_wider() will be helpful here!\n\n\n\n\n\n\nTip\n\n\n\nThe output of your map_int() is a vector, but to make a nice table (and plot) you need this to be a data frame! Luckily, the enframe() function does just that–it converts a vector to a data frame.\nYou may find the following code helpful:\n\nenframe(results, \n        name = \"simulation_number\", \n        value = \"ncorrect\")\n\n\n\n3. Now create a barplot showing the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s).\n\n\n\n\n\n\nTip\n\n\n\nYou may find the following code helpful:\n\ngeom_bar(mapping = aes(y = after_stat(count) / sum(after_stat(count))\n                       )\n         )"
  },
  {
    "objectID": "labs/instructions/lab-9-instructions.html#central-limit-theorem-optional-somewhat-spicy",
    "href": "labs/instructions/lab-9-instructions.html#central-limit-theorem-optional-somewhat-spicy",
    "title": "Lab 9: Data Simulation Exploration",
    "section": "Central Limit Theorem – Optional & Somewhat Spicy",
    "text": "Central Limit Theorem – Optional & Somewhat Spicy\nYou have encountered the Central Limit Theorem in your previous statistics classes, whether or not is has been explicitly discussed. The Central Limit Theorem states that:\n\nThe sampling distribution of the mean will always be normally distributed, as long as the sample size is large enough, regardless of the underlying distribution of the population.\n\nRemember back to your first statistics class when you had to check if the sample size was larger than 30 when testing if groups had different means? That’s because of the Central Limit Theorem! Under certain conditions (e.g., sample size) the Central Limit Theorem ensures that the distribution of sample means will be approximately Normal, regardless of how skewed the underlying distribution of the population may be.\nA fundamental misunderstanding of the Central Limit Theorem is that it states that as a sample size gets larger, the population will be normally distributed. This is not the case, so let’s do some exploring!\n4. Write a function that simulates a specified number of sample means, for samples of size 100 drawn from a Chi-Squared distribution. Your function should allow the user to input:\n\nthe number of means to simulate\nthe degrees of freedom of the Chi-Squared distribution used to simulate data\n\nI’ve provided some skeleton code to get you started. :)\n\nsimulate_means &lt;- function(n, df){\n  map_dbl(.x = , \n          .f = ~rchisq(n = 100, ...) %&gt;% mean()\n          )\n}\n\n5. Next, let’s use the crossing() function to make a grid with inputs we want to pass into the simulate_means() function. Specifically, we want to explore the following values:\n\nn = 10, 100, 1000, 10000\ndf = 10\n\n\ngrid &lt;- crossing(n = c(10, 100, 1000, 10000), \n                 df = 5)\n\n6. Now, use a p_map() to create a new column of simulated means (using the simulate_means() function), for every value in your grid.\n\n\n\n\n\n\nTip\n\n\n\nYou will want to use the unnest() function to extract the results of the p_map() (stored in the simulated_means column).\n\n\n\nall_simulations &lt;- grid |&gt; \n  mutate(simulated_means = pmap(.l = list(), \n                                .f = simulate_means)\n         ) |&gt; \n  unnest() \n\n7. Create a table of the means from each of the simulations (10, 100, 1000, and 10000). Hint: Make sure your columns have descriptive names!\n8. Create a plot showing the distribution of simulated means from each of the simulations. Each simulation (10, 100, 1000, and 10000) should be its own facet! Hint: Make sure your facets have descriptive names! You might also want to free the y-axis of the plots, since there are substantial differences in the sample sizes between the simulations.\nFor extra pizzazz, add a vertical line for true mean (for a Chi-Square the mean is the degrees of freedom)."
  },
  {
    "objectID": "labs/instructions/lab-9-instructions.html#challenge-9",
    "href": "labs/instructions/lab-9-instructions.html#challenge-9",
    "title": "Lab 9: Data Simulation Exploration",
    "section": "Challenge 9",
    "text": "Challenge 9\nInstructions for the challenge can be found on the course website or through the link in Canvas!"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#view-original-data",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#view-original-data",
    "title": "Master Script Data Processing",
    "section": "View Original Data",
    "text": "View Original Data"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#filter-just-us-based-jobs",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#filter-just-us-based-jobs",
    "title": "Master Script Data Processing",
    "section": "Filter Just US Based Jobs",
    "text": "Filter Just US Based Jobs"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#filter-out-entry-level-jobs-only",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#filter-out-entry-level-jobs-only",
    "title": "Master Script Data Processing",
    "section": "Filter out entry level jobs only",
    "text": "Filter out entry level jobs only"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#count-of-positions-by-remote-work-and-company-size",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#count-of-positions-by-remote-work-and-company-size",
    "title": "Master Script Data Processing",
    "section": "Count of positions by Remote Work and Company Size",
    "text": "Count of positions by Remote Work and Company Size"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#graph-of-remote-work-and-company-size",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#graph-of-remote-work-and-company-size",
    "title": "Master Script Data Processing",
    "section": "Graph of Remote Work and Company Size",
    "text": "Graph of Remote Work and Company Size"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#group-and-calculate-average-salary-by-year",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#group-and-calculate-average-salary-by-year",
    "title": "Master Script Data Processing",
    "section": "Group and Calculate Average Salary by year",
    "text": "Group and Calculate Average Salary by year"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#tuesday-september-24",
    "href": "slides/week-1/week-1-intro-R.html#tuesday-september-24",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Tuesday, September 24",
    "text": "Tuesday, September 24\nToday we will…\n\nWelcome to Stat 331 / 531: Statistical Computing in R\nIntroductions (Me + You)\nCourse Layout\nBasics of R\nGroup collaboration warm-up\nData wrangling / visualization puzzle"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#hi-im-dr.-theobold",
    "href": "slides/week-1/week-1-intro-R.html#hi-im-dr.-theobold",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Hi, I’m Dr. Theobold!",
    "text": "Hi, I’m Dr. Theobold!\n\n\n\n\nI am originally from Colorado, but went to grad school in Montana.\nMy favorite things are being outside, drinking coffee, and watching women’s basketball.\n\n\n\n\n\n\n\n\n\n\n\n\nI love cats!\nI’ve been programming in R since 2014!\nI absolutely love teaching this course!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#on-a-personal-note",
    "href": "slides/week-1/week-1-intro-R.html#on-a-personal-note",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "On a personal note…",
    "text": "On a personal note…\n\n\nI prefer you refer to me as “Dr. Glanz”, or “Dr. G”, or “Professor Glanz.”\n\n\n\nI use he / him pronouns. If you are not sure what this means, I’d encourage you to read more about gender identity and pronouns. 🙂"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#our-classroom-learning-assistant",
    "href": "slides/week-1/week-1-intro-R.html#our-classroom-learning-assistant",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Our Classroom Learning Assistant!",
    "text": "Our Classroom Learning Assistant!\nWe will be joined in class by Jasmine.\n\nJasmine is…\n\na forth-year Statistics major pursuing a Data Science minor,\noriginally from Irvine, CA,\nsomeone who loves sushi, hanging out with friends, watching Netflix, and working out."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#you",
    "href": "slides/week-1/week-1-intro-R.html#you",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "You!",
    "text": "You!\nI am looking forward to reading your introductions on Discord!\n\nPlease read the intros of your classmates so you can discover who you will be learning with this quarter!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#beginning-of-the-week",
    "href": "slides/week-1/week-1-intro-R.html#beginning-of-the-week",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Beginning of the Week",
    "text": "Beginning of the Week\n\nBefore Tuesday’s ClassDuring Class on TuesdayAfter Tuesday’s Class\n\n\n\nLook over the coursework page\nRead the required chapter(s)\nWatch the required video(s)\nComplete the Check-ins\n\n\n\n\nReview chapter content\nAsk clarifying questions\nDiscuss example analyses \n\n\n\n\n\nComplete any additional reading / videos / Check-ins"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#end-of-the-week",
    "href": "slides/week-1/week-1-intro-R.html#end-of-the-week",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "End of the Week",
    "text": "End of the Week\n\nDuring Class on ThursdayAfter Thursday’s Class\n\n\n\n\nWarm-up review\nStart Lab Assignment\n\n\n\n\nFinish remaining problems of the Lab Assignment\nComplete Challenge Assignment\n\n\n\n\n\n\n\nLabs & Challenges Due Sunday by Midnight\n\n\nTo keep everyone on track with the coursework, your Lab and Challenges are due by midnight every Sunday."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#data-types",
    "href": "slides/week-1/week-1-intro-R.html#data-types",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Data Types",
    "text": "Data Types\n\nA value is a basic unit of stuff that a program works with.\nValues are allowed to have different data types:\n\n\n\nlogical / boolean: FALSE / TRUE or 0 / 1 values.\n\n\n\n\ninteger: whole numbers.\n\n\n\n\ndouble / float / numeric: decimal numbers.\n\n\n\n\ncharacter / string - text values."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#variables",
    "href": "slides/week-1/week-1-intro-R.html#variables",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Variables",
    "text": "Variables\n\nare names that refer to values.\n\n\n\n\nA variable is like a container that holds something - when you refer to the container, you get whatever is stored inside.\nWe assign values to variables using the syntax object_name &lt;- value.\n\nThis can be read as “object name gets value.”\n\n\n\n\n\n\nmessage &lt;- \"So long and thanks for all the fish\"\nyear &lt;- 2025\nthe_answer &lt;- 42.5\nearth_demolished &lt;- FALSE"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#data-structures",
    "href": "slides/week-1/week-1-intro-R.html#data-structures",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Data Structures",
    "text": "Data Structures\n\nHomogeneousHeterogeneous\n\n\n\nevery element has the same data type\n\n\nVector: a one-dimensional column of homogeneous data.\nMatrix: the next step after a vector - it’s a set of homogenous data arranged in a two-dimensional, rectangular format.\n\n\n\n\nelements can be of different types\n\n\nList: a one-dimensional column of heterogeneous data.\nDataframe: a two-dimensional set of heterogeneous data arranged in a rectangular format."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#indexing",
    "href": "slides/week-1/week-1-intro-R.html#indexing",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Indexing",
    "text": "Indexing\nWe use square brackets ([]) to access elements within data structures.\n\nIn R, we start indexing from 1.\n\n\nVectorMatrixListDataframe\n\n\n\nvec[4]    # 4th element\nvec[1:3]  # first 3 elements\n\n\n\n\nmat[2, 6]  # element in row 2, col 6\nmat[ , 3]   # all elements in col 3\n\n\n\n\nli[[5]]    # 5th element\nli$elementName # all elements in \"elementName\"\n\n\n\n\ndf[1, 2]     # element in row 1, col 2\ndf[17, ]     # all elements in row 17\ndf$colName  # all elements in the col named \"colName\""
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#logic",
    "href": "slides/week-1/week-1-intro-R.html#logic",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Logic",
    "text": "Logic\nWe can combine logical statements using and, or, and not.\n\n(X AND Y) requires that both X and Y are true.\n(X OR Y) requires that one of X or Y is true.\n(NOT X) is true if X is false, and false if X is true.\n\n\n\nx &lt;- c(TRUE, FALSE, TRUE, FALSE)\ny &lt;- c(TRUE, TRUE, FALSE, FALSE)\n\n\nAndOrNot\n\n\n\nx & y\n\n[1]  TRUE FALSE FALSE FALSE\n\n\n\n\n\nx | y\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\n\n\n\n!x\n\n[1] FALSE  TRUE FALSE  TRUE"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#broken-circles",
    "href": "slides/week-1/week-1-intro-R.html#broken-circles",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Broken Circles",
    "text": "Broken Circles\n\n\n\nTo set the stage for your future group collaborations, we will complete an activity that explores how working in groups can be more / less successful.\nLet’s start by dividing the class into groups of 6 students."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#activity-guidelines",
    "href": "slides/week-1/week-1-intro-R.html#activity-guidelines",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Activity Guidelines",
    "text": "Activity Guidelines\n\nNo talking or other noises!\nNo pointing or hand signals!\nNo taking pieces. You may only give pieces to others.\n\nYour group is finished once everyone has a complete circle."
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#discussion",
    "href": "slides/week-1/week-1-intro-R.html#discussion",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Discussion",
    "text": "Discussion\n\nWhat do you think this game was about? What was its purpose?\nWhat did your group did that made you cooperate more successfully?\nWhat did your group did that made cooperation harder?\nWhat are some behaviors that could be implemented in the future to make cooperation easier?"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#consent-to-participate",
    "href": "slides/week-1/week-1-intro-R.html#consent-to-participate",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Consent to Participate",
    "text": "Consent to Participate\n\n\nIf you agree to participate…\n\nyou will be recorded once a week for 10-weeks while participating in pair programming to complete collaborative tasks.\nyou will complete a pre- and post-survey about your prior computing experiences and your attitudes toward data science.\n\n\n\n\n\n\nYour participation in this research will not affect your course grade.\n\n\n\n\n\n\n\n\n\nConsent Form\n\n\nPlease complete the consent form (https://forms.gle/oax73hoe7uRSVLYw8) by Monday, 9/30."
  },
  {
    "objectID": "group-activities/week-8/PA-8-iteration.html",
    "href": "group-activities/week-8/PA-8-iteration.html",
    "title": "PA 8: The 12 Days of Christmas",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "group-activities/week-8/PA-8-iteration.html#introduction",
    "href": "group-activities/week-8/PA-8-iteration.html#introduction",
    "title": "PA 8: The 12 Days of Christmas",
    "section": "Introduction",
    "text": "Introduction\nThe song “12 Days of Christmas”, written around 1780, tells the tale of many gifts a person receives in the days leading up to Christmas.\nThese gifts repeat and compound; on the first day, the narrator receives\nA partridge in a pear tree.\nOn the twelfth day, they receive\nTwelve Drummers Drumming\nEleven Pipers Piping\nTen Lords a Leaping\nNine Ladies Waiting\nEight Maids a Milking\nSeven Swans a Swimming\nSix Geese a Laying\nFive Golden Rings\nFour Calling Birds\nThree French Hens\nTwo Turtle Doves\nAnd a Partridge in a Pear Tree\nThis week, your task will be to write functions that automatically sing this very repetitive song. In the practice activity, we will start by writing two helper functions which we will use later to write a function which sings the entire song.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html",
    "href": "labs/instructions/lab-4-instructions.html",
    "title": "Lab 4: Childcare Costs in California",
    "section": "",
    "text": "You can access the Lab 4 materials through the Lab 4 assignment on GitHub Classroom. We’re going to follow the same steps as last week to make your own copy of this repository:\n\n\n\n\n\n\n\nSame process as last week!\n\n\n\n\n\nUse these steps to make a copy of the Lab repository: List of Steps to Copy the Lab Assignment from GitHub Classroom\n\n\n\n\n\n\nNow, find the lab-4-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).\n\n\n\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-4-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-1-making-a-copy-from-github-classroom",
    "href": "labs/instructions/lab-4-instructions.html#step-1-making-a-copy-from-github-classroom",
    "title": "Lab 4: Childcare Costs in California",
    "section": "",
    "text": "You can access the Lab 4 materials through the Lab 4 assignment on GitHub Classroom. We’re going to follow the same steps as last week to make your own copy of this repository:\n\n\n\n\n\n\n\nSame process as last week!\n\n\n\n\n\nUse these steps to make a copy of the Lab repository: List of Steps to Copy the Lab Assignment from GitHub Classroom",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-4-instructions.html#step-2-making-a-small-change",
    "title": "Lab 4: Childcare Costs in California",
    "section": "",
    "text": "Now, find the lab-4-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-4-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 4: Childcare Costs in California",
    "section": "",
    "text": "Now for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-4-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#california-childcare-costs",
    "href": "labs/instructions/lab-4-instructions.html#california-childcare-costs",
    "title": "Lab 4: Childcare Costs in California",
    "section": "California Childcare Costs",
    "text": "California Childcare Costs\nLet’s start by focusing only on California.\n2. Create a ca_childcare dataset of childcare costs in California, containing (1) county information and (2) all information from the childcare_costs dataset. Hint: There are 58 counties in CA and 11 years in the dataset. Therefore, your new dataset should have 53 x 11 = 638 observations.\n3. Using a function from the forcats package, complete the code below to create a new variable where each county is categorized into one of the ten (10) Census regions in California. Use the Region description (from the plot), not the Region number.\nHint: This is probably a good place to use ChatGPT to reduce on tedious work. But you do need to know how to prompt ChatGPT to make it useful!\n\n\n\n\n\n\nTip\n\n\n\nI have provided you with code that eliminates the word “County” from each of the county names in your ca_childcare dataset. You should keep this line of code and pipe into the rest of your data manipulations.\nYou will learn about the str_remove() function from the stringr package next week!\n\n\n\nca_childcare &lt;- ca_childcare |&gt; \n  mutate(county_name = str_remove(county_name, \" County\")) |&gt;\n  ...\n\n4. Let’s consider the median household income of each region, and how that income has changed over time. Create a table with ten rows, one for each region, and two columns, one for 2008 and one for 2018. The cells should contain the median of the median household income (expressed in 2018 dollars) of the region and the study_year. Arrange the rows by 2018 values.\n\n\n\n\n\n\nTip\n\n\n\nThis will require transforming your data! Sketch out what you want the data to look like before you begin to code. You should be starting with your California dataset that contains the regions!\n\n\n5. Which California region had the lowest median full-time median weekly price for center-based childcare for infants in 2018? Does this region correspond to the region with the lowest median income in 2018 that you found in Q4?\n\n\n\n\n\n\nWarning\n\n\n\nThe code should give me the EXACT answer. This means having the code output the exact row(s) and variable(s) necessary for providing the solution.\n\n\n6. The following plot shows, for all ten regions, the change over time of the full-time median price for center-based childcare for infants, toddlers, and preschoolers. Recreate the plot. You do not have to replicate the exact colors or theme, but your plot should have the same content, including the order of the facets and legend, reader-friendly labels, axes breaks, and a loess smoother.\n\n\n\n\n\n\nTip\n\n\n\nThis will require transforming your data! Sketch out what you want the data to look like before you begin to code. You should be starting with your California dataset that contains the regions.\nYou will also be required to use functions from forcats to change the labels and the ordering of your factor levels.\nRemember to avoid “object junk” in your environment!\n\n\n\n\n\nPlot to recreate",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#median-household-income-vs.-childcare-costs-for-infants",
    "href": "labs/instructions/lab-4-instructions.html#median-household-income-vs.-childcare-costs-for-infants",
    "title": "Lab 4: Childcare Costs in California",
    "section": "Median Household Income vs. Childcare Costs for Infants",
    "text": "Median Household Income vs. Childcare Costs for Infants\n\n\n\n\n\n\nRefresher on Linear Regression\n\n\n\nWhile a second course in statistics is a pre-requisite for this class, here is a refresher on simple linear regression with a single predictor.\n\n\n7. Create a scatterplot showing the relationship between median household income (expressed in 2018 dollars) and the full-time median weekly price charged for center-based childcare for an infant in California. Overlay a linear regression line (lm) to show the trend.\n8. Look up the documentation for lm() and fit a linear regression model to the relationship shown in your plot above.\n\n# complete the code provided\nreg_mod1 &lt;- lm()\nsummary(reg_mod1)\n\n9. Using the output from summary(), write out the estimated regression line (recall: \\(y = mx + b\\)).\n10. Do you have evidence to conclude there is a relationship between the median household income and the median weekly cost of center-based childcare for infants in California? Cite values from your summary() output to support your claim!",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#there-is-no-challenge-this-week",
    "href": "labs/instructions/lab-4-instructions.html#there-is-no-challenge-this-week",
    "title": "Lab 4: Childcare Costs in California",
    "section": "There is no Challenge this week!",
    "text": "There is no Challenge this week!\nPlease take this time to try your best to recreate the plot I provided in Question 6!\n\nCan you match my colors?\nCan you get the legend in the same order?\nCan you get the facet names to match and be in the same order?\n\nCould you even make the plot better? Could you add dollar signs to the y-axis labels? I might suggest you look into the scales package.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "weeks/week-5-strings-dates.html",
    "href": "weeks/week-5-strings-dates.html",
    "title": "Special Data Types",
    "section": "",
    "text": "This week is all about special data types in R. Similar to the tools you learned last week for working with factors, this week you are going to learn about tools for working with strings and dates. By the end of this week you should be able to:"
  },
  {
    "objectID": "weeks/week-5-strings-dates.html#regular-expressions",
    "href": "weeks/week-5-strings-dates.html#regular-expressions",
    "title": "Special Data Types",
    "section": "1.1 Regular Expressions",
    "text": "1.1 Regular Expressions\nMatching exact strings is easy - it’s just like using find and replace.\n\nlibrary(stringr)\n\nhuman_talk &lt;- \"blah, blah, blah. Do you want to go for a walk?\"\ndog_hears &lt;- str_extract(human_talk, \"walk\")\ndog_hears\n\n[1] \"walk\"\n\n\nBut, if you can master even a small amount of regular expression notation, you’ll have exponentially more power to do good (or evil) when working with strings. You can get by without regular expressions if you’re creative, but often they’re much simpler.\n\n📖 Recommended Reading: R4DS Chapter 15 (Regular Expressions)\n\n\n\n\n\n\nRead at least through Section 15.4.1.\n\n\n\n\n\n\n\n\n\n\n\n\nShort Regular Expressions Primer\n\n\n\n\n\nYou may find it helpful to follow along with this section using this web app built to test R regular expressions. The subset of regular expression syntax we’re going to cover here is fairly limited, but you can find regular expressions to do just about anything string-related. As with any tool, there are situations where it’s useful, and situations where you should not use a regular expression, no matter how much you want to.\nHere are the basics of regular expressions:\n\n[] enclose sets of characters\nFor example, [abc] will match any single character a, b, c\n- specifies a range of characters (A-z matches all upper and lower case letters)\n. matches any character (except a newline)\nTo match special characters, escape them using \\ (in most languages) or \\\\ (in R). So \\. or \\\\. will match a literal ., \\$ or \\\\$ will match a literal $.\n\n\nnum_string &lt;- \"phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789\"\n\nstr_extract(num_string, \"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\")\n\n[1] \"123-45-6789\"\n\n\nRepeating Patterns\nListing out all of those numbers can get repetitive, though. How do we specify repetition?\n\n* means repeat between 0 and inf times\n+ means 1 or more times\n? means 0 or 1 times – most useful when you’re looking for something optional\n{a, b} means repeat between a and b times, where a and b are integers. `\nNote that b can be blank. So [abc]{3,} will match abc, aaaa, cbbaa, but not ab, bb, or a.\nFor a single number of repeated characters, you can use {a}. So {3, } means “3 or more times” and {3} means “exactly 3 times”\n\n\nnum_string &lt;- \"phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789\"\n\n# Matches a sequence of *three* numbers, followed by a dash, \n# then a sequence of *two* numbers, followed by a dash, \n# then a sequence of *four* numbers, followed by a dash.\nssn &lt;- str_extract(num_string, \"[0-9]{3}-[0-9]{2}-[0-9]{4}\")\nssn\n\n[1] \"123-45-6789\"\n\n# Matches a sequence of *three* numbers, followed by any character, \n# then a sequence of *three* numbers, followed by any character, \n# then a sequence of *four* numbers, followed by any character, \nphone &lt;- str_extract(num_string, \"[0-9]{3}.[0-9]{3}.[0-9]{4}\")\nphone\n\n[1] \"123-456-7890\"\n\n# Matches a sequence of *eight* numbers \nnuid &lt;- str_extract(num_string, \"[0-9]{8}\")\nnuid\n\n[1] \"12345678\"\n\n\nAnchoring\nThere are also ways to “anchor” a pattern to a part of the string (e.g. the beginning or the end)\n\n^ has multiple meanings:\n\nif it’s the first character in a pattern, ^ matches the beginning of a string\nif it follows [, e.g. [^abc], ^ means “not” - for instance, “the collection of all characters that aren’t a, b, or c”.\n\n$ means the end of a string\n\nCombined with pre and post-processing, these let you make sense out of semi-structured string data, such as addresses.\n\naddress &lt;- \"1600 Pennsylvania Ave NW, Washington D.C., 20500\"\n\n# Match a sequence of one or more digits at the beginning of the string\nhouse_num &lt;- str_extract(address, \"^[0-9]{1,}\")\nhouse_num\n\n[1] \"1600\"\n\n# Match everything alphanumeric up to the comma\nstreet &lt;- str_extract(address, \"[A-z0-9 ]{1,}\")\n# Remove house number from street address\nstreet &lt;- str_remove(street, house_num) |&gt; \n  # Trim any leading or trailing whitespace from remaining string\n  str_trim() \nstreet\n\n[1] \"Pennsylvania Ave NW\"\n\n# Match one or more characters between the two commas  \ncity &lt;- str_extract(address, \",.+,\") |&gt; \n  # Remove the leading and trailing commas\n  str_remove_all(\",\") |&gt; \n  # Trim any leading or trailing whitespace from remaining string\n  str_trim()\ncity\n\n[1] \"Washington D.C.\"\n\n# Matches both 5 and 9 digit zip codes found at the end of the string\nzip &lt;- str_extract(address, \"[0-9-]{5,10}$\") \nzip\n\n[1] \"20500\"\n\n\nMaking Groups\n\n() are used to capture information. So ([0-9]{4}) captures any 4-digit number\na|b will select a or b.\n\nIf you’ve captured information using (), you can reference that information using back references. In most languages, those look like this: \\1 for the first reference, \\9 for the ninth. In R, back references are \\\\1 through \\\\9, because the \\ character is special, so you have to escape it.\n\nphone_num_variants &lt;- c(\"(123) 456-7980\", \"123.456.7890\", \"+1 123-456-7890\")\n\nphone_regex &lt;- \"\\\\+?[0-9]{0,3}? ?\\\\(?([0-9]{3})?\\\\)?.?([0-9]{3}).?([0-9]{4})\"\n# \\\\+?[0-9]{0,3} matches the country code, if specified, \n#    but won't take the first 3 digits from the area code \n#    unless a country code is also specified\n# \\\\( and \\\\) match literal parentheses if they exist\n# ([0-9]{3})? captures the area code, if it exists\n# .? matches any character\n# ([0-9]{3}) captures the exchange code\n# ([0-9]{4}) captures the 4-digit individual code\n\nstr_extract(phone_num_variants, phone_regex)\n\n[1] \"(123) 456-7980\"  \"123.456.7890\"    \"+1 123-456-7890\"\n\n# We didn't capture the country code, so it remained in the string\n\nhuman_talk &lt;- \"blah, blah, blah. Do you want to go for a walk? I think I'm going to treat myself to some ice cream for working so hard. \"\ndog_hears &lt;- str_extract_all(human_talk, \"walk|treat\")\ndog_hears\n\n[[1]]\n[1] \"walk\"  \"treat\"\n\n\nPutting it all together, we can test our regular expressions to ensure that they are specific enough to pull out what we want, while not pulling out other similar information:\n\nstrings &lt;- c(\"abcdefghijklmnopqrstuvwxyzABAB\",\n             \"banana orange strawberry apple\",\n             \"ana went to montana to eat a banana\",\n             \"call me at 432-394-2873. Do you want to go for a walk? I'm going to treat myself to some ice cream for working so hard.\",\n             \"phone: (123) 456-7890, nuid: 12345678, bank account balance: $50,000,000.23\",\n             \"1600 Pennsylvania Ave NW, Washington D.C., 20500\")\n\nphone_regex &lt;- \"\\\\+?[0-9]{0,3}? ?\\\\(?([0-9]{3})?\\\\)?.?([0-9]{3}).([0-9]{4})\"\ndog_regex &lt;- \"(walk|treat)\"\naddr_regex &lt;- \"([0-9]*) ([A-z0-9 ]{3,}), ([A-z\\\\. ]{3,}), ([0-9]{5})\"\n# Find patterns where two characters are repeated\nabab_regex &lt;- \"(..)\\\\1\"\n\n# Create a table for whether each regex was detected in each string\ntibble(\n  text = strings,\n  phone = str_detect(strings, phone_regex),\n  dog = str_detect(strings, dog_regex),\n  addr = str_detect(strings, addr_regex),\n  abab = str_detect(strings, abab_regex)\n  )\n\n# A tibble: 6 × 5\n  text                                                   phone dog   addr  abab \n  &lt;chr&gt;                                                  &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 abcdefghijklmnopqrstuvwxyzABAB                         FALSE FALSE FALSE TRUE \n2 banana orange strawberry apple                         FALSE FALSE FALSE TRUE \n3 ana went to montana to eat a banana                    FALSE FALSE FALSE TRUE \n4 call me at 432-394-2873. Do you want to go for a walk… TRUE  TRUE  FALSE FALSE\n5 phone: (123) 456-7890, nuid: 12345678, bank account b… TRUE  FALSE FALSE FALSE\n6 1600 Pennsylvania Ave NW, Washington D.C., 20500       FALSE FALSE TRUE  FALSE\n\n\n\n\n\n\n\n✅ Check-in 5.1: Functions from stringr\n1 Which of the follow are differences between length() and str_length()?\n\nlength() gives the number of elements in a vector\nstr_length() gives the number of characters in a string\nstr_length() gives the number of strings in a vector\nlength() gives the dimensions of a dataframe\n\n2 What of the following is true about str_replace()?\n\nstr_replace() replaces the first instance of the pattern\nstr_replace() replaces the last instance of the pattern\nstr_replace() replaces every instance of the pattern\n\n3 str_trim() allows you to remove whitespace on what sides\n\nleft\nright\nboth\n\n4 Which of the following does str_sub() use to create a substring?\n\nstarting position\nending position\npattern to search for\n\n5 Which of the following does str_subset() use to create a substring?\n\nstarting position\nending position\npattern to search for\n\n6 What does the collapse argument do in str_c()?\n\nspecifies a string to be used when combining inputs into a single string\nspecifies whether the string should be collapsed"
  },
  {
    "objectID": "group-activities/week-1/base-r.html",
    "href": "group-activities/week-1/base-r.html",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "",
    "text": "Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nSome advice:"
  },
  {
    "objectID": "group-activities/week-1/base-r.html#part-zero-accessing-the-practice-activity",
    "href": "group-activities/week-1/base-r.html#part-zero-accessing-the-practice-activity",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Zero: Accessing the Practice Activity",
    "text": "Part Zero: Accessing the Practice Activity"
  },
  {
    "objectID": "group-activities/week-1/base-r.html#part-one-setup",
    "href": "group-activities/week-1/base-r.html#part-one-setup",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and / or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", \"\"\", \"(\", \")\", \" \", \"-\", \";\", \":\")\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- cbind(lower_case, upper_case, punctuation)\n\n\nTurn the my_symbols vector into a data frame, with one column named “Symbol”.\n\n\nmy_symbols &lt;- dataframe(Symbol = my_symbols)\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_symbols)\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num &lt;- 1:len"
  },
  {
    "objectID": "group-activities/week-1/base-r.html#part-two-decoding-the-secret-message.",
    "href": "group-activities/week-1/base-r.html#part-two-decoding-the-secret-message.",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret &lt;- read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", \n                       col_names = FALSE)$X1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, in the order given below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nUse the exp() function to exponentiate every number.\nSquare every number.\n\nHint: To update a vector after performing an operation, you overwrite the existing object with its updated counterpart. This looks something like this:\nx &lt;- x + 12,\nwhere the original value(s) in x have had 12 added to them, and the resulting values are put back in to the object named x.\n\n## Code to carry out steps 6-9 \n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your top_secret object!\nHint: This is what is called a “relational” comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.\n\n# Write code to verify that there are 352 numbers with values **below** 17\n\nNext, carry out the following steps:\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\n\n## Code to carry out steps 10-15\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your top_secret object!\nHint: Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!\n\n# Write code to verify that indices 500 and beyond have values **below** 100\n\n\nTake the square root of all numbers in indices 38 to 465.\nUse the round() function to round all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nHint: Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign!\n\n# Code for steps 16-18\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers.\nHint: Checking for divisibility is an interesting operation that isn’t done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!\n\n# Code to verify how many even numbers are in your top_secret vector"
  },
  {
    "objectID": "group-activities/week-1/base-r.html#part-3-the-secret-message",
    "href": "group-activities/week-1/base-r.html#part-3-the-secret-message",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:\n\nstringr::str_c(my_symbols$Symbol[top_secret], collapse = \"\")\n\nGoogle the first line of this message, if you do not recognize it, to see what poem it is."
  },
  {
    "objectID": "weeks/week-9-simulation.html",
    "href": "weeks/week-9-simulation.html",
    "title": "Distributions and Simulation",
    "section": "",
    "text": "Welcome to the final week of content! This week you will learn about simulating data in R. By the end of the week you should:",
    "crumbs": [
      "Weekly materials",
      "Week 9 - Simulating Data"
    ]
  },
  {
    "objectID": "weeks/week-9-simulation.html#simulation-in-r",
    "href": "weeks/week-9-simulation.html#simulation-in-r",
    "title": "Distributions and Simulation",
    "section": "1 Simulation in R",
    "text": "1 Simulation in R\n\n📖 Required Reading: R Programming for Data Science : Simulation\n\n\n\n\n\n✅: Check-in 9.1: Distributions & Simulation\nQuestion 1: What does the output of pnorm(-4, mean = 2, sd = 4) mean?\n\n\n\n\n\n\nTip\n\n\n\nDrawing pictures of the relevant distribution may help.\n\n\nQuestion 2: Why does rnorm(mean = 0, sd = 1) give an error?\nQuestion 3: What does map(-2:2, rnorm, n = 5) do?\nQuestion 4: Why does map_chr(-2:2, rnorm, n = 5) result in an error?\nQuestion 5: The output of map(1:5, runif) is a [vector  list] with ___ elements. The third element is a [vector / list] with ___ random draw(s) from a Uniform distribution with min = ___ and max = ___.\n\n\nSetting a Random Number Seed\nFunctions like rnorm() rely on something called pseudo-randomness. Because computers can never be truly random, complicated processes are implemented to make “random” number generation be so unpredictable as to behave like true randomness.\nThis means that projects involving simulation are harder to make reproducible. For example, here are two identical lines of code that give different results!\n\nrnorm(1, mean = 0, sd = 1)\n\n[1] -0.2364802\n\n\n\nrnorm(1, mean = 0, sd = 1)\n\n[1] -0.4066328\n\n\nFortunately, pseudo-randomness depends on a seed, which is an arbitrary number where the randomizing process starts. Normally, R will choose the seed for you, from a pre-generated vector:\n\nhead(.Random.seed)\n\n[1]      10403          7 -753766091 -819506996  229603874 -989416323\n\n\nHowever, you can also choose your own seed using the set.seed() function. This guarantees your results will be consistent across runs (and hopefully computers):\n\nset.seed(1234)\n\nrnorm(1, mean = 0, sd = 1)\n\n[1] -1.207066\n\n\n\nset.seed(1234)\n\nrnorm(1, mean = 0, sd = 1)\n\n[1] -1.207066\n\n\nOf course, it doesn’t mean the results will be the same in every subsequent run if you forget or reset the seed in between each line of code!\n\nset.seed(1234)\n\nrnorm(1, mean = 0, sd = 1)\n\n[1] -1.207066\n\n## Calling rnorm() again without a seed \"resets\" the seed! \nrnorm(1, mean = 0, sd = 1)\n\n[1] 0.2774292\n\n\nIt is very important to always set a seed at the beginning of a Quarto document that contains any random steps, so that your rendered results are consistent.\n\n\n\n\n\n\nCaution\n\n\n\nNote, though, that this only guarantees your rendered results will be the same if the code has not changed.\nChanging up any part of the code will re-randomize everything that comes after it!\n\n\nWhen writing up a report which includes results from a random generation process, in order to ensure reproducibility in your document, use `{r}` or `r` to include your output within your written description with inline code.\n\n\n\n\n\n\nReproducibility: inline code example\n\n\n\n\n\n\nmy_rand &lt;- rnorm(1, mean = 0, sd = 1)\nmy_rand\n\n[1] 1.084441\n\n\nUsing `r my_rand` will display the result within my text:\nMy random number is 1.0844412.\nAlternatively, you could have put the rnorm code directly into the inline text `r rnorm(1, mean = 0, sd = 1)`, but this can get messy if you have a result that requires a larger chunk of code.",
    "crumbs": [
      "Weekly materials",
      "Week 9 - Simulating Data"
    ]
  },
  {
    "objectID": "weeks/week-9-simulation.html#plotting-distributions",
    "href": "weeks/week-9-simulation.html#plotting-distributions",
    "title": "Distributions and Simulation",
    "section": "2 Plotting Distributions",
    "text": "2 Plotting Distributions\nHere is the code that made one of the plots from the lecture video:\n\nmy_samples &lt;- tibble(height = rnorm(n = 100, \n                                    mean = 67, \n                                    sd = 3)\n                     )\n\nmy_samples %&gt;%\n  ggplot(aes(x = height)) +\n  geom_histogram(aes(y = ..density..), \n                 binwidth = 1.75, fill = \"grey\") +\n  stat_function(fun = ~ dnorm(., mean = 67, sd = 3), \n                col = \"cornflowerblue\", lwd = 2) + \n  xlim(c(55, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding a distribution to a plot\n\n\n\nNotice how I’m using stat_function() to add a specific function to the plot. Here, I’m using the dnorm() function, with a specified mean and sd.",
    "crumbs": [
      "Weekly materials",
      "Week 9 - Simulating Data"
    ]
  },
  {
    "objectID": "labs/instructions/challenge-7-instructions.html",
    "href": "labs/instructions/challenge-7-instructions.html",
    "title": "Challenge 7: Incorporating Multiple Inputs",
    "section": "",
    "text": "A frequently used measurement for fish health is a condition index (Wikipedia article). The following simple equation can be used to calculate the approximate condition index of a fish:\n\\[\\text{condition index} = \\frac{weight}{length^3} \\times 100\\]\n1. There are specific units required for the calculation of a condition index – length must be in centimeters and weight must be in grams. The weight data for the Blackfoot River fish were collected in grams; the length data were collected in millimeters. Transform the length data to the correct units.\n2. Collecting data of this sort can be very messy! Write a function that will replace unlikely length and weight measurements with NA. Your function should accept at least three inputs:\n\na vector of measurements,\nthe minimum reasonable value,\nthe maximum reasonable value.\n\nIf a value falls outside these bounds, you should replace it with an NA.\n\n\n\n\n\n\nTip\n\n\n\nIf you are struggling with the structure of your function, I would suggest reading the Mutating Function from R4DS.\n\n\n3. After consulting the Montana Record Table for the four species of trout included in these data, I have conjectured that it is unlikely to have measurements for fish below 5 cm and above 80 cm in length or below 10 g and above 4,000 g in weight. Use your function to modify the length and weight columns of the fish dataset based on my cutoffs.\n4. Write a function to calculate the condition index of a fish, given inputs of weight and length.\n\n\n\n\n\n\nWarning\n\n\n\nConsider whether you will write a function that works with vectors (accepting vectors as inputs) or a function that works with data frames (accepting a dataset and variable names as inputs)!\n\n\n5. Make a thoughtful visualization of how fish conditions have varied over the duration of this study.\n\n\n\n\n\n\nTo be thoughtful…\n\n\n\n… you need to use at least a third variable!"
  },
  {
    "objectID": "labs/instructions/challenge-7-instructions.html#condition-index",
    "href": "labs/instructions/challenge-7-instructions.html#condition-index",
    "title": "Challenge 7: Incorporating Multiple Inputs",
    "section": "",
    "text": "A frequently used measurement for fish health is a condition index (Wikipedia article). The following simple equation can be used to calculate the approximate condition index of a fish:\n\\[\\text{condition index} = \\frac{weight}{length^3} \\times 100\\]\n1. There are specific units required for the calculation of a condition index – length must be in centimeters and weight must be in grams. The weight data for the Blackfoot River fish were collected in grams; the length data were collected in millimeters. Transform the length data to the correct units.\n2. Collecting data of this sort can be very messy! Write a function that will replace unlikely length and weight measurements with NA. Your function should accept at least three inputs:\n\na vector of measurements,\nthe minimum reasonable value,\nthe maximum reasonable value.\n\nIf a value falls outside these bounds, you should replace it with an NA.\n\n\n\n\n\n\nTip\n\n\n\nIf you are struggling with the structure of your function, I would suggest reading the Mutating Function from R4DS.\n\n\n3. After consulting the Montana Record Table for the four species of trout included in these data, I have conjectured that it is unlikely to have measurements for fish below 5 cm and above 80 cm in length or below 10 g and above 4,000 g in weight. Use your function to modify the length and weight columns of the fish dataset based on my cutoffs.\n4. Write a function to calculate the condition index of a fish, given inputs of weight and length.\n\n\n\n\n\n\nWarning\n\n\n\nConsider whether you will write a function that works with vectors (accepting vectors as inputs) or a function that works with data frames (accepting a dataset and variable names as inputs)!\n\n\n5. Make a thoughtful visualization of how fish conditions have varied over the duration of this study.\n\n\n\n\n\n\nTo be thoughtful…\n\n\n\n… you need to use at least a third variable!"
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html",
    "href": "group-activities/week-2/PA-2-ggplot.html",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "",
    "text": "Today you will be exploring different types of visualizations to uncover which species of penguins reside on different islands.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.\nSome advice: If you aren’t sure how to make a specific plot or how to customize a look over the class text for this week and make use of the ggplot2 cheatsheet."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#groupwork-protocols",
    "href": "group-activities/week-2/PA-2-ggplot.html#groupwork-protocols",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-1-install-the-palmerpenguins-package",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-1-install-the-palmerpenguins-package",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 1: Install the palmerpenguins Package",
    "text": "Step 1: Install the palmerpenguins Package\nWe will be creating visualizations using the ggplot2 package.\nFor this activity, we will be exploring the penguins data from the palmerpenguins package, which has fantastic documentation with really awesome artwork. So, you will need to install the palmerpenguins package. Run the following code in your console:\ninstall.packages(\"palmerpenguins\")"
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-2-create-a-set-up-code-chunk",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-2-create-a-set-up-code-chunk",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 2: Create a Set-up Code Chunk",
    "text": "Step 2: Create a Set-up Code Chunk\n\nLocate the code chunk at the beginning of your document (directly under the YAML).\nName the code chunk setup (with the hashpipe #|)\nSpecify the code chunk options (with the hashpipe #|) that the messages from loading in the packages should not be included.\nLoad in the tidyverse or ggplot2 package.\nLoad in the palmerpenguins package."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-3-accessing-the-penguins-dataset",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-3-accessing-the-penguins-dataset",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 3: Accessing the penguins Dataset",
    "text": "Step 3: Accessing the penguins Dataset\nI like to tangibly see the data set I will be working with so let’s pull the penguins data into the R environment. Run the code below and you should see the penguins data appear in the top right Environment tab.\n\ndata(penguins)\n\nWarning in data(penguins): data set 'penguins' not found"
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-4-get-to-know-the-data",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-4-get-to-know-the-data",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 4: Get to Know the Data",
    "text": "Step 4: Get to Know the Data\nWhat variables are included in these data? What units are the variables measured in? What does each row represent?"
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-5-barchart",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-5-barchart",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 5: Barchart",
    "text": "Step 5: Barchart\nUse ggplot2 to draw a barchart of different species included in the dataset."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-6-scatterplot",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-6-scatterplot",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 6: Scatterplot",
    "text": "Step 6: Scatterplot\nUse ggplot2 to create a scatterplot of the relationship between the bill length (bill_length_mm) and bill depth (bill_depth_mm)."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-7-adding-a-categorical-variable",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-7-adding-a-categorical-variable",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 7: Adding A Categorical Variable",
    "text": "Step 7: Adding A Categorical Variable\n\nBuilding off of the plot you made in Step 6, add an aesthetic to differentiate the species of the penguins in the scatterplot by color."
  },
  {
    "objectID": "group-activities/week-2/PA-2-ggplot.html#step-8-adding-another-categorical-variable",
    "href": "group-activities/week-2/PA-2-ggplot.html#step-8-adding-another-categorical-variable",
    "title": "PA 2: Using Data Visualization to Find the Penguins",
    "section": "Step 8: Adding Another Categorical Variable",
    "text": "Step 8: Adding Another Categorical Variable\nBuilding off of the plot you made in Step 7, add the location of the penguins ( island) to your visualization. There may be more than one method to address this, however, one method will more easily allow you to address the questions below."
  },
  {
    "objectID": "weeks/week-3-dplyr.html",
    "href": "weeks/week-3-dplyr.html",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "When you are finished with the readings and videos, you should be able to…\n\nDescribe to someone what a function conflict is\nDescribe to someone the similarities and differences between a list, a data.frame, and a tibble\nIdentify the structure of an object\nIdentify the data type(s) of an object\nDescribe to someone what the tidyverse is\nUse the five main dplyr verbs:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarize()\n\nUse group_by() to perform groupwise operations\nUse the pipe operator (|&gt; or |&gt;) to chain together data wrangling operations",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#learning-targets",
    "href": "weeks/week-3-dplyr.html#learning-targets",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "When you are finished with the readings and videos, you should be able to…\n\nDescribe to someone what a function conflict is\nDescribe to someone the similarities and differences between a list, a data.frame, and a tibble\nIdentify the structure of an object\nIdentify the data type(s) of an object\nDescribe to someone what the tidyverse is\nUse the five main dplyr verbs:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarize()\n\nUse group_by() to perform groupwise operations\nUse the pipe operator (|&gt; or |&gt;) to chain together data wrangling operations",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#learning-more-about-packages-in-r",
    "href": "weeks/week-3-dplyr.html#learning-more-about-packages-in-r",
    "title": "Data Wrangling with dplyr",
    "section": "1.1 Learning More About Packages in R",
    "text": "1.1 Learning More About Packages in R\n▶️ Required Video: Why do I get this message when I load the tidyverse? – 8 minutes\n\n\n\n\n\n\nRemoving messages from your HTML file\n\n\n\nTo remove the package loading / data loading messages, you have two options:\n\nGlobally turn off all messages by specifying message: false as an execute option in your YAML\nLocally turn off messages for a specific code chunk by specifying #| message: false as a code chunk option",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#learning-more-about-data-types-objects-in-r",
    "href": "weeks/week-3-dplyr.html#learning-more-about-data-types-objects-in-r",
    "title": "Data Wrangling with dplyr",
    "section": "1.2 Learning More about Data Types & Objects in R",
    "text": "1.2 Learning More about Data Types & Objects in R\nChoose one of these two options:\n\n\n▶️ Watch a Video: Data Types in R\n\n📖 Read a Textbook: Data Types in R\n\n\nIn addition, read the following section from the first edition of R for DS:\n📖 Required Reading: Tibbles",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#check-in-3.1-data-structures",
    "href": "weeks/week-3-dplyr.html#check-in-3.1-data-structures",
    "title": "Data Wrangling with dplyr",
    "section": "1.3 ✅ Check-in 3.1: Data Structures",
    "text": "1.3 ✅ Check-in 3.1: Data Structures\nQuestion 1\nIn essence, a data.frame is simply a special list - with a few extra restrictions on the list format.\nThink about the datasets you have already worked with. Which of the following restrictions on a list do you think are needed for the list to be a data.frame? (Select all that apply)\n\nThe elements of the list must all be vectors of the same length.\nThe elements of the list must all be the same data type.\nThe elements of the list must all have no missing values.\nThe elements of the list must all have names.\n\nQuestion 2\nTibbles are described as “opinionated” dataframes. Which of the following are true about a tibble’s behavior? (Select all that apply)\n\ntibbles only print the first 10 rows of a dataset\ntibbles allow for non-syntactic variable names, like :)\ntibbles never convert strings to factors\ntibbles create row names",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#introduction-to-dplyr",
    "href": "weeks/week-3-dplyr.html#introduction-to-dplyr",
    "title": "Data Wrangling with dplyr",
    "section": "2.1 Introduction to dplyr",
    "text": "2.1 Introduction to dplyr\n📖 Required Reading: Data Transformation",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#dplyr-verbs",
    "href": "weeks/week-3-dplyr.html#dplyr-verbs",
    "title": "Data Wrangling with dplyr",
    "section": "2.2 dplyr Verbs",
    "text": "2.2 dplyr Verbs\n\n\n▶️ Required Video: filter() – 11 minutes\n▶️ Required Video: select() – 6 minutes\n▶️ Required Video: mutate() – 9 minutes\n \n▶️ Required Video: arrange() – 7 minutes\n▶️ Required Video: summarize()– 8 minutes\n▶️ Required Video: group_by() – 6 minutes",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#the-pipe-operator",
    "href": "weeks/week-3-dplyr.html#the-pipe-operator",
    "title": "Data Wrangling with dplyr",
    "section": "2.3 The Pipe Operator",
    "text": "2.3 The Pipe Operator\n▶️ Required Video: The pipe operator – 8 minutes\n▶️ Required Video: Extending the pipe – 3 minutes",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#practice",
    "href": "weeks/week-3-dplyr.html#practice",
    "title": "Data Wrangling with dplyr",
    "section": "2.4 Practice",
    "text": "2.4 Practice\n💻 Required Tutorial: Practice with dplyr",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "weeks/week-3-dplyr.html#check-in-3.2-data-wrangling",
    "href": "weeks/week-3-dplyr.html#check-in-3.2-data-wrangling",
    "title": "Data Wrangling with dplyr",
    "section": "2.5 ✅ Check-in 3.2: Data Wrangling",
    "text": "2.5 ✅ Check-in 3.2: Data Wrangling\nQuestion 1: Suppose we would like to study how the ratio of penguin body mass to flipper size differs across the species. Arrange the following steps into an order that accomplishes this goal (assuming the steps are connected with a |&gt; or a %&gt;%).\n\n# a\narrange(med_mass_flipper_ratio)\n\n\n# b\ngroup_by(species)\n\n\n# c\npenguins \n  \n\n# d\nsummarize(\n  med_mass_flipper_ratio = median(mass_flipper_ratio)\n)\n\n  \n# e\nmutate(\n  mass_flipper_ratio = body_mass_g / flipper_length_mm\n)\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!\n\n\nQuestion 2:\nConsider the base R code below.\n\nmean(penguins[penguins$species == \"Adelie\", ]$body_mass_g)\n\nFor each of the following dplyr pipelines, indicate which of the following is true:\n\nIt returns the exact same thing as the (above) base R code\nIt returns the correct information, but the wrong object type\nIt returns incorrect information\nIt returns an error\n\n\n# Part a\npenguins |&gt;\n  filter(\"body_mass_g\") |&gt;\n  pull(\"Adelie\") |&gt;\n  mean()\n\n\n# Part b\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n# Part c\npenguins |&gt;\n  pull(body_mass_g) |&gt;\n  filter(species == \"Adelie\") |&gt;\n  mean()\n\n\n# Part d\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  mean()\n\n\n# Part e\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  pull(body_mass_g) |&gt;\n  mean()\n\n\n# Part f\npenguins |&gt;\n  select(species == \"Adelie\") |&gt;\n  filter(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!",
    "crumbs": [
      "Weekly materials",
      "Week 3 - dplyr"
    ]
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#thursday-september-26",
    "href": "slides/week-1/week-1-intro-version-control.html#thursday-september-26",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Thursday, September 26",
    "text": "Thursday, September 26\nToday we will…\n\n\nChanges to Student Hours\nAnswer Clarifying Questions:\n\nSyllabus?\nUngrading?\nParticipating in Dr. Theobold’s research on group collaborations?\n\nNew Material\n\nScripts + Notebooks\nVersion Control\n\nLab 1: Introduction to Quarto\nChallenge 1: Modifying your Quarto Document"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#what-does-ungrading-mean",
    "href": "slides/week-1/week-1-intro-version-control.html#what-does-ungrading-mean",
    "title": "Scripts, Notebooks & Version Control",
    "section": "What does “ungrading” mean?",
    "text": "What does “ungrading” mean?\n\n“Ungrading is a pedagogical practice which entirely removes grades as a focus of the course. Instead, ungrading exclusively focuses on providing students with feedback aimed at helping them build proficiency to accomplish the course’s learning goals.”"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#how-does-this-system-work",
    "href": "slides/week-1/week-1-intro-version-control.html#how-does-this-system-work",
    "title": "Scripts, Notebooks & Version Control",
    "section": "How does this system work?",
    "text": "How does this system work?\n\n\nEach problem on an assignment is marked for proficiency (e.g., success, growing).\n\nThese marks are not attached to a grade outcome (e.g., A, B, C, D).\n\nGrades are defined from a set of criteria, co-developed between you and me.\n\nAt the end of the course, you propose the grade you believe you’ve earned based on a portfolio of your work and the criteria we established."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#consent-to-participate",
    "href": "slides/week-1/week-1-intro-version-control.html#consent-to-participate",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Consent to Participate",
    "text": "Consent to Participate\n\n\nIf you agree to participate…\n\nyou will be recorded once a week for 10-weeks while participating in pair programming to complete collaborative tasks.\nyou will complete a pre- and post-survey about your prior computing experiences and your attitudes toward data science.\n\n\n\n\n\n\nYour participation in this research will not affect your course grade.\n\n\n\n\n\n\n\n\n\nConsent Form\n\n\nPlease complete the consent form (https://forms.gle/oax73hoe7uRSVLYw8) by Monday, 9/30."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#my-collaborator",
    "href": "slides/week-1/week-1-intro-version-control.html#my-collaborator",
    "title": "Scripts, Notebooks & Version Control",
    "section": "My Collaborator",
    "text": "My Collaborator\n\n\nJudith Canner, Professor of Statistics\n\n\nJoined faculty at CSUMB in 2010\nIs CSUMB’s Statistics and Data Science Program Coordinator.\nFavorite classes to teach are Data Visualization and Statistical Computing.\nLearned how to program in R in 2005 when my PhD adviser handed me some code and said “modify this.”\nGoal is to see statistics and data science education that is accessible to everyone!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#scripts",
    "href": "slides/week-1/week-1-intro-version-control.html#scripts",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Scripts",
    "text": "Scripts\n\nScripts (File &gt; New File &gt; R Script) are files of code that are meant to be run on their own.\n\n\n\nScripts can be run in RStudio by clicking the Run button at the top of the editor window when the script is open.\nYou can also run code interactively in a script by:\n\nhighlighting lines of code and hitting run.\nplacing your cursor on a line of code and hitting run.\nplacing your cursor on a line of code and hitting ctrl + enter or command + enter."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#notebooks",
    "href": "slides/week-1/week-1-intro-version-control.html#notebooks",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Notebooks",
    "text": "Notebooks\nNotebooks are an implementation of literate programming.\n\nThey allow you to integrate code, output, text, images, etc. into a single document.\nE.g.,\n\nQuarto notebook\nR Markdown notebook\nJupyter notebook\n\n\nWe love notebooks because they help us produce a reproducible analysis!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#what-is-markdown",
    "href": "slides/week-1/week-1-intro-version-control.html#what-is-markdown",
    "title": "Scripts, Notebooks & Version Control",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a markup language.\nIt uses special symbols and formatting to make pretty documents.\n\n\n*italics* – makes italics\n**bold** – makes bold text\n# – makes headers\n! – includes images or HTML links\n&lt; &gt; – embeds URLs\n\n\n\nMarkdown files have the .md extension."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#what-is-quarto",
    "href": "slides/week-1/week-1-intro-version-control.html#what-is-quarto",
    "title": "Scripts, Notebooks & Version Control",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto unifies and extends the R Markdown ecosystem.\n\n\n\n\n\n\n\n\n\nQuarto files have the .qmd extension."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#highlights-of-quarto",
    "href": "slides/week-1/week-1-intro-version-control.html#highlights-of-quarto",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Highlights of Quarto",
    "text": "Highlights of Quarto\n\nConsistent implementation of attractive and handy features across outputs:\n\nE.g., tabsets, code-folding, syntax highlighting, etc.\n\nMore accessible defaults and better support for accessibility.\nGuardrails that are helpful when learning:\n\nE.g., YAML completion, informative syntax errors, etc.\n\nSupport for other languages like Python, Julia, Observable, and more."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#quarto-formats",
    "href": "slides/week-1/week-1-intro-version-control.html#quarto-formats",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Quarto Formats",
    "text": "Quarto Formats\nQuarto makes moving between outputs straightforward.\n\nAll that needs to change between these formats is a few lines in the front matter (YAML)!\n\n\n\nDocument\ntitle: \"Lesson 1\"\nformat: html\nPresentation\ntitle: \"Lesson 1\"\nformat: revealjs\n\nWebsite\nproject:\n  type: website\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#quarto-components",
    "href": "slides/week-1/week-1-intro-version-control.html#quarto-components",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Quarto Components",
    "text": "Quarto Components\n\n\nHow does Quarto know that a section of text should be interpreted as R code?"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#r-code-options-in-quarto",
    "href": "slides/week-1/week-1-intro-version-control.html#r-code-options-in-quarto",
    "title": "Scripts, Notebooks & Version Control",
    "section": "R Code Options in Quarto",
    "text": "R Code Options in Quarto\nR code chunk options are included at the top of each code chunk, prefaced with a #| (hashpipe).\n\nThese options control how the following code is run and reported in the final Quarto document.\nSome R code options can also be included in the front matter (YAML) which would be applied globally to the entire document."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#r-code-options-in-quarto-1",
    "href": "slides/week-1/week-1-intro-version-control.html#r-code-options-in-quarto-1",
    "title": "Scripts, Notebooks & Version Control",
    "section": "R Code Options in Quarto",
    "text": "R Code Options in Quarto"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#chunk-option-completion-in-quarto",
    "href": "slides/week-1/week-1-intro-version-control.html#chunk-option-completion-in-quarto",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Chunk Option Completion in Quarto",
    "text": "Chunk Option Completion in Quarto"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document",
    "href": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nTo take your .qmd file and make it look pretty, you have to render it."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document-1",
    "href": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document-1",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nQuarto CLI (command line interface) orchestrates each step of rendering:\n\nProcess the executable code chunks with either knitr or jupyter.\nConvert the resulting Markdown file to the desired output."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document-2",
    "href": "slides/week-1/week-1-intro-version-control.html#rendering-your-quarto-document-2",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nWhen you click Render:\n\n\n\nYour file is saved.\nThe R code written in your .qmd file gets run in order.\n\n\nIt starts from scratch, even if you previously ran some of the code in RStudio.\n\n\nA new file is created.\n\n\nIf your Quarto file is called “Lab1.qmd”, then a file called “Lab1.html” will be created.\nThis will be saved in the same folder as “Lab1.qmd”."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#git-vs-github",
    "href": "slides/week-1/week-1-intro-version-control.html#git-vs-github",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Git vs GitHub",
    "text": "Git vs GitHub\n\n\n\n\n\n\n\n\n\n\n\n\nA system for version control that manages a collection of files in a structured way.\nUses the command line or a GUI.\nGit is local."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#git-vs-github-1",
    "href": "slides/week-1/week-1-intro-version-control.html#git-vs-github-1",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Git vs GitHub",
    "text": "Git vs GitHub\n\n\n\n\n\n\n\n\nA system for version control that manages a collection of files in a structured way.\nUses the command line or a GUI.\nGit is local.\n\n\n\n\n\n\n\n\nA cloud-based service that lets you use git across many computers.\nBasic services are free, advanced services are paid (like RStudio!).\nGitHub is remote."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#why-learn-github",
    "href": "slides/week-1/week-1-intro-version-control.html#why-learn-github",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Why Learn GitHub?",
    "text": "Why Learn GitHub?\n\nGitHub provides a structured way for tracking changes to files over the course of a project.\n\n\nThink Google Docs or Dropbox history, but more structured and powerful!\n\n\nGitHub makes it easy to have multiple people working on the same files at the same time.\nYou can host a URL of fun things (like the class text, these slides, the course website, etc.) with GitHub pages."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#git-repositories",
    "href": "slides/week-1/week-1-intro-version-control.html#git-repositories",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Git Repositories",
    "text": "Git Repositories\nGit is based on repositories.\n\n\n\nThink of a repository (repo) as a directory (folder) for a single project.\n\nThis directory will likely contain code, documentation, data, to do lists, etc. associated with the project.\nYou can link a local repo with a remote copy."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#cloning-a-repo",
    "href": "slides/week-1/week-1-intro-version-control.html#cloning-a-repo",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Cloning a Repo",
    "text": "Cloning a Repo\n\n\n\nCreate an exact copy of a remote repo on your local machine."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#committing-changes",
    "href": "slides/week-1/week-1-intro-version-control.html#committing-changes",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Committing Changes",
    "text": "Committing Changes\nTell git you have made changes you want to add to the repo.\n\nAlso provide a commit message – a short label describing what the changes are and why they exist.\n\n\n\nThe red line is a change we commit (add) to the repo.\n\n\n\n\n\n\n\n\nThe log of these changes is called your commit history.\n\nYou can always go back to old copies!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#commit-tips",
    "href": "slides/week-1/week-1-intro-version-control.html#commit-tips",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Commit Tips",
    "text": "Commit Tips\n\nUse short, but informative commit messages.\nCommit small blocks of changes – commit every time you accomplish a small task (e.g., one problem in the lab).\n\nYou’ll have a set of bite-sized changes (with description) to serve as a record of what you’ve done.\nWith frequent commits, its easier to find the issue if / when you mess up!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#pushing-changes",
    "href": "slides/week-1/week-1-intro-version-control.html#pushing-changes",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Pushing Changes",
    "text": "Pushing Changes\n\n\n\nUpdate the copy of your repo on GitHub so it has the most recent changes you’ve made on your machine."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#pulling-changes",
    "href": "slides/week-1/week-1-intro-version-control.html#pulling-changes",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Pulling Changes",
    "text": "Pulling Changes\n\n\n\nUpdate the local copy of your repo (the copy on your computer) with the version on GitHub."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#workflow",
    "href": "slides/week-1/week-1-intro-version-control.html#workflow",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Workflow",
    "text": "Workflow\nWhen you have an existing local repo:\n\n\nPull the repo to make sure you have the most up to date version (especially if you are working on different computers).\nMake some changes locally.\nCommit the changes to git.\nPush your changes to GitHub."
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#previous-steps",
    "href": "slides/week-1/week-1-intro-version-control.html#previous-steps",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Previous Steps",
    "text": "Previous Steps\nYou were asked to complete the following steps before coming to class today:\n\nCreate a GitHub account\nIntroduce yourself to git (in RStudio)\nGenerate a Personal Access Token (PAT)\nStore your PAT in RStudio"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#verifying-your-connection",
    "href": "slides/week-1/week-1-intro-version-control.html#verifying-your-connection",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Verifying Your Connection",
    "text": "Verifying Your Connection\n\n\nOpen RStudio and run the following code in your console (lower left pane):\n\n\n\n\n\nusethis::git_sitrep()\n\n\n\nYou should see something like:\n\n── GitHub user \n• Default GitHub host: 'https://github.com'\n• Personal access token for 'https://github.com': '&lt;discovered&gt;'\n• GitHub user: 'atheobold'\n• Token scopes: 'admin:org, admin:public_key, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:packages'\n• Email(s): 'atheobol@calpoly.edu (primary)', 'theobold.allison970@gmail.com', '12439090+atheobold@users.noreply.github.com'\nℹ No active usethis project\n\n\n\nIf that is not the case, Dr. Glanz will help you troubleshoot!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#once-youve-cloned-the-repo",
    "href": "slides/week-1/week-1-intro-version-control.html#once-youve-cloned-the-repo",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Once You’ve Cloned the Repo",
    "text": "Once You’ve Cloned the Repo\nStep 4: Open the lab-1.qmd file\nStep 5: Change your name\nStep 6: Commit your change (with a nice message!)\nStep 7: Push your change"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#to-do",
    "href": "slides/week-1/week-1-intro-version-control.html#to-do",
    "title": "Scripts, Notebooks & Version Control",
    "section": "To do…",
    "text": "To do…\n\nLab 1: Introduction to Quarto\n\nDue Sunday (1/12) at 11:59pm\n\nChallenge 1: Modifying Your Quarto Document\n\nDue Sunday (1/12) at 11:59pm\n\nComplete the Week 2 Coursework\n\nCheck-ins 2.1, 2.2, 2.3 due Tuesday (1/14) by the start of class"
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html",
    "href": "weeks/week-1-r-rstudio.html",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "",
    "text": "For the first portion of this week’s coursework, we are going to learn about / refresh our memory on R and RStudio. This course is all about you learning skills for working with data in R, so you will need to have local installations of both R and RStudio on your computer.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#updating-your-version-of-r",
    "href": "weeks/week-1-r-rstudio.html#updating-your-version-of-r",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "1.1 Updating Your Version of R",
    "text": "1.1 Updating Your Version of R\nIf you already have R downloaded, you need to confirm that you have the most up to date version of R. Do not ignore these instructions. If you neglect to update your version of R, you may find that updating a package will make it so your code will not run.\n\nStep 1: Open RStudio\nStep 2: At the top of the the Console it will say what version of R you are using\n\n{fig-alt = “A screenshot of what version of R should appear when you open RStudio. The version reads ‘R version 4.4.1 (2024-06-14) – ’Race for Your Life’.”}\nIf the version is not 4.4.1 (like the image above), you need to update your version of R! The simplest way to do this is to follow the instructions below to install R.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#installing-r",
    "href": "weeks/week-1-r-rstudio.html#installing-r",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "1.2 Installing R",
    "text": "1.2 Installing R\nDownload and install R by going to https://cloud.r-project.org/. Here, you will find three options for installing R—click on the option for your computer’s operating system.\n\n\n\n\nIf you are a Windows user:\n\nClick on “Download R for Windows”\nClick on “base”\nClick on the Download link.\nWhen you open the execution file (.exe) you will be prompted with a variety of questions about installing R. Feel free to use the default features / settings that come with R (continue to click “Ok” until the download starts).\n\n\n\n\n\n\n\nMultiple Versions of R\n\n\n\nBeware that if you had a previous version of R downloaded on your PC, that old version will not be deleted when you download the most recent version of R. We do not want to have two versions of R installed, as your computer can get confused what version of R to use. So, you need to remove the old version of R.\nTo do this you need to:\n\nNavigate to your computer’s settings\nClick on the “Apps” option on the left-hand panel\nSearch for or scroll down to R\nFind the older version of R\n\n\n\nClick on the ... on the right side\nSelect “Uninstall”\n\n\n\n\n\n\nIf you are macOS user:\n\nClick on “Download R for (Mac) OS X”\nUnder “Latest release:” click on R-X.X.X.pkg, where R-X.X.X is the version number. For example, the latest version of R as of July 1, 2024 was R-4.4.1 (Race for Your Life).\nWhen installing, use the default features / settings that come with R (click Ok until the download starts).\n\n\n\n\n\n\n\nTroubleshooting for Macs\n\n\n\nFirst, identify which version of OSx you are running. How-to\nNext, find out which version of R your computer can run. Link\nIf this version is 3.6 or later, download the latest version that your computer can handle.\nIf this version is 3.4 or earlier, you’re going to run in to some trouble. I recommend updating your version of OSx, if you are willing. If you can’t, then you can use Posit Cloud to run R and RStudio on a free server. However, I recommend strongly against this option; your files will not be saved indefinitely, you will have limited hours to complete your work, your computing power will be limited, and you will need an internet connection at all times to do your work.\n\n\n\n\nIf you are a Linux user:\nClick on “Download R for Linux” and choose your distribution for more information on installing R for your setup.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#updating-your-version-of-rstudio",
    "href": "weeks/week-1-r-rstudio.html#updating-your-version-of-rstudio",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "2.1 Updating Your Version of RStudio",
    "text": "2.1 Updating Your Version of RStudio\nIf you already have RStudio, you need to double check if you have the most recent version. You will not have access to the newest features for Quarto documents unless you have the most recent version of RStudio.\n\nStep 1: Open RStudio\nStep 2: Click on “Help” in the upper menu\nStep 3: Click on “Check for Updates”\n\nIf there are no updates to RStudio since you installed it, you are good to go! If you need to update RStudio, you will be sent to Posit (the parent company) to download the most recent version of RStudio desktop.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#installing-rstudio",
    "href": "weeks/week-1-r-rstudio.html#installing-rstudio",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "2.2 Installing RStudio",
    "text": "2.2 Installing RStudio\n\n\n\n\nDownloading the most recent version of RStudio works the same way regardless of whether you’ve never downloaded RStudio before or if you just need to update your version of RStudio.\nWhen you navigate to the RStudio download page (https://rstudio.com/products/rstudio/download/), the website should automatically detect your computer’s operating system. So, you should be able to simply click the blue “Download RStudio Desktop for [insert operating system here]” button.\nClicking the button will begin installing RStudio. Once the download has completed, you will need to open the application file (on a Mac this is a .dmg file, on Windows this is an exe file).",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#debugging-r-code",
    "href": "weeks/week-1-r-rstudio.html#debugging-r-code",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "4.1 Debugging R Code",
    "text": "4.1 Debugging R Code\n\n📽️ Required Video: Debugging R Code",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 1 - R & RStudio"
    ]
  },
  {
    "objectID": "labs/instructions/challenge-3-instructions.html",
    "href": "labs/instructions/challenge-3-instructions.html",
    "title": "Challenge 3: Extending Teaching Evaluation Investigations",
    "section": "",
    "text": "Chi-Square Test of Independence\n\n\n\n\n\n\nRefresher on Chi-square test of independence\n\n\n\nWhile a second course in statistics is a pre-requisite for this class, here is a refresher on Chi-square tests of independence.\n\n\nLet’s compare the level of SET ratings for Question 3 (The professor used activities to make the class more engaging.) between senior instructors and junior instructors.\n1. Using the original teacher_evals dataset (not teacher_evals_clean), create a new dataset that accomplishes the following with onedplyr pipeline:\n\nincludes responses for Question 3 only\ncreates a new variable called SET_level that is “excellent” if the SET_score_avg is 4 or higher (inclusive) and “standard” otherwise\ncreates a new variable called sen_level that is “junior” if seniority is 4 or less (inclusive) and “senior” otherwise\ncontains only the variables we are interested in –- course_id, SET_level, and sen_level\nsaves the mutated data into a new object named teacher_evals_compare.\n\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: filter(), mutate(), if_else(), select()\n\n\n2. Using the new dataset and your ggplot2 skills, recreate the filled bar plot shown below.\n\n\n\n\n\n\n\nTip\n\n\n\nHelpful geometric object and arguments: geom_bar(stat = ..., position = ...)\nYou should not have to do any more data manipulation to create this plot.\nNote that getting the general structure and reader friendly labels is the first step. The next step is to figure out the labels of the bars and the theme of the plot.\n\n\n3. Look up the documentation for chisq.test() to carry out a chi-square test of independence between the SET level and instructor seniority level in your new dataset.\n\n\n\n\n\n\nTip\n\n\n\nNote that the chisq.test() function does not take a formula / data specification as we have seen before. You will need to extract the variables you wish to include in the analysis using a $ (e.g., evals$level$).\n\n\n4. Draw a conclusion about the independence of evaluation level and seniority level based on your chi-square test.\n\n\nStudy Critique\nPart of the impetus behind this study was to investigate characteristics of a course or an instructor that might affect student evaluations of teaching that are not explicitly related to teaching effectiveness. For instance, it has been shown that gender identity and gender express affect student evaluations of teaching (an example).\n5. If you were to conduct this study at Cal Poly, what are two other variables you would like to collect that you think might be related to student evaluations? These should be course or instructor characteristics that were not collected in this study.\n6. Explain what effects / relationships you would expect to see for each of the two variables you outlined.",
    "crumbs": [
      "Labs",
      "Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "weeks/week-4-factors.html",
    "href": "weeks/week-4-factors.html",
    "title": "Working with Categorical Variables",
    "section": "",
    "text": "The second section of this coursework is focused on working with factor data types. By the end of this week, you should be able to:\n\nUse forcats to reorder and relabel factor variables in data cleaning steps and data visualizations.\n\n\n\n▶️ Watch Videos: 9-minutes\n\n\n📖 Readings: 15-minutes\n\n\n💻 Activities: 0\n\n\n✅ Check-ins: 1\n\n\n\n1 Factors with forcats\nWe have been floating around the idea of factor data types. In this section, we will formally define factors and why they are needed for data visualization and analysis. We will then learn useful functions for working with factors in our data cleaning steps.\n\n\n\n\n\n\n\n\n\n\n\n▶️ Required Video: Working with factors using forcats – 9 minutes\nIn short, factors are categorical variables with a fixed number of values (think a set number of groups). One of the main features that set factors apart from groups is that you can reorder the groups to be non-alphabetical. In this section we will be using the forcats package (part of the tidyverse!) to create and manipulate factor variables.\n📖 Required Reading: R4DS Chapter 16 (Factors)\n\n✅ Check-in 4.3: Functions from forcats\nAnswer the following questions in the Canvas Quiz.\n1. Which of the following tasks can fct_recode() accomplish? Select all that apply!\n\nchanges the values of the factor levels\nreorders the levels of a factor\nremove levels of a factor you don’t want\ncollapse levels of a factor into a new level\n\n2. Which of the following tasks can fct_relevel() accomplish?\n\nreorders the levels of a factor\nchanges the values of the factor levels\nremove levels of a factor you don’t want\ncollapse levels of a factor into a new level\n\n3. What is the main difference between fct_collapse() and fct_recode()?\n\nfct_recode() uses strings to create factor levels\nfct_recode() uses groups to create factor levels\nfct_recode() cannot create an “Other” group\n\n4. What ordering do you get with fct_reorder()?\n\nlargest to smallest based on another variable\norder of appearance\nlargest to smallest based on counts\nalphabetical order\n\n5. What ordering do you get with fct_inorder()?\n\norder of appearance\nalphabetical order\nlargest to smallest based on counts\nlargest to smallest based on another variable :::"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions-old.html",
    "href": "labs/instructions/lab-5-instructions-old.html",
    "title": "Lab 5: Factors in Visualizations",
    "section": "",
    "text": "This lab comes from the plotting “best practices” that I’ve learned over the years. The main inspiration is Will Chase’s 2020 RStudio Conference Presentation – Glamour of Graphics."
  },
  {
    "objectID": "labs/instructions/lab-5-instructions-old.html#revisiting-side-by-side-boxplots",
    "href": "labs/instructions/lab-5-instructions-old.html#revisiting-side-by-side-boxplots",
    "title": "Lab 5: Factors in Visualizations",
    "section": "1.1 Revisiting Side-by-Side Boxplots",
    "text": "1.1 Revisiting Side-by-Side Boxplots\nLet’s start with the side-by-side boxplots you created in Lab 2 to visualize the distribution of weight within each species (not species ID!).\n\nsurveys |&gt; \n  ggplot(mapping = aes(x = weight,\n                       y = species)) + \n  geom_jitter(color = \"steelblue\",\n              alpha = 0.05) + \n  geom_boxplot(alpha = 0.2,\n               outlier.shape = NA) \n\n\n\n\n\n\n\n\nAs you should expect with a character variable, the boxplots go in alphabetical order. This looks rather jumbled, so let’s put our factor skills to work!\n1. Reorder the boxplots so the weights go in descending order.\n\n\n\n\n\n\nCaution\n\n\n\nYou are required to use functions from forcats to complete this task.\n\n\n2. Now that you’ve reordered, let’s fix our axis labels and title. Make sure your labels contain important information (e.g., units). Let’s take Will Chase’s advice and incorporate the y-axis label into the plot title–make your title fun!"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions-old.html#time-series-plot",
    "href": "labs/instructions/lab-5-instructions-old.html#time-series-plot",
    "title": "Lab 5: Factors in Visualizations",
    "section": "1.2 Time-Series Plot",
    "text": "1.2 Time-Series Plot\n\n\n\n\n\n\nWarning\n\n\n\nThis is a new section, meaning you will create a new plot. In other words, this is not a continuation of the boxplot from above.\n\n\nThis week, we are focusing on learning skills related to dates, but we have yet to make a very common type of plot – the time-series plot. We’ll use this plot to motivate a second type of factor reordering!\n3. Create a visualization of how weights vary for each genus over the duration of the study.\n\n\n\n\n\n\nTip\n\n\n\nWhat variables do you need and what are their variable types? What aesthetic would it make sense to map each variable to? Sketch it out first!\nAvoid using faceting here.\n\n\nAlright, there are a lot of measurements over time! Let’s use our dplyr skills to summarize each year and plot the summaries.\n4. Calculate and plot the mean weight for each year (for each genus).\nThis should look much less busy! However, you should notice that the legend still goes in alphabetical order.\n5. Reorder the legend line colors so the weights go in descending order.\n\n\n\n\n\n\nCaution\n\n\n\nYou are required to use functions from forcats to complete this task.\n\n\n6. Now that you’ve reordered the lines, look at your labels and title. Let’s give the legend, axes, and plot new titles and move the y-axis label to the top of the plot."
  },
  {
    "objectID": "labs/instructions/lab-5-instructions-old.html#caputures-over-the-week",
    "href": "labs/instructions/lab-5-instructions-old.html#caputures-over-the-week",
    "title": "Lab 5: Factors in Visualizations",
    "section": "1.3 Caputures over the Week",
    "text": "1.3 Caputures over the Week\nFor our final exploration, we will consider the number of rodents captured throughout the week – transitioning to visualizations of categorical variables.\n\n\n\n\n\n\nWarning\n\n\n\nYour plots should not make people tilt their heads to read it! Be mindful in choosing which variable goes on which axis and if / how you use axis labels.\n\n\n7. Create a visualization of the number of rodents captured each day of the week.\nAs you might have expected, the ordering of the days of the week is not what we would like.\n8. Change the order of the day of the week to go Monday through Sunday.\n\n\n\n\n\n\nNote\n\n\n\nYou can choose to keep the days named as they are (e.g., Mon, Sun), or you can choose to rename the days to their full names (e.g., Monday, Sunday).\n\n\nIt should be very clear that there are more rodents captured on the weekend than during the week. But, let’s explore if this is still the case if we use a “Weekday” / “Weekend” classification system instead.\n10. Collapse Monday through Friday into a \"Weekday\" level, and collapse Saturday and Sunday into a \"Weekend\" level. Plot the number of rodents captured between the two groups."
  },
  {
    "objectID": "weeks/week-0-discord.html",
    "href": "weeks/week-0-discord.html",
    "title": "Course Set-up and Structure",
    "section": "",
    "text": "Welcome!\nIn this coursework, you’ll get set up with the Class Discord, learn about what is expected of you each week, and hear some tips from me about how to succeed.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#course-todos",
    "href": "weeks/week-0-discord.html#course-todos",
    "title": "Course Set-up and Structure",
    "section": "0.1 Course TODOs",
    "text": "0.1 Course TODOs\n📖 Readings: 15 minutes\n💻 Activities: 0 min\n✅ Check-ins: 3",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#join-the-server",
    "href": "weeks/week-0-discord.html#join-the-server",
    "title": "Course Set-up and Structure",
    "section": "2.1 Join the server",
    "text": "2.1 Join the server\nJoin the Stat 331 Server (https://discord.gg/dMadzkGb) to start experimenting with the interface.\nWhen you join the server, you will be given some suggestions to get started.\n\nI recommend you click through these - and in particular, it is probably a good idea to download the desktop version of Discord, and perhaps to install it on your phone if you wish.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#set-up-your-account",
    "href": "weeks/week-0-discord.html#set-up-your-account",
    "title": "Course Set-up and Structure",
    "section": "2.2 Set up your account",
    "text": "2.2 Set up your account\n\nVerify your email\nTo use this Discord server, you must have a verified email.\nNobody (including your professors) will be able to see this email, and it does not have to be your Cal Poly email. This is simply to keep the server from being overrun by temporary accounts.\n\n\nCreate your identity\nThe first thing you should do is decide what name and picture you would like to use.\n\nI would like to strongly encourage you to use your real name and picture, so that everyone can get to know you. However, if you prefer to remain anonymous, you are free to do so.\n\n(Please do not be like Regina and use the name of another student, however!\nThis kind of impersonation will result in a permanent ban from the server.)\n\n\nDecide about privacy and notifications\nThe default settings on the channel are probably just fine for you.\nFeel free to make any changes that work for you, though.\nYou can change your message notifications:\n\nYou can edit your privacy settings, although most things are already private:\n\n\n\nConnect other apps\nYou can connect other apps to Discord, either for productivity or just for fun.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#using-the-channels",
    "href": "weeks/week-0-discord.html#using-the-channels",
    "title": "Course Set-up and Structure",
    "section": "2.3 Using the Channels",
    "text": "2.3 Using the Channels\nThe server is made up of many channels. Some are text chatrooms, while some are “Voice Channels” that connect you via audio to everyone else in the channel.\n\nText Channels\nUse the #general channel for anything and everything:\n\nIf your question is about course logistics, rather than the material itself, consider using the #class-logistics channel:\n\nYou can use the specific weekly channels to ask questions about the material…\n\n… or the specific lab assignment.\n\nNotice that you can use tick marks (```), like in R Markdown, to make your code appear in a formatted code box.\n\n\nPrivate messages\nIt is also easy to send private messages, to your professor or to each other. These private messages can also easily be used to launch a private video chat and / or screen sharing.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#creating-your-own-server",
    "href": "weeks/week-0-discord.html#creating-your-own-server",
    "title": "Course Set-up and Structure",
    "section": "2.4 Creating your own server",
    "text": "2.4 Creating your own server\nLast but not least - for the teams you are a part of, you may want to use Discord to communicate with each other about the weekly assignments. You can do this by creating your own server! You can easily hop between servers during work parties, to ask each other questions or just to take a break and chat about life.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#see-you-at-the-party",
    "href": "weeks/week-0-discord.html#see-you-at-the-party",
    "title": "Course Set-up and Structure",
    "section": "2.5 See you at the Party!",
    "text": "2.5 See you at the Party!",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#check-in-1.5-discord-server",
    "href": "weeks/week-0-discord.html#check-in-1.5-discord-server",
    "title": "Course Set-up and Structure",
    "section": "2.6 ✅ Check-in 1.5: Discord Server",
    "text": "2.6 ✅ Check-in 1.5: Discord Server\nIntroduce yourself in the “Introductions” channel of the Discord Server.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#what-your-typical-week-will-look-like",
    "href": "weeks/week-0-discord.html#what-your-typical-week-will-look-like",
    "title": "Course Set-up and Structure",
    "section": "3.1 What your typical week will look like",
    "text": "3.1 What your typical week will look like\n\nCoursework\nEach week, you will be expected to work through a sequence of readings, videos, and preview activities. (Much like this one!)\nThese are meant to replace the in-class lecture experience; thus, you should plan to devote about 1 - 3 hours a week to this coursework.\n\n\nPreview Activities\nUsually due Tuesdays before the beginning of class (at 12pm)\nBefore class, you’ll complete Preview Activities which will guide you through your first contact with new concepts.\nThese will involve readings, videos, along with exercises to build your basic skill fluency. For example, you might be asked to read a chapter from the course textbook, watch a few videos discussing some concepts from the chapter, and then asked to complete some preliminary exercises intended to get you started thinking about how to apply the concepts from the chapter in the context of real data.\nYou’ll submit these exercises online, so that class time can be customized based on your understanding.\n\n\nPractice Activities\nUsually due Thursdays at 12pm\nDuring class, you’ll be working with your classmates to complete Practice Activities, which take your Preview Activities a step further. You will collaborate with your team to solve a puzzle, requiring that you accomplish a series of tasks, each of which applies the statistical computing concepts from that week. The purpose of in-class time is for you to be doing statistical computing, with me there to guide you if / when you get lost.\nThe course meetings on Tuesdays will have at least 1-hour dedicated to working on these practice activities, where you will work in your team. This allows for you to have the ability to ask me questions during the early stages of the activity.\n\n\nLab Assignments\nUsually due Sundays at midnight\nAfter class, you can reinforce the material through Lab Assignments, which are an opportunity to demonstrate mastery of the skills that you’ve learned. If you got something wrong, don’t worry! You’ll have a chance to try again.\nLabs will be submitted on Canvas. All revisions to Lab Assignments will be submitted to the same Canvas portal as the original assignment.\n\n\nChallenges\nUsually due Sundays at midnight\nEach Lab Assignment will have a Challenge Problem, which asks you to extend the skills you’ve learned in class in some way. Frequently, you have the choice of what you would like to learn. The only requirement is that you extend your thinking in some (measurable) way.\nAlthough you may discuss ideas with your classmates and seek help from the usual sources, all code and text absolutely must be your own.\nChallenges will be submitted on Canvas. All revisions to Challenges will be submitted to the same Canvas portal as the original assignment.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#check-in-1.1-syllabus-quiz",
    "href": "weeks/week-0-discord.html#check-in-1.1-syllabus-quiz",
    "title": "Course Set-up and Structure",
    "section": "3.2 ✅ Check-in 1.1: Syllabus Quiz",
    "text": "3.2 ✅ Check-in 1.1: Syllabus Quiz\nQuestion 1: Where can you visit me for office hours?\n\nIn person\nZoom\nDiscord\nCanvas\n\nQuestion 2: In this course, Preview Activities are due by 12pm every ____. Practice Activities are due by 12pm every ____. Lab Assignments and Challenges are due by midnight every ____.\nQuestion 3: If you have a question about the course content, what is the best first step?\n\nPost your question on Discord in the appropriate channel\nSend Dr. Glanz an email\nGo to student hours on Tuesday or Thursday\nGoogle it\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 4: You have finished the week’s Practice Assignment, and you want to know if you did it right. You ask your friend, and they say, “Oh, I got Luke Skywalker as my answer.” This is a violation of Academic Honesty policy.\nQuestion 5: You have been working on Lab 3 for what feels like forever and it seems like you are making little to no progress. You type the prompt into Google and “Wham!” the first result is a Stack Overflow page with a solution. You copy-and-paste the solution from the Stack Overflow page into your Challenge submission and do not reference that you used an outside source. You have violated the Academic Honesty policy.\nQuestion 6: You have been getting frustrated with finding an error in your code for hours and finally decide to paste your own generated code into ChatGPT and ask it to help you debug. ChatGPT immediately finds a missing parenthesis. You have violated the Academic Honesty policy.\nQuestion 7 You have been studying for another class, the deadline for Lab 2 is in an hour and you haven’t even started. Instead of using a “grace day”, you choose to copy the assignment into ChatGPT and ask it to write code to accomplish the tasks. ChatGPT spits out code with a style/format different from what we learned in class; you copy it into your Quarto code chunks and it runs so you render your assignment and turn it in anyway. You have violated the Academic Honesty policy.\nQuestion 8: Name one of the course learning targets that makes you excited.\nQuestion 9: Name one of the course learning targets that makes you nervous.\nQuestion 10: Why are you taking this class? What do you hope to learn?",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#take-the-coursework-pages-as-seriously-as-you-take-in-person-lecture.",
    "href": "weeks/week-0-discord.html#take-the-coursework-pages-as-seriously-as-you-take-in-person-lecture.",
    "title": "Course Set-up and Structure",
    "section": "5.1 Take the Coursework pages as seriously as you take in-person lecture.",
    "text": "5.1 Take the Coursework pages as seriously as you take in-person lecture.\nFlipped classrooms puts you in the driver seat of mastering the course material. It can be tempting to cut corners to save yourself time, but this will likely result in you having a less complete understanding of the material.\nI encourage you to commit to giving the Coursework segments the same level of attention that you would ordinarily give to in-class lecture. Put the same effort into the Preview Activities that you would if you were sitting in a classroom. In return for your efforts, I promise to choose required videos and readings carefully, so that I do not waste your time.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#google-is-your-friend.",
    "href": "weeks/week-0-discord.html#google-is-your-friend.",
    "title": "Course Set-up and Structure",
    "section": "5.2 Google is your friend.",
    "text": "5.2 Google is your friend.\nThe R community has an enormous arsenal of online learning resources. I’ve linked a few on the “Extra Resources” module in Canvas, but you can always find more!\n\nLearn to:\n\nGoogle for tutorials and examples\nUse ChatGPT to ask questions\nUse Stack Overflow for proposed solutions to people’s questions",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "weeks/week-0-discord.html#use-your-classmates-for-your-benefit",
    "href": "weeks/week-0-discord.html#use-your-classmates-for-your-benefit",
    "title": "Course Set-up and Structure",
    "section": "5.3 Use your classmates for your benefit!",
    "text": "5.3 Use your classmates for your benefit!\nThis course makes use of team-based learning. Every week you will work in a team with a peer. Over the course of the quarter you will work with many different people. Each of these people can be a resource for you and you can be a resource for them!\nI encourage you to establish study buddies and / or study groups early in the quarter, even if you don’t know anyone yet. The class Discord server is a great way to get started. I also hope you will be proactive about setting up your own video chat sessions, phone calls, Google Docs, group chats, etc. (How many different platforms can you talk about Stat 331 on? Facebook? Snapchat? Instagram? TikTok? Bumble???)\nI hope that we will all be purposeful and creative about finding ways to work as a team.",
    "crumbs": [
      "Weekly materials",
      "Week 0 - Course Set-up"
    ]
  },
  {
    "objectID": "portfolio/midterm-portfolio-targets.html",
    "href": "portfolio/midterm-portfolio-targets.html",
    "title": "Midterm Portfolio Learning Targets & Grade Expectations",
    "section": "",
    "text": "The following learning targets have been covered in Weeks 1-5 of this course. When locating code that “fits” into these learning targets I would like for you to:\n\nfind 1-2 high quality examples (quality &gt; quantity)\nfind examples that hit on multiple learning targets at the same time\n\nFor example, the code below could be used to demonstrate proficiency with:\n\n\n\nWD-2 – in two places (select() and starts_with())!\nWD-7\n\n\n\n\n\nWD-4\nR-2 (tidy code)\nPE-4 (the |&gt; is a “modern tool”)\n\n\n\n\nca_childcare |&gt;\n  select(study_year,\n         mc_infant,\n         mc_toddler,\n         mc_preschool,\n         region\n         ) |&gt;\n  pivot_longer(cols = starts_with(\"mc_\"), \n               names_to = \"age\", \n               values_to = \"median_income\"\n               ) |&gt; \n  mutate(age = fct_relevel(age, \n                          \"mc_infant\",\n                          \"mc_toddler\",\n                          \"mc_preschool\")\n        )\n\n\n\n\nWorking with Data\n\n\nWD-1: I can import data from a variety of formats (e.g., csv, xlsx, txt)\nWD-2: I can select necessary columns from a dataset\nWD-3: I can filter rows from a dataset for a variety of data types (e.g., numeric, factor, date, character)\nWD-4: I can modify existing variables and create new variables in a dataset for a variety of data types (e.g., numeric, factor, date, character)\nWD-5: I can use mutating joins from the tidyr package to combine multiple datasets\nWD-6: I can use filtering joins from the dplyr package to filter rows from a dataset\nWD-7: I can pivot datasets from long to wide and visa versa\n\n\nReproducibility\n\n\nR-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package  \nR-2: I can write well documented1 and tidy code2\n\nYou have not written functions yet, so you will not have any content for the “Example of function formatting” code block.\n\nR-3: I can write robust programs3 that are resistant to changes in inputs\n\nYou have not written functions yet, so you will not have any content for the “Example of function stops” code block.\n\n\n\n\n\n\nData Visualization & Summarization\n\n\nDVS-1: I can create visualizations for a variety of variable types (e.g., numeric, character, date)\nDVS-2: I use plot modifications to make my visualizations clearer to the reader\nDVS-3: I show creativity in my visualizations\nDVS-4: I can calculate numerical summaries of variables\nDVS-5: I can calculate numerical summaries of variables across multiple groups\nDVS-6: I can create tables which make my summaries clear to the reader\n\n\nProgram Efficiency\n\n\nPE-1: I can write concise code which does not repeat itself.\n\nYou have not yet learned about iteration, so you will not have any content for the “map() functions” code block.\n\nPE-3: I can use iteration to reduce repetition in my code.\n\nYou have not yet learned about iteration, so you will not have any content for the code blocks related to the map() function.\n\n\nPE-4: I can use modern tools4 when carrying out my analysis.\n\n\nData Simulation & Statistical Models\n\n\nDSSM-2: I can conduct common statistical analyses in R",
    "crumbs": [
      "Weekly materials",
      "Week 6 - Midterm Portfolio Week"
    ]
  },
  {
    "objectID": "portfolio/midterm-portfolio-targets.html#footnotes",
    "href": "portfolio/midterm-portfolio-targets.html#footnotes",
    "title": "Midterm Portfolio Learning Targets & Grade Expectations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“well documented” code has elements of the following:\n\ncode comments (e.g., # function to rescale columns between 0 and 1)\ncode chunk names (using the #| lab: option)\nsections in Quarto file which describe the process(es) being implemented\n\n↩︎\n“tidy code” is code which adheres to the tidyverse style guidelines↩︎\nThe follow are some examples of code I would consider “robust”:\n\nusing column names rather than column positions\nincluding function stops when writing functions\nusing processes that don’t depend on you remembering a particular sequence of steps (e.g., arrange() then slice() versus slice_max())\n\n↩︎\nThe following are some examples of tools I would consider are “modern”:\n\nfunctions which are not superseded\nfunctions which are not deprecated\nusing the pipe operator to decrease the number of intermediate objects created\n\n↩︎",
    "crumbs": [
      "Weekly materials",
      "Week 6 - Midterm Portfolio Week"
    ]
  },
  {
    "objectID": "labs/instructions/challenge-8-instructions.html",
    "href": "labs/instructions/challenge-8-instructions.html",
    "title": "Bonus Challenge: FizzBuzz (+5)",
    "section": "",
    "text": "The “FizzBuzz Test” is a famous programming interview question. &gt; Write a program that prints the numbers from 1 to 30. But for multiples of three, print “Fizz” instead of the number, and for the multiples of five, print “Buzz”. For numbers which are multiples of both three and five, print “FizzBuzz”\n\n\nCreate a program flow map (on paper, or using an online tool of your choice, such as Excalidraw) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Upload your program flow map image to imgur.com and provide an image link here using markdown image syntax. You will need to link directly to the image (with image file extension) - right click on your uploaded image and choose ‘copy image address’ to get the proper link.\nCan you think of another way to solve FizzBuzz using a different logical structure? What do you need to know how to do in R for each solution? Do you need to know how to concatenate strings? Convert something from an integer to a string? Just output stuff? Thinking through these requirements can help you decide which solution is the simplest and/or best.\nList out the requirements of the solution in your program flow map here:\n\n\n\n\n\n\nIn the R chunk below, write code which will solve this problem using a for loop that goes from 1 to 30.\n\n# Write your code here.\n\nEach logical comparison can take some time to evaluate. How many logical comparisons are evaluated in your for loop? Can you count them up? For instance, if your if-elseif-else statement is TRUE on the first if statement, then the second logical comparison is not evaluated, but if it is FALSE for the first comparison, then the second comparison does get evaluated. Thinking about efficiency is one way to evaluate whether code is well-written or not.\nNumber of logical comparisons:\n\n\n\nCan you use string concatenation to produce a solution that has only 3 single if statements (that is, one that doesn’t use nested if statements or an if-else construction)? This may be different from the way you constructed your solution, and that’s good - there are many ways to solve this problem.\n\n# Write your code here."
  },
  {
    "objectID": "labs/instructions/challenge-8-instructions.html#fizzbuzz",
    "href": "labs/instructions/challenge-8-instructions.html#fizzbuzz",
    "title": "Bonus Challenge: FizzBuzz (+5)",
    "section": "",
    "text": "The “FizzBuzz Test” is a famous programming interview question. &gt; Write a program that prints the numbers from 1 to 30. But for multiples of three, print “Fizz” instead of the number, and for the multiples of five, print “Buzz”. For numbers which are multiples of both three and five, print “FizzBuzz”\n\n\nCreate a program flow map (on paper, or using an online tool of your choice, such as Excalidraw) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Upload your program flow map image to imgur.com and provide an image link here using markdown image syntax. You will need to link directly to the image (with image file extension) - right click on your uploaded image and choose ‘copy image address’ to get the proper link.\nCan you think of another way to solve FizzBuzz using a different logical structure? What do you need to know how to do in R for each solution? Do you need to know how to concatenate strings? Convert something from an integer to a string? Just output stuff? Thinking through these requirements can help you decide which solution is the simplest and/or best.\nList out the requirements of the solution in your program flow map here:\n\n\n\n\n\n\nIn the R chunk below, write code which will solve this problem using a for loop that goes from 1 to 30.\n\n# Write your code here.\n\nEach logical comparison can take some time to evaluate. How many logical comparisons are evaluated in your for loop? Can you count them up? For instance, if your if-elseif-else statement is TRUE on the first if statement, then the second logical comparison is not evaluated, but if it is FALSE for the first comparison, then the second comparison does get evaluated. Thinking about efficiency is one way to evaluate whether code is well-written or not.\nNumber of logical comparisons:\n\n\n\nCan you use string concatenation to produce a solution that has only 3 single if statements (that is, one that doesn’t use nested if statements or an if-else construction)? This may be different from the way you constructed your solution, and that’s good - there are many ways to solve this problem.\n\n# Write your code here."
  },
  {
    "objectID": "weeks/week-1-quarto.html",
    "href": "weeks/week-1-quarto.html",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "",
    "text": "The theme of this lesson is good management of your files and data. In part two of this week’s coursework you will learn how to identify folders and paths, and create Quarto documents.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-1-quarto.html#file-management",
    "href": "weeks/week-1-quarto.html#file-management",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "1.1 File Management",
    "text": "1.1 File Management\nAs boring as it sounds, file management is arguably one of the most important skills a data scientist should have. The reproducibility of a project depends just as much on the way in which the project was stored as the computing tools used. While using R and Quarto make an important step in creating a reproducible analysis, there are other pieces that are arguably just as important—such as file management.\nBelieve it or not, your computer has multiple locations** where files can be stored. There has been a bit of a generational shift as computers have evolved: the “file system” metaphor itself is outdated because no one uses physical files anymore. [This article]((https://futurism.com/the-byte/gen-z-kids-file-systems) makes the argument that with modern search capabilities, most people use their computers as a laundry hamper instead of as a nice, organized filing cabinet. However, the laundry hamper approach doesn’t play nicely with working in R and creating Quarto documents.\nIn this class, we will store files according to the Project TIER protocol. More specifically, you will have:\n\na “Stat 331” folder in your Documents folder, containing all your materials associated with STAT 331\na sub-folder for each week (e.g., Week 1, Week 2)\nseparate folders within each week for each assignment (e.g., Practice Activity, Lab)\na separate R Studio Project (and GitHub repository) associated with each assignment\n\nFor example, if you come to my office for help on your lab assignment for Week 2, I would expect your files to look like this:\n\nFile Storage on WindowsFile Storage on a Mac\n\n\n\nI have six total folders in my Documents, one of which is a folder named “STAT 331.”\n\nInside my STAT 331 folder is a sub-folder named “Week 1,” which also has a sub-folder (a sub-sub-folder) named “Lab 1.” You can tell what folders Lab 1 lives inside based on the information included at the top of the screen. This is called a “file path,” which tells your computer where a folder / file lives on the computer.\nOn a PC, every file lives on the C Drive, so the “full path” to get to my Lab 1 folder would be:\nC:/Users/atheobold/Documents/STAT 331/Week 1/Lab 1\n\n\n\nI have six total folders in my Documents, one of which is a folder named “STAT 331.” Inside this folder is a sub-folder named “Week 1,” which also has a sub-folder (a sub-sub-folder) named “Lab 1.”\nOn a Mac, every file lives on the hard drive (it doesn’t have letters like a PC), so the “full path” to get to my Lab 1 folder would be:\n/Users/atheobold/Documents/STAT 331/Week 1/Lab 1",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-1-quarto.html#check-in-1.3-stat-331-folder",
    "href": "weeks/week-1-quarto.html#check-in-1.3-stat-331-folder",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "1.2 ✅ Check-in 1.3: Stat 331 Folder",
    "text": "1.2 ✅ Check-in 1.3: Stat 331 Folder\nTake a screenshot of your class directory, showing:\n\nthe location of your Stat 331 folder\na Week 1 sub-folder\na Lab 1 sub-sub-folder (inside the Week 1 folder)\n\n\n\n\n\n\n\nYour folder cannot synch with anything online!\n\n\n\nYour STAT 331 folder cannot be in a folder stored on OneDrive or iCloud! Storing your folder in this location will cause your code to periodically not run and I cannot help you fix it.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-1-quarto.html#downloading-quarto",
    "href": "weeks/week-1-quarto.html#downloading-quarto",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "2.1 Downloading Quarto",
    "text": "2.1 Downloading Quarto\nThe software associated with Quarto is automatically downloaded with the newest versions of RStudio. So, if you are using the most up to date version of RStudio (as instructed in Part 1 of this week’s coursework), you should already have Quarto installed on your computer. But, let’s test it out.\nTo ensure you have Quarto installed, carry out the following process:\n\nOpen RStudio\nClick on “File” (in the upper navigation bar)\nSelect “New File” (in the dropdown options)\nSelect “Quarto Document…” (in the dropdown option)\n\n \nIf you have Quarto installed, you should be prompted with the following menu:\n\nIf, instead, you receive a message saying Quarto is not installed on your computer, you need to download Quarto: https://quarto.org/docs/download/",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-1-quarto.html#introduction-to-quarto",
    "href": "weeks/week-1-quarto.html#introduction-to-quarto",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "2.2 Introduction to Quarto",
    "text": "2.2 Introduction to Quarto\n\n📖 Required Reading: Intro to Quarto\n\n\nHTML Documents\nWe will exclusively use HTML documents in this course. If you are interested in learning more about formatting options for Quarto HTML documents, I would recommend checking out:\n\na discussion of the basics of formatting HTML documents in Quarto\nthe list of all HTML Ffrmatting pptions for Quarto documents",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-1-quarto.html#check-in-1.4-quarto-documents",
    "href": "weeks/week-1-quarto.html#check-in-1.4-quarto-documents",
    "title": "Week 1, Part 2: Reproducible Analyses with Quarto",
    "section": "2.3 ✅ Check-in: 1.4 Quarto Documents",
    "text": "2.3 ✅ Check-in: 1.4 Quarto Documents\nQuestion 1: What are the options at the top of a Quarto document (between the --- and --- symbols) called?\n\nXML\nYAML\nREML\nTOML\n\nQuestion 2: What symbols create an R code chunk?\n\n```\n{r}\n```{r}\n`{r}`\n\nQuestion 3: What symbol defines a heading?\n\n$\n_\n*\n#\n\nQuestion 4: When working in a Quarto document, the [visual / source] editor will display the raw Quarto document, whereas the [visual / source] will display the document as it will appear when it is rendered.\nQuestion 5: To produce an HTML report from your Quarto document, you need to click the ____ button.\n\nVisual\nRender\nRender on Save\nSave",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 2 - Quarto"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html",
    "href": "portfolio/portfolio-instructions.html",
    "title": "Portfolio Instructions",
    "section": "",
    "text": "A portfolio is a collection of work that gives information about the person doing the work. Artists and architects, for example, have portfolios that show the range and scope of what they do, and by looking through their portfolios, you get a sense of who this person is, how they have grown as a professional, what they have produced, and what they are capable of producing.\nThat’s the spirit intended for the STAT 331 Portfolio. In your portfolio, you will give a curated collection of your best work along with reflections that tell the story of your growth from the first day of classes all the way to the end. Your goal is to argue, convincingly and with concrete evidence, that you have met the criteria for both content proficiency, evidence of continued learning, and growth as a team member that goes with a particular grade. I will read your portfolio carefully, and if you make a convincing case for a grade, that’s the grade you’ll receive.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#what-is-the-portfolio-and-how-will-it-be-used",
    "href": "portfolio/portfolio-instructions.html#what-is-the-portfolio-and-how-will-it-be-used",
    "title": "Portfolio Instructions",
    "section": "",
    "text": "A portfolio is a collection of work that gives information about the person doing the work. Artists and architects, for example, have portfolios that show the range and scope of what they do, and by looking through their portfolios, you get a sense of who this person is, how they have grown as a professional, what they have produced, and what they are capable of producing.\nThat’s the spirit intended for the STAT 331 Portfolio. In your portfolio, you will give a curated collection of your best work along with reflections that tell the story of your growth from the first day of classes all the way to the end. Your goal is to argue, convincingly and with concrete evidence, that you have met the criteria for both content proficiency, evidence of continued learning, and growth as a team member that goes with a particular grade. I will read your portfolio carefully, and if you make a convincing case for a grade, that’s the grade you’ll receive.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#key-information",
    "href": "portfolio/portfolio-instructions.html#key-information",
    "title": "Portfolio Instructions",
    "section": "Key information",
    "text": "Key information\nFormat: You’ll put all of your work — both the artifacts of past work and the responses to the writing prompts — into one GitHub repository. If you choose for this repository to be public, you only need to provide me with the link to the repo. If you choose for this repository to be private, you will need to add me as a collaborator to your repo.\nTemplate: Here is a template repository you can use to guide how you should organize your portfolio: https://github.com/atheobold/STAT331_portfolio_template\nDue date: The portfolio is due the Saturday before finals week. No deadline extensions are available for the Final Portfolio.\nWhat to include: Your portfolio needs to contain all of the following:\n\nFinal grade reflection: this is a document housing examples of code you’ve written which demonstrate your achievement of the course’s learning objectives, reflections about how you revised your thinking throughout the course, examples of how you extended your thinking, and reflections and examples of how you grew as a collaborator.\nSupporting artifacts – These are all of the assignments you reference in your final grade reflection. You are able to use any Lab or Challenge assignment submitted, but please keep these focused, and be selective.\nEssay responses. Write brief responses to each of the essay prompts listed below under Essays. Put each essay response on its own page. (All of the “Lightning Round” responses should go on the same page, however.)",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#final-grade-reflection",
    "href": "portfolio/portfolio-instructions.html#final-grade-reflection",
    "title": "Portfolio Instructions",
    "section": "Final grade reflection",
    "text": "Final grade reflection\nThis component is a self-evaluation of your performance in the class. Your goal is to state clearly what grade you think you have earned in the course, and convincingly argue that you have met the criteria for that grade. Please be thoughtful, honest, and reflective, but also brief and focused.\nThis reflection will be done in the reflection_template.qmd file provided in the repository. The structure of the document is as follows:\n\nWhat grade did you earn? State it clearly in one sentence. You can include plus/minus modifiers; see below about those.\nFor each of the learning targets, carefully select examples of your code that demonstrate concretely and directly your proficiency with the given target.\n\n\nSome learning targets ask for one example, some ask for two examples, and some ask for specific examples relative to particular data types.\nYour Lab assignments and Challenge problems should be a primary source of these examples, but you can also include other items. Anything that supports your argument for a grade can be submitted.\nYou must indicate where the code you provided came from, including the title of the assignment and problem number either next to the code title (e.g., xlsx\nLab 2 Question 1) or as a code comment at the top of the code chunk.\nNote, your code is not expected to run! The execute options at the top of the Quarto file are set to eval: false. Thus, you do not need to load in any packages or datasets in your reflection.\n\n\nHow did you meet that grade’s requirements? The requirements for grades are found in the course syllabus section of the syllabus. Review the criteria carefully. Then, explain how you have satisfied the criteria for the grade you are saying you’ve earned. Be specific and thorough. List each criterion you have met and how you know you’ve met it. Refer to specific artifacts or examples in the Portfolio that support your case. Again, keep it brief and focused on concrete evidence that the criteria have been met.\nWhat else? There may be some other criteria that figures into your grade request that isn’t explicitly listed in the syllabus. If so, state the criteria you’re thinking of, explain why they are useful criteria for your grade determination, and then explain how well you met those criteria (and provide evidence in the artifacts, if applicable). As with the syllabus criteria, be focused, specific, and thorough — and refer to specific artifacts that provide evidence.\n\nPlus/minus grades: You may argue to add a “+” or “-” modifier to your grade. Generally speaking a “+” added to a letter grade means you’ve met all the criteria for the letter grade along with a significant amount, but not all, of the criteria for the next letter grade up. And a “-” means that you have met the requirements for a letter grade but only in a way that you believe is a bare minimum, or you’ve met almost all the requirements for the letter grade except for a small number of minor criteria.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#revisions",
    "href": "portfolio/portfolio-instructions.html#revisions",
    "title": "Portfolio Instructions",
    "section": "Revisions",
    "text": "Revisions\nYou can revise any Lab Assignment or Challenge one additional time before including it in the portfolio. If you do so, please note:\n\nDo not submit the revised Lab Assignment or Challenge to Canvas. Just put the revision in the Portfolio.\nIf you chose to complete an additional revision for the Portfolio, please indicate this to me. For example in the reference to the code location, indicate a revision has been made (e.g., right_join() - Challenge 4 (Revised))\nYou won’t get any additional feedback for revisions done for the Portfolio. If you want feedback on a solution, submit it as an ordinary homework revision.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#essays",
    "href": "portfolio/portfolio-instructions.html#essays",
    "title": "Portfolio Instructions",
    "section": "Essays",
    "text": "Essays\nIn your Portfolio repository, there is a folder labeled essays which includes three separate .qmd files. You are expected to address the essay prompt(s) in each file.\n\nGrowth as a data scientist: Describe how you have improved as a practitioner and student of data science this quarter through your work in the course. Focus specifically on data science concepts and the skills we employed in learning them. Don’t just give a laundry list of topics that you learned (those are in the syllabus, so we know them already). Focus instead on a small number of specific areas of growth for you that happened in STAT 331. Identify at least one artifact in your portfolio that illustrates each area of growth. Explain in this essay how this artifact shows growth in the way you are describing.\nThe power of efficiency: As we’ve said in the class efficiency is a pivotal component of statistical computing (and data science). In this essay, give an explanation of what that term “efficiency” means in relation to statistical computing and describe some places where you encountered efficiency and understood its importance. Include: What is the definition of “efficiency”? What does efficiency look like in statistical computing / data science? What does efficiency allow you to do? Why is efficiency important? Where did you encounter efficiency, and what were some “a-ha” moments you had about efficiency? (For the latter, tie each a-ha moment to an artifact in the portfolio.)\nLightning round: Answer each of the following questions with one sentence including a brief explanation.\n\nFinish the sentence with another student’s name: “If [Student] doesn’t earn an A, then nobody should, because…” Explain your choice and your reasoning.\nWhat was the most difficult part of the class for you? List a general topic, a specific problem, a kind of work we did, etc. and explain why.\nWhat was the easiest part of the class for you? Explain why.\nWhat part of the class surprised or interested you the most? Explain why.\nGive one piece of advice to a student just beginning a quarter of STAT 331 that will help them be successful in learning.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#about-time-and-effort",
    "href": "portfolio/portfolio-instructions.html#about-time-and-effort",
    "title": "Portfolio Instructions",
    "section": "About time and effort",
    "text": "About time and effort\nAs your instructor, I understand and respect that you have spent a great deal of time and effort on this course and will probably continue to do so until the end of the quarter. It’s possible that STAT 331 has been the most challenging course on your schedule this quarter, perhaps in your entire college career so far. I want you to know that I see you, I respect your efforts, and it’s extremely fulfilling to see you respond to the challenges and grow.\nI also want to be clear that while the time and effort spent on the class are vitally important, they are not explicitly part of the grade criteria you find in the syllabus. So, when you make the case for your grade in the portfolio, I respectfully ask that you keep your argument focused on concrete evidence of understanding of the learning targets and engagement with the class.\nYou are free to discuss your investment in time and effort in the essay questions if you like, or apart from the portfolio if that makes more sense. But when making the case for your grade, the focus needs to be on the results of your investment of time and effort. Did your efforts result in several exemplary solutions through the quarter? If so, put a subset of them in the Portfolio. Did the time you spend on coursework result in being an engaged collaborator during Practice Activities? If so, document how your efforts made you a valuable group member.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "portfolio/portfolio-instructions.html#questions-you-might-have",
    "href": "portfolio/portfolio-instructions.html#questions-you-might-have",
    "title": "Portfolio Instructions",
    "section": "Questions you might have",
    "text": "Questions you might have\n\nQ: What if you disagree with our final grade reflection?\n\nA: There are two ways this might happen.\n\nYou ask for a grade that is higher than the evidence supports. That is, you grade yourself too highly, for example you believe you earned an A in the course, but I do not feel the evidence you’ve provided supports this grade. If this occurs in your Midterm Portfolio, I will discuss this with you in your 5-minute Midterm Portfolio meeting.I’ll tell you what grade I would have given you based on the evidence you provided in the portfolio. You can then use this feedback when constructing your final portfolio. If I believe the grade you’ve proposed in your Final Portfolio does not reflect the evidence you’ve provided, I will discuss this with you in your 5-minute Final Portfolio meeting. I’ll tell you what grade I would have given you based on the evidence you provided in the portfolio, and then give you the chance to provide additional evidence and explanations for your grade request. In our meeting, if you still think your grade request is correct, you’ll have the chance to walk me through your materials and reasoning. Afterwards, I might agree with you. But if we still disagree, we will try to come to an agreement on the highest grade that the evidence supports. I have faith that we’ll be able to come to a mutually-agreeable result. But, if we can’t, I will assign the grade that in my estimation is the highest grade supported by the evidence, and my determination will be final. However, again, I will exhaust all other options before simply overriding your grade determination.\nYou ask for a grade that was lower than your actual performance indicates. That is, you “lowball” yourself, for example you say you earned a B when in fact I think you earned an A-. In this case, I will award you the grade I think you earned, and then just inform you that I’ve done so (and why).\n\nIn my experience, the second situation happens significantly more frequently than the first.\n\n\n\nQ: Is there a limit on the number of artifacts I can include to support my grade?\n\nA: There is no strict limit, but please be selective.\nQuality, not quantity is what we are after. We do not want every assignment in our portfolio! Typically you should be able to give a complete portfolio in fewer than 8 assignments with judicious selection of homework solutions and other work. A handful of homework solutions that clearly indicate your attainment of the grade criteria is just as good as, if not better than, a massive binder of mediocre examples.\n\n\n\nQ: How specific or detailed do I need to be on some of the criteria? For example, do I need to list all the dates when I answered someone’s question on Discord?\n\nA: This isn’t filing your taxes, so a precise down-to-the-minute accounting of your work isn’t necessary.\nDetails and your reasoning are more important than precision and completeness here. For example if you made a handful of supportive comments in Discord, pick a few and tell me about them. What was the question about? What did you say? Why was that comment an example of “helpful feedback”? (Do you know that it was helpful?) Remember the purpose is to make a convincing case that you’ve earned a particular grade.\n\n\n\nQ: Would someone actually make a case that they earned a “D” in the class?\n\nA: Yes, if the person is honest and there’s not enough evidence to make the case for a “C”.\nIf you’re in that situation, be honest and don’t overreach just because the consequences are significant.\n\n\n\nQ: How long should the essays be?\n\nA: You should put serious effort into each of the essays and give thorough, detailed, and thoughtful responses — without going overboard and writing more than you need.\nThere is no hard word or character count here, but if you are writing less than half a page using ordinary font and line spacing, then you probably need to spend more time carefully reflecting on the question; if you are writing more than two pages for a single essay, you might consider editing it down for clarity. As always, put yourself in the shoes of your readers and then use your judgment as a writer.\n\n\n\nQ: What if you do not submit a final portfolio?\n\nA: If you do not complete a Final Portfolio submission, your grade will be at my discretion.\nI will use your Midterm Portfolio as well as completion of assignments from Week 7 - 10 to guide my decision.\nI’ll add more questions and answers in this space as they come up.",
    "crumbs": [
      "Portfolio",
      "Portfolio Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html",
    "href": "group-activities/week-1/broken-circles.html",
    "title": "Broken Circles",
    "section": "",
    "text": "This activity is designed to explore how working in groups can be more or less successful."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#instructions",
    "href": "group-activities/week-1/broken-circles.html#instructions",
    "title": "Broken Circles",
    "section": "Instructions",
    "text": "Instructions\nThe class will divide into groups of six (6) students. Each of you will be given an envelope with 2-3 pieces of a circle. The goal of this exercise is to put these pieces together in such a way that each member of your group ends up with a complete circle. However, there are a few additional rules to keep things fun:\n\nThis exercise must be done in complete silence. No talking is permitted.\nYou may not point or signal to other players with your hands in any way.\nEach player must put together their own circle. No one else may show a player how to assemble their circle or do it for them.\nThis is an exercise in giving. You may not take a piece from another player, but you may give your pieces—one at a time—to any other member of your group, and members of your group may give pieces to you. As per the previous rule, you may not place a piece in another person’s puzzle; players must complete their own puzzle. Instead, you are expected to hand the piece to the other player."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#getting-started",
    "href": "group-activities/week-1/broken-circles.html#getting-started",
    "title": "Broken Circles",
    "section": "Getting Started",
    "text": "Getting Started\nNow that you know the rules, let’s get started! Take the pieces out of your envelope and place them in front of you. Remember, this is a group task. The activity is not completed until everyone in your group has a completed circle in front of them.\nYou have 10-minutes to make your circles. When your group has finished, raise your hand. If you have time remaining, I may ask you to find another way to put the pieces together to form different circles."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#discussion",
    "href": "group-activities/week-1/broken-circles.html#discussion",
    "title": "Broken Circles",
    "section": "Discussion",
    "text": "Discussion\n\nWhat do you think this game was about? What was its purpose?\nWhat did your group did that made you cooperate more successfully?\nWhat did your group did that made cooperation harder?\nWhat are some behaviors that could be implemented in the future to make cooperation easier?"
  },
  {
    "objectID": "course-materials/course_resources.html",
    "href": "course-materials/course_resources.html",
    "title": "R Resources",
    "section": "",
    "text": "Tip\n\n\n\nClick on the link to access the R Cheatsheet related to a specific topic / package!\n\n\n\nWeekly R Cheatsheets\nWeek 1\n\nRStudion IDE\nQuarto\nBase R\nGit & GitHub\n\nWeek 2\n\nData Visualization with ggplot2\nData Import with readr\n\nWeek 3\n\nData Wrangling with dplyr\n\nWeek 4\n\nData Tidying with tidyr\nFactors with forcats\n\nWeek 5\n\nDates with lubridate\nStrings with stringr\nRegular Expressions\n\nWeek 7\n\nTidy Evaluation\n\nWeek 8\n\nIteration with purrr",
    "crumbs": [
      "Course information",
      "R Resources"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html",
    "href": "course-materials/course-syllabus.html",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "",
    "text": "Dr. Hunter Glanz\nYou can call me Professor, Professor/Prof. Glanz or Dr. Glanz.\n Email: hglanz@calpoly.edu\n Office: Building 25 Office 111\nEmail:\n\nOnly email me with your @calpoly.edu email – I cannot respond to other email addresses\nStart your email subject line with “[STAT 331]”\nI will do my best to respond within 24 hours during the week\nIf you send me an email past 7pm or on the weekend, I will likely not respond until the morning of the next working day\nYou should only email me about things that relate to you as an individual. Any other questions should be posted on the course Discord (more details below).\n\nCourse Discord Page:\nFor questions of general interest, such as course clarifications or conceptual questions, please use the course Discord page (you will join this Week 1). If you have a question – someone else in class does too! I encourage you all to respond to each other. I will check Discord at least twice each weekday during working hours (8-6) to ensure that questions are being answered accurately.\nI encourage you to give your post a concise and informative initial sentence, so that other people can find it. For example, “How do I color bars in a barplot with ggplot?” is a better opening sentence than “help with plotting”.\nYou may post snippets of your code and errors on Discord, but please do not post full solutions to lab assignments.\n While your posts are not anonymous, in this case there is no such thing as a bad question!",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#revisions",
    "href": "course-materials/course-syllabus.html#revisions",
    "title": "STAT 331, Fall 2024",
    "section": "3.1 Revisions",
    "text": "3.1 Revisions\nThe grading system for this class encourages you to submit revisions on Lab and Challenge problems you were not initially successful with. When I grade your Lab and Challenge assignments, I will mark each problem with an S, a G, or an N. You will have the option to retry any Learning Targets for which you scored a G or an N on. When you complete revisions, you will submit a new HTML containing your revisions, alongside written reflections of how your understanding changed from when you first attempted the problem. These reflections are expected to be written immediately below the problem which you revised.\nIt’s not enough to say “[x] was wrong, so I fixed it”—I need you to talk about why you got [x] wrong in the first place and what you learned that changed your mind. What do you know now that you didn’t know before? Who or what helped you learn?\n\nIf your revision does not include reflections, I’ll ask you to add them.\nIf your revisions do not include reflections by the deadline, your revisions are not eligible to be regraded.\nSee some examples of really good reflections here – they’re (mostly) from my STAT 313 course, but I think you’ll get the idea.\nSubmit your revision to the same assignment box on Canvas as your original. This helps me keep track of any outstanding revisions each person has.\n\nIt is my goal to have your lab and challenge assignments (which are due on Sunday night) back to you no later than Thursday, so we can spend time talking about the revisions during class. You will then have until the following Friday to complete your revisions on the problems you received a G or an N on.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#accomplishment-of-learning-targets",
    "href": "course-materials/course-syllabus.html#accomplishment-of-learning-targets",
    "title": "STAT 331, Fall 2024",
    "section": "4.1 Accomplishment of Learning Targets",
    "text": "4.1 Accomplishment of Learning Targets\nEach week, a set of learning targets will be outlined. These learning targets will not exist solely within a given week. You will find that the skills you learn early in the course will be used throughout the course. Whereas, some skills, learned later in the course, will not be used as often. You can demonstrate proficiency with these skills through three main avenues: Group-based Practice Activities Lab Assignments Challenge Assignments\nHowever, evidence of continued learning can only be demonstrated within individual lab assignments. You can keep track of your progress yourself using this Interactive Checklist.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#evidence-of-continued-learning",
    "href": "course-materials/course-syllabus.html#evidence-of-continued-learning",
    "title": "STAT 331, Fall 2024",
    "section": "4.2 Evidence of Continued Learning",
    "text": "4.2 Evidence of Continued Learning\nEach week, you will be required to complete a Lab and Challenge assignment where you demonstrate your understanding of that week’s learning targets in the context of a new dataset. These assignments provide two different perspectives of your continued learning.\n\nThey demonstrate your ability to extend your thinking beyond what you’ve learned in class.\nThey demonstrate your ability to revise your thinking.\n\n\nExtend Your Thinking\nEach Lab Assignment will have a Challenge Problem which asks you to extend the skills you’ve learned in class in a new way. You will often have the choice of what direction you would like to expand your knowledge. There are no specific requirements for how you extend your skills, only that you extend your thinking in some (measurable) way.\n\n\nRevise Your Thinking\nFor the problems in each Lab Assignment, I will give copious written feedback, but I’ll also summarize my feedback with a letter on the SGN scale (as discussed previously). To demonstrate your ability to revise your thinking, I encourage you to revise and resubmit any problems marked G or N.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#growth-as-a-team-member",
    "href": "course-materials/course-syllabus.html#growth-as-a-team-member",
    "title": "STAT 331, Fall 2024",
    "section": "4.3 Growth as a Team Member",
    "text": "4.3 Growth as a Team Member\nThere are two ways you will evaluate your growth as a team member. The first is through your collaboration with your team members. The second is through the code reviews you provide your peers.\n\nCollaborative Group Work\nThis course uses collaborative learning to provide a supportive community when initially exploring the concepts associated with each week. On Tuesdays, you will collaborate in assigned teams to complete a Practice Activity. Collaborating on the Practice Activity is more than independently coding each task and asking someone a question when you get stuck. Collaborating is working together with your team to accomplish each question.\nMany people are uncomfortable working in a team for a variety of reasons, such as fearing looking dumb, being rejected, or being disrespected. It is my hope that our weekly collaborations will offer opportunities for you to grow as a group member, by becoming more aware of how you interact with others.\nDuring the first week of class, each of you will be placed in a group with one other student. During Weeks 2-5, you will work with this person on the Practice Activities we complete during class on Tuesdays. To make group collaborations more equitable, I expect for you and your partner to alternative between two “roles”—Developer and Coder. We will discuss these roles in class, but you can find descriptions of the scope of each role on the Pair Programming Roles document.\n\n\nPeer Code Review\nOne of my favorite sayings is “Programs must be written for people to read, and only incidentally for machines to execute.” Code review has two major benefits, (1) you get feedback on the readability, tidiness, and efficiency of your code, and (2) by reviewing someone else’s code you learn more about your own code!\nHere are some guidelines and examples of what you should be looking for and how to phrase your peer code reviews.\nYou hopefully noticed that writing “tidy” and “efficient” code are two of the Learning Targets for this course. To demonstrate proficiency in these targets, you will earn badges from your peers. For each lab assignment, everyone in the class will provide an anonymous review of someone’s code. The reviewer will provide feedback on the tidiness and efficiency of the code they are reviewing. I will provide some examples of helpful and unhelpful feedback, to guide your feedback. It’s easy to be a jerk when making comments; don’t. Think about the comments you would like to receive that would help you improve your code! Be good to each other.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#how-do-you-define-plagiarism-in-a-programming-class",
    "href": "course-materials/course-syllabus.html#how-do-you-define-plagiarism-in-a-programming-class",
    "title": "STAT 331, Fall 2024",
    "section": "12.1 How do you define plagiarism in a programming class?",
    "text": "12.1 How do you define plagiarism in a programming class?\nParaphrasing or quoting another’s work without citing the source is a form of academic misconduct. This included the R code produced by someone else! Writing code is like writing a paper, it is obvious if you copied-and-pasted a sentence from someone else into your paper because the way each person writes is different.\nIn this class the assumed knowledge is the course materials, including the course textbook, coursework pages, and course slides. Any functions / code used outside of these materials require direct references. This includes any functions learned through R documentation for functions we have learned. Meaning, if you look up the help file for mutate() and you learn about a function not covered in the course materials, you are required to cite the documentation when using that function.\nEven inadvertent or unintentional misuse or appropriation of another’s work (such as relying heavily on source material that is not expressly acknowledged) is considered plagiarism. If you use external resources such as Google or ChatGPT, I expect you to indicate this in your assignment.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) pasting the link to your chat (using the Share button from ChatGPT) so I can see your entire conversation with ChatGPT.\n\nChatGPT cannot be used for group activities (e.g., Practice Activities), only individual assignments (e.g., Labs, Challenges).\nIt is both good professional practice and academic integrity to cite any resources you used during your work. The first incident of failing to cite your resources, will result in a warning. The second incident of failing to cite your resources will result in a 0 on the assignment, meaning you will not be able to include any code from that Lab or Challenge in your Final Portfolio. You will also be reported to the Office of Student Rights and Responsibilities.\nIf you have any questions about using and citing sources, you are expected to ask for clarification.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-overview.html",
    "href": "course-materials/course-overview.html",
    "title": "Statistical Computing with R",
    "section": "",
    "text": "Have you ever wondered…\n\n…how are the visualizations you see in the media made?\n…how do people cut down large datasets to address a specific question?\n…how the applet simulations in your statistics classes work? \n\nWe’ll answer these questions and more by studying the principles of “statistical computing” methods in the programming language called R. There is not an expectation that you have seen R before, only that you have some experiences with computing (writing code and executing code). For those who have not seen R before, it is an open-source programming language developed by Statisticians, and is one of the main “languages” you will find people use when doing statistics in the wild.\nIn this course, we will learn the foundational skills for programming in R and a variety of skills for working with data. We will then build on these skills to consider how to write programs which are more efficient.\n\n\n\nArtwork by @allison_horst.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "course-materials/computing-access.html",
    "href": "course-materials/computing-access.html",
    "title": "Computing access",
    "section": "",
    "text": "This course focuses on teaching you to program in R, so you will need to locally install R & RStudio to be able to complete the coursework for this class.",
    "crumbs": [
      "Course information",
      "Access"
    ]
  },
  {
    "objectID": "course-materials/computing-access.html#equipment",
    "href": "course-materials/computing-access.html#equipment",
    "title": "Computing access",
    "section": "Equipment",
    "text": "Equipment\nThe Statistics Studio was recently remodeled and there are no longer desktop computers in the Studio for you to use. There are monitors you can plug a laptop into, but you are required to bring a laptop to class.\n\n\n\n\n\n\nChromebooks and iPads\n\n\n\nThese devices will not be sufficient to use R. If this requirement is limiting for you, please contact me ASAP.",
    "crumbs": [
      "Course information",
      "Access"
    ]
  },
  {
    "objectID": "course-materials/computing-access.html#statistical-software-r-and-rstudio",
    "href": "course-materials/computing-access.html#statistical-software-r-and-rstudio",
    "title": "Computing access",
    "section": "Statistical Software: R and RStudio",
    "text": "Statistical Software: R and RStudio\nWe will (obviously) be using the R statistical software throughout this course. In addition, you are required to use RStudio, a companion integrated developer environment (IDE). Both R and R Studio are freely available.\n\nYou can download the most recent version of R here: https://cran.r-project.org/\nYou can download the most recent version of RStudio here: https://posit.co/download/rstudio-desktop/\n\n\n\n\n\n\n\nFree Quarto Install\n\n\n\nWhen you update / install RStudio, the IDE now automatically installs Quarto. So, you do not need to also install Quarto.",
    "crumbs": [
      "Course information",
      "Access"
    ]
  },
  {
    "objectID": "course-materials/computing-access.html#version-control",
    "href": "course-materials/computing-access.html#version-control",
    "title": "Computing access",
    "section": "Version Control",
    "text": "Version Control\nWe will also be using version control in this course. This requires you to do the following:\n\ninstall Git (https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\ncreate a GitHub account (https://github.com/)",
    "crumbs": [
      "Course information",
      "Access"
    ]
  },
  {
    "objectID": "course-materials/course-support.html",
    "href": "course-materials/course-support.html",
    "title": "Course support",
    "section": "",
    "text": "Most of you will need help at some point and we want to make sure you can identify when that is without getting too frustrated and feel comfortable seeking help.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#lectures-and-labs",
    "href": "course-materials/course-support.html#lectures-and-labs",
    "title": "Course support",
    "section": "Lectures and labs",
    "text": "Lectures and labs\nIf you have a question during lecture or lab, feel free to ask it! There are likely other students with the same question, so by asking you will create a learning opportunity for everyone.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#student-hours",
    "href": "course-materials/course-support.html#student-hours",
    "title": "Course support",
    "section": "Student Hours",
    "text": "Student Hours\nA lot of questions are most effectively answered in-person, and student hours are the best place to come ask me questions! I encourage each and every one of you to take advantage of this resource! Make a pledge to stop by office hours at least once during the first three weeks of class. If you truly have no questions to ask, just stop by and say hi and introduce yourself.\n\n\n\nTuesdays\n2:10 pm – 3:00 pm (in-person)\n\n\nThursdays\n2:10 pm - 3:00 pm (in-person)",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#discord",
    "href": "course-materials/course-support.html#discord",
    "title": "Course support",
    "section": "Discord",
    "text": "Discord\nWe will use Discord to manage questions and responses regarding course content. There are channels for the different components of each week (e.g., Week 1 Lab Assignment). Please do not send an email about homework questions or questions about the course material. It is incredibly helpful for others in the course to see the questions you have and the responses to those questions. I will try to answer any questions posted to Discord within 3-4 hours (unless it is posted at midnight). If you think you can answer another student’s question, please respond!",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#email",
    "href": "course-materials/course-support.html#email",
    "title": "Course support",
    "section": "Email",
    "text": "Email\nPlease refrain from emailing any course content questions (those should be posted to Discord), and only use email for questions about personal matters that may not be appropriate for the public course forum (e.g., illness, accommodations, etc.). For such matters, you may email Dr. Hunter Glanz at hglanz@calpoly.edu.\nI do my best to reply to emails promptly and helpfully. However, I receive a lot of emails. To help both you and me, here are some specific expectations about emails:\n\nPlease tell me what course and section (by time or number) you are in!\nIf you email me between 9am and 4pm on Monday through Friday, I’ll try my best to reply to you on the same day.\nIf you email me outside of those hours, I will do my best to respond to you by the next working day.\nIf your question is much easier to discuss face-to-face, I may ask you to meet with me in my office or on Discord (at a time that works for both of us) rather than answering directly in an email.\nInclude any relevant photos / screenshots / error messages / PDFs / links with your email.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#well-being-access-and-accommodations",
    "href": "course-materials/course-support.html#well-being-access-and-accommodations",
    "title": "Course support",
    "section": "Well-being, Access, and Accommodations",
    "text": "Well-being, Access, and Accommodations\n\nWhat if I have accommodations or feel that accommodations would be beneficial to my learning?\nI enthusiastically support the mission of Disability Resource Center to make education accessible to all. I design all my courses with accessibility at the forefront of my thinking, but if you have any suggestions for ways I can make things more accessible, please let me know. Come talk to me if you need accommodation for your disabilities. I honor self-diagnosis: let’s talk to each other about how we can make the course as accessible as possible. See also the standard syllabus statements, which include more information about formal processes.\n\n\nI’m having difficulty paying for food and rent, what can I do?\nIf you have difficulty affording groceries or accessing sufficient food to eat every day, or if you lack a safe and stable place to live, and you believe this may affect your performance in the course, I urge you to contact the Dean of Students for support. Furthermore, please notify me if you are comfortable in doing so. This will enable me to advocate for you and to connect you with other campus resources.\n\n\nMy mental health is impairing my ability to engage in my classes, what should I do?\nNational surveys of college students have consistently found that stress, sleep problems, anxiety, depression, interpersonal concerns, death of a significant other and alcohol use are among the top ten health impediments to academic performance. If you are experiencing any mental health issues, I and Cal Poly are here to help you. Cal Poly’s Counseling Services (805-756-2511) is a free and confidential resource for assistance, support and advocacy.\n\n\nSomeone is threatening me, what can I do?\nI will listen and believe you if someone is threatening you. I will help you get the help you need. I commit to changing campus culture that responds poorly to dating violence and stalking.\n\n\nWhat if I can’t arrange for childcare?\nIf you are responsible for childcare on short notice, you are welcome to bring children to class with you. If you are a lactating parent, you many take breaks to feed your infant or express milk as needed. If I can support yo in navigating parenting, coursework, and other obligations in any way, please let me know.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#technology-accommodations",
    "href": "course-materials/course-support.html#technology-accommodations",
    "title": "Course support",
    "section": "Technology accommodations",
    "text": "Technology accommodations\nStudents with demonstrated high financial need who have limited access to computers may request assistance in the form of loaner laptops. For technology assistance requests, please go here. Please note that supplies are limited.\nNote that we will be using Duke’s computational resources in this course. These resources are freely available to you. As long as your computer can connect to the internet and open a browser window, you can perform the necessary computing for this course. All software we use is open-source and/or freely available.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-support.html#course-materials-costs",
    "href": "course-materials/course-support.html#course-materials-costs",
    "title": "Course support",
    "section": "Course materials costs",
    "text": "Course materials costs\nThere are no costs associated with this course. All readings will come from freely available, open resources (open-source textbooks, journal articles, etc.).",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "course-materials/course-team.html",
    "href": "course-materials/course-team.html",
    "title": "Course Instructors",
    "section": "",
    "text": "Dr. Hunter Glanz (he / him) is an Associate Professor of Statistics at Cal Poly in beautiful San Luis Obispo, California. Hunter received his doctorate in Statistics from Boston University. Hunter’s work focuses on innovation in statistics and data science education.",
    "crumbs": [
      "Course information",
      "Teaching team"
    ]
  },
  {
    "objectID": "group-activities/pair-programming-norms.html",
    "href": "group-activities/pair-programming-norms.html",
    "title": "Pair Programming Roles",
    "section": "",
    "text": "During our in-class activities, you will be paired with another student. When completing the activity, you will rotate between the following roles every 2-3 minutes:"
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#group-norms",
    "href": "group-activities/pair-programming-norms.html#group-norms",
    "title": "Pair Programming Roles",
    "section": "Group Norms",
    "text": "Group Norms\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nBe open minded.\nNo cross-talk with other groups.\nCommunicate with each other!"
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#completing-the-task",
    "href": "group-activities/pair-programming-norms.html#completing-the-task",
    "title": "Pair Programming Roles",
    "section": "Completing the Task",
    "text": "Completing the Task\nWorking with your partner, complete the Practice Activity in the Quarto document provided. In your roles—Coder and Developer—use the prompts below to help guide the completion of your activity.\n\n\nCoder\nI am looking for…\nI am confused by…\nI notice…\nWhat might be true is…\nWhat’s important is…\nI predict…\nThis reminds me of…\nWhat if we…\nWe could try…\nI am thinking about…\nA line of code I could write is…\n\n\n\nDeveloper\n\nDo you understand what we need to do?\nWhat’s the question we have for Dr. Theobold? Can we answer the question ourselves?\nWhat are you focusing on?\nWhat are you thinking now?\nCould you tell me more?\nWhat are you doing (or writing) now? Please elaborate.\nI can’t follow that, run that by me again.\n What other sources of information do we need?\nWhich words should we look up?\nWhat else do we need to complete this problem?"
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#once-youre-finished",
    "href": "group-activities/pair-programming-norms.html#once-youre-finished",
    "title": "Pair Programming Roles",
    "section": "Once You’re Finished",
    "text": "Once You’re Finished\nAt the end of the task, your group will have one completed Quarto document and one rendered HTML, containing your groups’ worked-out solutions and justifications. Everyone must take turns writing the final product (as described above) and everyone must be able to explain every line of code in your final document."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html",
    "href": "group-activities/week-2/expert-designer.html",
    "title": "Expert Designer",
    "section": "",
    "text": "This activity is designed to simulate the environment in which you will be working for the weekly Practice Activities."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#instructions-roles-rules",
    "href": "group-activities/week-2/expert-designer.html#instructions-roles-rules",
    "title": "Expert Designer",
    "section": "Instructions, Roles, & Rules",
    "text": "Instructions, Roles, & Rules\nGet into groups of four (4) students. Similar to last week’s Broken Circles activity, each of you has an envelope containing different shapes.\n\nDesigner\nIn this activity, one person in your group will take on the role of the “designer,” two members will be the “players,” and one person will be the “observer.” The designer uses every shape in the envelope to create a design that is not shared with anyone else. The designer is then tasked with instructing the players how to replicate the design they created, but there are some rules.\n\nThe designer cannot touch the players shapes.\nThe designer cannot tell the players how to assemble the shapes into the correct design.\nThe designer can respond to questions posed by the players.\n\n\n\nPlayers\n“Players” are tasked with solving the design made by the “designer.” Players can pose questions to the designer to uncover their design. Once an player believes they have figured out the design, the designer should check their solution. If the designer says the solution is correct, then the player can assist the designer in answering questions posed by the other players.\n\n\nObserver\nThe “observer” is tasked with monitoring the interactions between the designer and the players. Specifically, the observer should check off the number of times they see two behaviors occurring, (1) explaining by telling how, and (2) everybody helps. The observer should have a scoring sheet to tally the number of times they see each behavior."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#getting-started",
    "href": "group-activities/week-2/expert-designer.html#getting-started",
    "title": "Expert Designer",
    "section": "Getting Started",
    "text": "Getting Started\nChoose one person in your group to be the first designer. Carry out the process described above until every observer has correctly identified the design. You will have 10-minutes to complete this task.\nOnce you have completed this task, if there is still time remaining your group should choose a new designer and repeat the process."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#discussion",
    "href": "group-activities/week-2/expert-designer.html#discussion",
    "title": "Expert Designer",
    "section": "Discussion",
    "text": "Discussion\n\nWhat do you think this game was about? What was its purpose?\nWhat did your group did that made you cooperate more successfully?\nWhat did your group did that made cooperation harder?\nWhat are some behaviors that could be implemented in the future to make cooperation easier?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing in R",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the quarter. Note that this schedule will be updated as the quarter progresses, with all changes documented here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\n\n\n\n\nDate\n\n\n\n\nTopic & Preview Activities\n\n\n\n\nLecture Slides\n\n\n\n\nPractice Activity\n\n\n\n\nLab & Challenge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\nTues, 1/7\n\n\n\n\nCourse Set-up\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\nTues, 1/7\n\n\n\n\nIntro to R & RStudio\n\n\nIntro to Quarto\n\n\n\n\nWelcome to STAT 331 & Intro to R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 1/9\n\n\n\n\nIntro to Version Control\n\n\n\n\nIntro to Quarto & Version Control\n\n\n\n\n\n\nLab 1 & Challenge 1 Instructions\n\n\nLink to Assignment on GitHub Classroom (due 1/12)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\nTuesday, 1/14\n\n\n\n\nData Visualization with ggplot2\n\n\nData Import & R Projects\n\n\n\n\nBasics of Graphics\n\n\n\n\nPA 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 1/16\n\n\n\n\n\n\nTidy Data, Importing Data & More Advanced Graphics\n\n\n\n\nPA 2 Due by 12pm\n\n\n\n\nLab 2 Instructions\n\n\nChallenge 2 Instructions\n\n\nLink to Assignment on GitHub Classroom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSun, 1/19\n\n\n\n\n\n\n\n\n\n\nLab 2 & Challenge 2 Due by 11:59pm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\nThurs, 1/23\n\n\n\n\nData Wrangling with dplyr\n\n\n\n\nData Wrangling with dplyr\n\n\n\n\nPA 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 1/23\n\n\n\n\n\n\nExtending Data Wrangling Verbs\n\n\n\n\nPA3 Due 1/25\n\n\n\n\nLab 3 Instructions\n\n\nChallenge 3 Instructions\n\n\nLink to Assignment on GitHub Classroom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSunday, 1/26\n\n\n\n\n\n\n\n\n\n\nLab 3 & Challenge 3 Due by 11:59pm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\nTues, 1/28\n\n\n\n\nData Joins and Transformations with tidyr\n\n\n\n\nData Joins + Pivots\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 1/30\n\n\n\n\nWorking with Categorical Variables\n\n\n\n\nExtending Joins, Factors, Clean Variable Names\n\n\n\n\nPA4 Due by 12pm\n\n\n\n\nLab 4 Instructions\n\n\nLink to Assignment on GitHub Classroom Repository\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSun, 2/2\n\n\n\n\n\n\n\n\n\n\nLab 4 & Challenge 4 Due by 11:59pm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\nTues, 2/4\n\n\n\n\nWorking with Strings\n\n\n\n\nUsing stringr to Work with Strings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 2/6\n\n\n\n\nWorking with Dates\n\n\n\n\nUsing lubridate to Work with Dates\n\n\n\n\nPA5 Due by 12pm\n\n\n\n\nLab 5 Instructions\n\n\nLink to GitHub Repository\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSun, 2/9\n\n\n\n\n\n\n\n\n\n\nLab 5 & Challenge 5 Due by 11:59pm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n\nTues, 2/18\n\n\n\n\nWriting your own simple (vector) functions\n\n\n\n\nWriting Vector Functions\n\n\n\n\nPA7 Due 2/20 by 12pm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThurs, 2/20\n\n\n\n\nWriting your own dataframe functions\n\n\n\n\n\n\n\n\nLab 7 Instructions\n\n\nChallenge 7 Instructions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSun, 2/23\n\n\n\n\n\n\n\n\n\n\nLab 7 & Challenge 7 Due by 11:59pm",
    "crumbs": [
      "Course information",
      "Schedule"
    ]
  },
  {
    "objectID": "labs/instructions/challenge-9-instructions.html",
    "href": "labs/instructions/challenge-9-instructions.html",
    "title": "Challenge 9: Formatting Nice Tables",
    "section": "",
    "text": "For this Challenge you will explore how to generate nice looking tables for HTML documents, by applying the skills to your tables from Lab 8 and Lab 9.\nThere are many packages for generating tables, but I prefer the kable() function from the knitr package for simple tables and the gt() function from the DT package for more sophisticated tables.\nI would recommend you think of tables no different from the visualizations you’ve been making. We want all aspects of our tables to be clear to the reader, so the comparisons we want them to make are straightforward. Tables are also a great avenue to display creativity! In fact, there is a yearly RStudio table contest, and here is a gallery of the award winning tables!\nFor simple tables\nFor more sophisticated tables\nFor interactive tables"
  },
  {
    "objectID": "labs/instructions/challenge-9-instructions.html#part-1-formatting-basic-tables",
    "href": "labs/instructions/challenge-9-instructions.html#part-1-formatting-basic-tables",
    "title": "Challenge 9: Formatting Nice Tables",
    "section": "1 Part 1 – Formatting Basic Tables",
    "text": "1 Part 1 – Formatting Basic Tables\nUse the kable() function from the kable package to create nice, basic HTML tables for every table in Lab 8.\n\n\n\n\n\n\nWarning\n\n\n\nSimilar to axis labels in visualizations, every column name in a table should describe what it contains. For example, a column of n is less explanatory than Frequency of Babies."
  },
  {
    "objectID": "labs/instructions/challenge-9-instructions.html#part-2---formatting-nicer-tables",
    "href": "labs/instructions/challenge-9-instructions.html#part-2---formatting-nicer-tables",
    "title": "Challenge 9: Formatting Nice Tables",
    "section": "2 Part 2 - Formatting Nicer Tables",
    "text": "2 Part 2 - Formatting Nicer Tables\nSpice up at least one of your tables from Lab 9 using functions from the gt package.\nSome ideas on how to “spice up” a table:\n\nchange the font and / or font size\nadd a title / subtitle to the table\nadd striping and / or cell borders to the table\ncreate custom formatting of columns\n\n\n\n\n\n\n\nTip\n\n\n\nLuckily, the gt package has an easy function for changing proportions to percentages (fmt_percent()) that you might want to use for your table from Question 2."
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#when-locating-code",
    "href": "slides/week-6/midterm-portfolio.html#when-locating-code",
    "title": "Midterm Portfolio Work Week",
    "section": "When locating code…",
    "text": "When locating code…\n\nfind 1-2 high quality examples (quality &gt; quantity)\nfind examples that hit on multiple learning targets at the same time"
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#for-example..",
    "href": "slides/week-6/midterm-portfolio.html#for-example..",
    "title": "Midterm Portfolio Work Week",
    "section": "For example..",
    "text": "For example..\n\nthe code below could be used to demonstrate proficiency with:\n\n\n\nWD-2 – in two places (select() and starts_with())!\nWD-7\n\n\n\n\n\nWD-4\nR-2 (tidy code)\nPE-4 (the |&gt; is a “modern tool”)\n\n\n\nca_childcare |&gt;\n  select(study_year,\n         mc_infant,\n         mc_toddler,\n         mc_preschool,\n         region\n         ) |&gt;\n  pivot_longer(cols = starts_with(\"mc_\"), \n               names_to = \"age\", \n               values_to = \"median_income\"\n               ) |&gt; \n  mutate(age = fct_relevel(age, \n                          \"mc_infant\",\n                          \"mc_toddler\",\n                          \"mc_preschool\")\n        )"
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#revising-your-thinking-1",
    "href": "slides/week-6/midterm-portfolio.html#revising-your-thinking-1",
    "title": "Midterm Portfolio Work Week",
    "section": "Revising Your Thinking",
    "text": "Revising Your Thinking\n\n“I am wondering if there is a specific number for the amount of assignments that constitutes all but a few for when phrasing like this is used in the grading criteria.”\n\n\n\nNo, but to me this indicates that you are submitting revisions frequently, especially for the “bigger” problems where additional feedback is warranted.\n\n\nIt’s possible that you are selective in the problems you choose to revise and submit for additional feedback. This criteria does not say “Revises entire assignment.”!"
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#includes-thoughtful-reflections-on-why-revisions-are-being-requested.",
    "href": "slides/week-6/midterm-portfolio.html#includes-thoughtful-reflections-on-why-revisions-are-being-requested.",
    "title": "Midterm Portfolio Work Week",
    "section": "“Includes thoughtful reflections on why revisions are being requested.”",
    "text": "“Includes thoughtful reflections on why revisions are being requested.”\n\n\n\n“I added information about where the data comes from, which is important. because without any context data can easily be taken as universal fact, and including context is necessary to show the specific situation the data was collected. In this case, being collected during COVID could have big implications, and without noting that it would be easy to extrapolate these results to other years as well.”\n\n\n\n\n\nDemonstrating an understanding of the “bigger picture” ideas!"
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#extending-your-thinking-1",
    "href": "slides/week-6/midterm-portfolio.html#extending-your-thinking-1",
    "title": "Midterm Portfolio Work Week",
    "section": "Extending Your Thinking",
    "text": "Extending Your Thinking\n\n“I’m confused by what counts as progression and pushing yourself, how is that measured. I think for me I would like a specific amount of challenges and maybe a growth over time of challenging oneself.”\n\n\n\nYou are making an argument about how you have extended your thinking—“pushing yourself” looks different for everyone."
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#supporting-your-peers-1",
    "href": "slides/week-6/midterm-portfolio.html#supporting-your-peers-1",
    "title": "Midterm Portfolio Work Week",
    "section": "Supporting Your Peers",
    "text": "Supporting Your Peers\n\n“While this would be good [following the collaborative protocol], this is hard to measure and to show when arguing for our grades.”\n\n\n\n\n\n\nWhat have you learned about collaboration through the groupwork protocol?\n\nHow have you grown as a collaborator?\n\nHow have you supported your peers through code review?\n\nDo you have a specific code review you are proud of? Show me!\n\nSupporting your peers on Discord can look a variety of ways!\n\nDid you ask questions that others could learn from?\nDid you answer someone’s question?"
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#determining-your-grade-1",
    "href": "slides/week-6/midterm-portfolio.html#determining-your-grade-1",
    "title": "Midterm Portfolio Work Week",
    "section": "Determining Your Grade",
    "text": "Determining Your Grade\n\nI believe my grade equivalent to course work evidenced below to be an __.\n\n\nYour goal is to argue, convincingly and with concrete evidence, that you have met the criteria for both content proficiency, evidence of continued learning, and growth as a team member that goes with a particular grade."
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#plus-minus-modifiers",
    "href": "slides/week-6/midterm-portfolio.html#plus-minus-modifiers",
    "title": "Midterm Portfolio Work Week",
    "section": "Plus / Minus Modifiers",
    "text": "Plus / Minus Modifiers\n\n\n\n+\n\nYou’ve met all the criteria for the letter grade along with a significant amount, but not all, of the criteria for the next letter grade up.\n\n\n\n\n\n\n-\n\nYou have met the requirements for a letter grade but only in a way that you believe is a bare minimum.\nYou’ve met almost all the requirements for the letter grade except for a small number of minor criteria."
  },
  {
    "objectID": "slides/week-6/midterm-portfolio.html#what-if-you-dont-agree",
    "href": "slides/week-6/midterm-portfolio.html#what-if-you-dont-agree",
    "title": "Midterm Portfolio Work Week",
    "section": "What if you don’t agree?",
    "text": "What if you don’t agree?\nThere are two ways this might happen.\n\n\n\n\nYou ask for a grade that is higher than the evidence supports.\n\n\nThat is, you grade yourself too highly. For example, you believe you earned an A in the course, but I do not feel the evidence you’ve provided supports this grade.\n\n\nIn this case, I’ll tell you what grade I would have given you based on the evidence you provided in the portfolio. You can then use this feedback when constructing your Final Portfolio.\n\n\n\n\n\n\n\n\n\nYou ask for a grade that was lower than your actual performance indicates.\n\n\nThat is, you “lowball” yourself, for example you say you earned a B when in fact I think you earned an A-.\n\n\nIn this case, I will tell you what grade I believe you have earned and why."
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html",
    "href": "labs/instructions/lab-5-instructions.html",
    "title": "Lab 5: Murder in SQL City",
    "section": "",
    "text": "For this lab, you will be joining and filtering related datasets to solve a murder mystery!"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-1-making-a-copy-from-github-classroom",
    "href": "labs/instructions/lab-5-instructions.html#step-1-making-a-copy-from-github-classroom",
    "title": "Lab 5: Murder in SQL City",
    "section": "1.1 Step 1: Making a Copy from GitHub Classroom",
    "text": "1.1 Step 1: Making a Copy from GitHub Classroom\nYou can access the Lab 5 materials through the Lab 5 GitHub Repository.\nThis week, to get a copy of the repository, we’re going to follow a slightly different process. Use these steps to fork your own copy of the Lab 5 repository, then clone that repository into RStudio: List of Steps to Fork GitHub Repository"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-5-instructions.html#step-2-making-a-small-change",
    "title": "Lab 5: Murder in SQL City",
    "section": "1.2 Step 2: Making a Small Change",
    "text": "1.2 Step 2: Making a Small Change\nNow, find the lab-5-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s)."
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-5-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 5: Murder in SQL City",
    "section": "1.3 Step 3: Pushing Your Lab to GitHub",
    "text": "1.3 Step 3: Pushing Your Lab to GitHub\nNow for our last step, we need to commit the files to our repo."
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-4-lets-get-started",
    "href": "labs/instructions/lab-5-instructions.html#step-4-lets-get-started",
    "title": "Lab 5: Murder in SQL City",
    "section": "1.4 Step 4: Let’s get started!",
    "text": "1.4 Step 4: Let’s get started!"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#access-the-data",
    "href": "labs/instructions/lab-5-instructions.html#access-the-data",
    "title": "Lab 5: Murder in SQL City",
    "section": "3.1 Access the Data",
    "text": "3.1 Access the Data\nThis code chunk will read in all of the tables of data for you. Don’t modify or remove this!\n\nlibrary(tidyverse)\n\n# If purrr is not detected, install the package\nif (!\"purrr\" %in% installed.packages()) install.packages(\"purrr\")\n\nsource(\"https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R\")"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#solve-the-crime",
    "href": "labs/instructions/lab-5-instructions.html#solve-the-crime",
    "title": "Lab 5: Murder in SQL City",
    "section": "3.2 Solve the Crime",
    "text": "3.2 Solve the Crime\n\n3.2.1 Crime Scene Report\nDetective Wickham reaches out to you…\n\nA crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police department’s database and follow the clues to find the person responsible for the murder?!\n\n\n# Code for looking at the relevant crime scene report.\n\nFollow the evidence to the person responsible for the murder, building a report as you go.\n\n\n\n\n\n\nCaution\n\n\n\nMake sure you check for interviews with any suspects!\n\n\n\n\n\n\n\n\nAnd the final suspect is…\n\n\n\nput the name of the person responsible for the murder here."
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html",
    "href": "labs/instructions/lab-1-instructions.html",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "For the first few weeks of the quarter, we will use GitHub Classroom to create our lab repositories. GitHub Classroom is a wonderful tool, as it makes it incredibly simple to copy the contents of a repository.\nUse these steps to make a copy of the Lab 1 repository: List of Steps to Copy the Lab Assignment from GitHub Classroom\n\n\n\nOnce you complete these steps, a dialogue box will open with messages about cloning (making a copy) of your Lab 1 repository. When the messages are finished, you should have a new RStudio session open. You should notice a few things:\n\nIn the upper right corner you should see a blue R cube with introdcution-to-quarto written next to it , this tells you that you are working in an R Project (we’ll learn more about these next week).\nIn the “Files” pane, you should see a list of all the files included in the lab-1 repository you copied.\nIn the upper right pane, you should see a tab labeled “Git”.\nNothing should be displayed in this pane, since you haven’t made any changes to the files that were copied!\n\n\n\n\nNow, find the lab-1-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).\n\n\n\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-1-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main\n\n\n\nGo back to your browser. I assume you’re still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on “commits”, you should see one with the message you used, e.g. “Added my name”.\n\n\n\nNow that you’ve added your name, go ahead and get started with the rest of the lab!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-1-making-a-copy-from-github-classroom",
    "href": "labs/instructions/lab-1-instructions.html#step-1-making-a-copy-from-github-classroom",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "For the first few weeks of the quarter, we will use GitHub Classroom to create our lab repositories. GitHub Classroom is a wonderful tool, as it makes it incredibly simple to copy the contents of a repository.\nUse these steps to make a copy of the Lab 1 repository: List of Steps to Copy the Lab Assignment from GitHub Classroom",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-2-inspecting-the-lab",
    "href": "labs/instructions/lab-1-instructions.html#step-2-inspecting-the-lab",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Once you complete these steps, a dialogue box will open with messages about cloning (making a copy) of your Lab 1 repository. When the messages are finished, you should have a new RStudio session open. You should notice a few things:\n\nIn the upper right corner you should see a blue R cube with introdcution-to-quarto written next to it , this tells you that you are working in an R Project (we’ll learn more about these next week).\nIn the “Files” pane, you should see a list of all the files included in the lab-1 repository you copied.\nIn the upper right pane, you should see a tab labeled “Git”.\nNothing should be displayed in this pane, since you haven’t made any changes to the files that were copied!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-3-making-a-small-change",
    "href": "labs/instructions/lab-1-instructions.html#step-3-making-a-small-change",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Now, find the lab-1-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-4-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-1-instructions.html#step-4-pushing-your-lab-to-github",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Now for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-1-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-5-verifying-your-changes",
    "href": "labs/instructions/lab-1-instructions.html#step-5-verifying-your-changes",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Go back to your browser. I assume you’re still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on “commits”, you should see one with the message you used, e.g. “Added my name”.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-6-lets-get-started-working-with-quarto",
    "href": "labs/instructions/lab-1-instructions.html#step-6-lets-get-started-working-with-quarto",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Now that you’ve added your name, go ahead and get started with the rest of the lab!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#specifying-global-execute-options",
    "href": "labs/instructions/lab-1-instructions.html#specifying-global-execute-options",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.1 Specifying Global Execute Options",
    "text": "2.1 Specifying Global Execute Options\nExecution options specify how the R code in your Quarto document should be displayed. This guide provides descriptions on the options you can specify in a document’s execution.\nTo start, your YAML should look something like this:\n---\ntitle: \"Lab 1: Introduction to Quarto\"\nauthor: \"Your name goes here!\"\ndate: \"Insert the date here!\"\nformat: html\nself-contained: true\neditor: source\n---\nQuestion 1 – Add your name and the date to the YAML.\nQuestion 2 – Add an execute line to your YAML that includes the following options, (1) your source code is always output on the page, and (2) your document will render even if there are errors.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#running-the-provided-code",
    "href": "labs/instructions/lab-1-instructions.html#running-the-provided-code",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.2 Running the Provided Code",
    "text": "2.2 Running the Provided Code\nNext, click on the “Play” button on the right of the first auto-populated code chunk. Alternatively, you can highlight (or simply put your cursor on the line of) the code you want to run and hit ctrl + Enter (for PCs) or ⌘ + Enter (for Macs).\nYou should see the code appear in the console, as well as the result of the code (2). Keep in mind the [1] before the 2 is vector notation. This means the result is a vector of length 1, whose first element is 2.\nQuestion 3 – Let’s spice this code up a bit. Delete 1 + 1 from the code chunk and paste in the following code:\n\n# Load a dataset into the R Environment.\ndata(ToothGrowth)\n\n# Look at the summary of the variables in the dataset.\nsummary(ToothGrowth)\n\nNow run this code. You should see a six-number summary of the variables len and dose included in the ToothGrowth dataset, as well as the frequency of the levels contained in the supp variable. Further, if you inspect the Environment tab, the ToothGrowth dataset should appear. You can click on the dataset name (not the blue play button!) to look at the data.\n\nCheck the Data Documentation\nQuestion 4 – In your console (not in the Quarto document), type ?ToothGrowth (or alternatively help(ToothGrowth)). Use the information that pops up in the Help pane in RStudio to fill in the blanks below.\nThis dataset investigates the effect of __________ on tooth growth in _________________.\nThe two supplement delivery methods include OJ (______________) and VC (_______________).\nToothGrowth is a data frame with ____ observations and ____ variables.\nQuestion 5 – Before the code chunk, change the “Running the Provided Code” section header to a header that better describes the contents of this section (e.g., Tooth Growth Dataset).",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#creating-a-plot",
    "href": "labs/instructions/lab-1-instructions.html#creating-a-plot",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.3 Creating a Plot",
    "text": "2.3 Creating a Plot\nYour second code chunk is just as boring as your first, so let’s spice it up!\nQuestion 6 – Replace the plot(pressure) code with the following (we will talk about graphics next week!):\n\nlibrary(tidyverse)\n\nggplot(data = ToothGrowth, \n       mapping = aes(x = supp, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Supplement\", y = \"Length of Teeth (mm)\")\n\nToothGrowth %&gt;% \n  mutate(dose = as.factor(dose)) %&gt;% \n  ggplot(mapping = aes(x = dose, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Dose of Supplement (mg/day)\", y = \"Length of Teeth (mm)\")\n\nNow, run this code chunk! You should see two side-by-side boxplots, one plot comparing tooth length between the two supplement delivery methods and one plot comparing tooth length between the three different dosages uses.\nQuestion 7 – Read over the Quarto documentation on figure options and add an option (#|) to the above code chunk to make the figures print side-by-side (i.e., in one row) in the rendered HTML file.\nQuestion 8 – Specify in the code chunk options that these boxplots should be center aligned.\nQuestion 9 – Specify a figure caption for the boxplots (using a code-chunk option).",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#inserting-a-new-code-chunk",
    "href": "labs/instructions/lab-1-instructions.html#inserting-a-new-code-chunk",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.4 Inserting a New Code Chunk",
    "text": "2.4 Inserting a New Code Chunk\nNavigate to the last sentence of your the Quarto document. We’re now going to insert a new R code chunk at the bottom of the document.\nThere are four different ways to do this:\n\nType ctrl + alt + i (on a PC) or ⌘ + ⌥ + i (on a Mac).\nClick on the  symbol. This should automatically default to R code, but if you have a Python compiler on your computer, you might need to select “R” from the options.\nIf you are using the Visual editor, click on the “Insert” button, then select “Code Chunk”, and finally select “R”.\nManually add the code chunk by typing ```{r}. Make sure to close your code chunk with ```.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#conducting-a-t-test-for-two-independent-samples",
    "href": "labs/instructions/lab-1-instructions.html#conducting-a-t-test-for-two-independent-samples",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.5 Conducting a t-test for Two Independent Samples",
    "text": "2.5 Conducting a t-test for Two Independent Samples\nIn this section, we are going to conduct a two-sample independent t-test to compare tooth length between the two supplement methods in the ToothGrowth dataset. I have outlined the null and alternative hypotheses we will be testing:\n\\(H_0\\): The treatment mean tooth length for the OJ supplement delivery method is the same as the treatment mean tooth length for the VC supplement delivery method.\n\\(H_A\\): The treatment mean tooth length for the OJ supplement delivery method is different from the treatment mean tooth length for the VC supplement delivery method.\nWhile a second course in statistics is a pre-requisite for this class, you may want to go here for a refresher on conducting two-sample independent t-tests.\nCarry out the following steps:\nQuestion 10 – Using the t.test() function, write code to carry out the analysis. You can assume unequal variances and a two-sided alternative.\n\n\n\n\n\n\nFunction Documentation\n\n\n\nLook up the help documentation for t.test() for directions on how your inputs should look. Hint: specifically look at the examples at the bottom for comparing extra across groups in the sleep dataset.\n\n\nQuestion 11 – Run your code chunk to obtain the output for your statistical test.\nQuestion 12 – Create a numbered list containing:\n\nYour conclusion (in the context of these data) based on the p-value.\nAn interpretation of the confidence interval (make sure to read what confidence level is used by default).\n\nQuestion 13 – Create another section header, describing the contents of this section.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#render-your-document",
    "href": "labs/instructions/lab-1-instructions.html#render-your-document",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.6 Render Your Document",
    "text": "2.6 Render Your Document\nRender your document as an html file. Use the “Render” button (the blue arrow!) at the top of your screen.\nIf you run into trouble rendering your document, try restarting R and running your code chunks in order, and see if you can find the problem.\nAnother common issue is deleting the tick marks (```) that surround your code chunks. If you notice that the code chunks are not showing a “Play” button (), or that they are not highlighted in gray, double check your tick marks!\nRecall we included error: true in our YAML execution options. This means that your document will still render even if there are errors. Make sure you are double checking your work!\nYou will notice that there is auto-generated text that is unrelated to the work that you completed. It is always a good idea to delete this extra text!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#render-again",
    "href": "labs/instructions/lab-1-instructions.html#render-again",
    "title": "Lab 1: Introduction to Quarto",
    "section": "3.1 Render again!",
    "text": "3.1 Render again!\nNotice that when you render the document, all of the code reruns again, producing the same output as before, but with your changes—this is called reproducibility!\nYou should render often while completing your practice activities and lab assignments. Make small changes, then make sure the file still renders rather than making a bunch of big changes and then realizing something is wrong.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#turn-it-in",
    "href": "labs/instructions/lab-1-instructions.html#turn-it-in",
    "title": "Lab 1: Introduction to Quarto",
    "section": "3.2 Turn it in!",
    "text": "3.2 Turn it in!\nOpen the .html file on your computer to make sure it looks as you expected. Then upload the rendered (.html extension) document to Canvas!\n\nYou’ll be doing this same process for all your future Lab Assignments. Each of these will involve a Quarto file. Some weeks, I may have a template for you to copy like you had here, while other weeks you will generate your own Quarto file from scratch.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-8-instructions-hard.html",
    "href": "labs/instructions/lab-8-instructions-hard.html",
    "title": "Untitled",
    "section": "",
    "text": "Reminder to reflect\n\n\n\nAs you work through this application exercise, make note: what is challenging? What feels comfortable? What insights do you gain from collaborating with others? What ideas/strategies do you want to remember going forward?\n\n\nGoal: In the diamonds dataset, we want to understand the relationship between price and size (carat). We want to explore variation along two choices:\n\nThe variables included in the model. We’ll explore 3 sets of variables:\n\nNo further variables (just price and carat)\nAdjusting for cut\nAdjusting for cut and clarity\nAdjusting for cut, clarity, and color\n\nWhether or not to remove outliers in the carat variable. We’ll define outliers as cases whose carat is over 3 SDs away from the mean.\n\nExercise 1: Use crossing() to create the data frame of argument combinations for our analyses. Note that you can create a list of formula objects in R with c(y ~ x1, y ~ x1 + x2).\n\n\nSolution\n\n\ndf_arg_combos &lt;- crossing(\n    mod_formula = c(price ~ carat, \n                    price ~ carat + cut,  \n                    price ~ carat + cut + clarity,  \n                    price ~ carat + cut + clarity + color),\n    remove_outliers = c(TRUE, FALSE)\n    )\n\ndf_arg_combos\n\n\nExercise 2: Write a function that removes outliers in a dataset. The user should be able to supply the dataset, the variable to remove outliers in, and a threshold on the number of SDs away from the mean used to define outliers.\n\n\nSolution\n\n\nremove_outliers &lt;- function(df, what_var, sd_thresh) {\n    df %&gt;% \n        mutate(zscore = ({{ what_var }} - mean({{ what_var}}, na.rm = TRUE))/sd({{ what_var }}, na.rm = TRUE)) %&gt;%\n        filter(zscore &lt;= sd_thresh)\n}\n\n\nExercise 3: Write a function that implements the analysis versions specifically for the diamonds dataset. The user will not specify the dataset as an argument but will input the model formula and whether or not to remove outliers (cases whose carat is over 3 SDs away from the mean).\n\n\nSolution\n\n\nfit_model &lt;- function(mod_formula, remove_outliers) {\n    if (remove_outliers) {\n        diamonds_clean &lt;- remove_outliers(diamonds, what_var = carat, sd_thresh = 3)\n    } else {\n        diamonds_clean &lt;- diamonds\n    }\n    \n    lm(mod_formula, data = diamonds_clean)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5: Use pmap() from purrr to replicate what you did with the for loop.\n\n\nSolution\n\n\nlin_mod_res_pmap &lt;- pmap(df_arg_combos, fit_model)"
  },
  {
    "objectID": "labs/instructions/lab-8-instructions-hard.html#application-exercise",
    "href": "labs/instructions/lab-8-instructions-hard.html#application-exercise",
    "title": "Untitled",
    "section": "",
    "text": "Reminder to reflect\n\n\n\nAs you work through this application exercise, make note: what is challenging? What feels comfortable? What insights do you gain from collaborating with others? What ideas/strategies do you want to remember going forward?\n\n\nGoal: In the diamonds dataset, we want to understand the relationship between price and size (carat). We want to explore variation along two choices:\n\nThe variables included in the model. We’ll explore 3 sets of variables:\n\nNo further variables (just price and carat)\nAdjusting for cut\nAdjusting for cut and clarity\nAdjusting for cut, clarity, and color\n\nWhether or not to remove outliers in the carat variable. We’ll define outliers as cases whose carat is over 3 SDs away from the mean.\n\nExercise 1: Use crossing() to create the data frame of argument combinations for our analyses. Note that you can create a list of formula objects in R with c(y ~ x1, y ~ x1 + x2).\n\n\nSolution\n\n\ndf_arg_combos &lt;- crossing(\n    mod_formula = c(price ~ carat, \n                    price ~ carat + cut,  \n                    price ~ carat + cut + clarity,  \n                    price ~ carat + cut + clarity + color),\n    remove_outliers = c(TRUE, FALSE)\n    )\n\ndf_arg_combos\n\n\nExercise 2: Write a function that removes outliers in a dataset. The user should be able to supply the dataset, the variable to remove outliers in, and a threshold on the number of SDs away from the mean used to define outliers.\n\n\nSolution\n\n\nremove_outliers &lt;- function(df, what_var, sd_thresh) {\n    df %&gt;% \n        mutate(zscore = ({{ what_var }} - mean({{ what_var}}, na.rm = TRUE))/sd({{ what_var }}, na.rm = TRUE)) %&gt;%\n        filter(zscore &lt;= sd_thresh)\n}\n\n\nExercise 3: Write a function that implements the analysis versions specifically for the diamonds dataset. The user will not specify the dataset as an argument but will input the model formula and whether or not to remove outliers (cases whose carat is over 3 SDs away from the mean).\n\n\nSolution\n\n\nfit_model &lt;- function(mod_formula, remove_outliers) {\n    if (remove_outliers) {\n        diamonds_clean &lt;- remove_outliers(diamonds, what_var = carat, sd_thresh = 3)\n    } else {\n        diamonds_clean &lt;- diamonds\n    }\n    \n    lm(mod_formula, data = diamonds_clean)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5: Use pmap() from purrr to replicate what you did with the for loop.\n\n\nSolution\n\n\nlin_mod_res_pmap &lt;- pmap(df_arg_combos, fit_model)"
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html",
    "href": "weeks/week-2-projects-data-import.html",
    "title": "R Projects & Importing Data",
    "section": "",
    "text": "Describe what an R Project is\nOutline how an R Project affects the file paths used to read in data\n\nRead in data from common formats into R",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#learning-objectives",
    "href": "weeks/week-2-projects-data-import.html#learning-objectives",
    "title": "R Projects & Importing Data",
    "section": "",
    "text": "Describe what an R Project is\nOutline how an R Project affects the file paths used to read in data\n\nRead in data from common formats into R",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#working-directories-in-r",
    "href": "weeks/week-2-projects-data-import.html#working-directories-in-r",
    "title": "R Projects & Importing Data",
    "section": "1.1 Working Directories in R",
    "text": "1.1 Working Directories in R\nTo find where your working directory is in R, you can either look at the top of your console or type getwd() into your console.\n\ngetwd()\n\nAlthough it is not recommended, you can set your working directory in R with setwd():\n\nsetwd(\"/path/to/my/assignment/folder\")\n\n\n\n\n\n\n\n\n\n\nFile Paths in R\n\n\n\nA quick warning on file paths is that Mac / Linux and Windows differ in the direction of their backslash to separate folder locations. Mac/Linux use / (e.g. STAT331/Week1) while Window’s uses \\ (e.g. STAT331\\Week1).",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#r-projects",
    "href": "weeks/week-2-projects-data-import.html#r-projects",
    "title": "R Projects & Importing Data",
    "section": "1.2 R Projects",
    "text": "1.2 R Projects\n📖 Required Reading: Workflow (R Projects)\n\n\n\n\n\n\nOnly read Section 6.2!\n\n\n\n\n\n\nIf you open up your folder from Lab 1, you will notice that you have a blue cube (an R Project) living in this folder! The R Project lives in this folder for two reasons, (1) when you copied the Lab 1 GitHub repository you told RStudio you wanted to make a new R Project, and (2) in order for RStudio to talk with GitHub you need to use an R Project.\nHowever, if you look at your STAT331 folder (the one that lives in your Documents folder), you should not see a blue cube since we never created an R Project in this folder. Let’s do that now!\nTo add a R Project to an existing folder on your computer (e.g., you already created a folder for this class), first open RStudio on your computer and click File &gt; New Project, then:\n\n\n\nNavigation prompt for creating a new R Project in an existing directory\n\n\nThen, browse on your computer to where you saved your STAT331 folder last week. This should be in your Documents folder, similar to where mine is saved!\n\n\n\nNavigation prompt for selecting which existing folder in which the R Project should be created.\n\n\nOnce you click “Create Project”, your existing folder, STAT331 should now contain a STAT331.Rproj file. This is your new “home” base for this class - whenever you refer to a file with a relative path it will begin to look for it here.\nIf you would like a list of step-by-step instructions for this process, feel free to look at this file: Creating a Project in an Existing Directory",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#check-in-2.2-rstudio-projects",
    "href": "weeks/week-2-projects-data-import.html#check-in-2.2-rstudio-projects",
    "title": "R Projects & Importing Data",
    "section": "1.3 ✅ Check-in 2.2: RStudio Projects",
    "text": "1.3 ✅ Check-in 2.2: RStudio Projects\nTake a screenshot of your class directory, showing the R Project living inside your STAT331 folder.",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#how-do-i-load-my-data",
    "href": "weeks/week-2-projects-data-import.html#how-do-i-load-my-data",
    "title": "R Projects & Importing Data",
    "section": "2.1 How do I load my data?",
    "text": "2.1 How do I load my data?\n📖 Required Reading: Data Import",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#where-does-my-data-live",
    "href": "weeks/week-2-projects-data-import.html#where-does-my-data-live",
    "title": "R Projects & Importing Data",
    "section": "2.2 Where does my data live?",
    "text": "2.2 Where does my data live?\n▶️ Required Video: How do I get to my data? (8 minutes)",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "weeks/week-2-projects-data-import.html#check-in-2.3-loading-data",
    "href": "weeks/week-2-projects-data-import.html#check-in-2.3-loading-data",
    "title": "R Projects & Importing Data",
    "section": "2.3 ✅ Check-in 2.3: Loading Data",
    "text": "2.3 ✅ Check-in 2.3: Loading Data\nFor this check-in you are asked to work through reading in different data sets. You are expected to create your own Quarto document to complete this activity.\nThe folder Age_Data contains several data sets with the names and ages of five individuals. The data sets are stored as different file types. Download Ages_Data.zip here, make sure to unzip the folder, save these in a reasonable place (e.g., STAT331 &gt; Week 2 &gt; Checkins or STAT331 &gt; Checkins &gt; Week 2).\n\n\n\n\n\n\nExtracting zip folders\n\n\n\nYou will need to extract the contents of the ages.zip file, that means you will need to uncompress the files from the folder for RStudio to know where to get the data from.\n\n\nOnce you have the data saved (and extracted) in your STAT 331 folder, preferably in the Week 2 subfolder, use the readr and readxl packages to complete the following exercises.\n\nLoad the appropriate packages for reading in data.\nRead in the data set ages.csv\nRead in the data set ages_tab.txt\nRead in the data set ages_mystery.txt\nRead in the data set ages.xlsx\nFind a way to use read_csv() to read ages.csv with the variable “Name” as a factor data type and “Age” as a character data type.\n\nOnce you’ve finished coding these exercises, head over to Canvas and fill in the “gap” code I’ve provided. For reference, I would recommend you store the Ages_Data similar to how I have:",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 2 - Data Import"
    ]
  },
  {
    "objectID": "code-review/code-review-guidelines.html",
    "href": "code-review/code-review-guidelines.html",
    "title": "Reviewing Someone’s Code and Providing Helpful Feedback",
    "section": "",
    "text": "One of my favorite sayings is:\nGood coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread."
  },
  {
    "objectID": "code-review/code-review-guidelines.html#writing-code-reviews",
    "href": "code-review/code-review-guidelines.html#writing-code-reviews",
    "title": "Reviewing Someone’s Code and Providing Helpful Feedback",
    "section": "Writing Code Reviews",
    "text": "Writing Code Reviews\nThe reviewer will provide feedback on the tidiness and efficiency of the code they are reviewing. I will provide some examples of helpful and unhelpful feedback, to guide your feedback. It’s easy to be a jerk when making comments; don’t. Think about the comments you would like to receive that would help you improve your code! Be good to each other.\nIn general, when I give feedback I like to start off with praise for something the person did right. Starting off with something positive helps soften the blow when you receive feedback that points out places you still have room to grow.\n\nExample Reviews\n\n\nggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy,color=\"blue\"))\n\nMy Review\n“I really appreciate your use of named arguments, it makes it clear what each input is being used for. Your code would be much easier to read if you used spaces before and after your = signs and after each comma. I would also recommend hitting enter / return after each + sign, so that each”layer” of your plot has its own line. This makes it easier to digest what is happening at each stage of your plot.”\n\n\n\npenguins %&gt;% mutate(mass_flipper_ratio = body_mass_g/flipper_length_mm) %&gt;%   group_by(species) %&gt;% summarize(avg_mass_flipper_ratio = median(mass_flipper_ratio)) %&gt;% arrange(avg_mass_flipper_ratio)\n\nMy Review\n“I really appreciate how you use spaces before and after each = sign, that makes it easier to read how each = sign is being used. I also have a suggestion for your code formatting which would make your code easier to read. If you use a return / new line after each %&gt;% sign, each step of your pipeline is on its own line and it is easier to understand the process you are implementing.”\n\n\ncolleges_clean %&gt;%\n  filter(REGION == 7,\n         ADM_RATE &gt; region_median,\n         TUITION_DIFF != 0) %&gt;%\n  mutate(\n    SAT_odd = SAT_AVG %% 2 != 0\n  ) %&gt;%\n  filter(SAT_odd == TRUE,\n         STABBR != \"ID\") %&gt;%\n  mutate(\n    freshman = as.numeric(UGDS) / 4, \n    applications = freshman / ADM_RATE\n  ) %&gt;%\n  filter(applications &lt; 1000, \n         STABBR != \"MT\")\n\nMy Review\n“Your code formatting is awesome! I really appreciate your use of whitespace and returns to break up your code and make it more readable. The main suggestion I have is to pay attention to how many times you are calling the same function during your data wrangling process. For example, in your code you use the filter() function three times. Could you do all this filtering in one call to the filter() function? That would help make your code more efficient!”"
  },
  {
    "objectID": "labs/instructions/lab-8-old.html",
    "href": "labs/instructions/lab-8-old.html",
    "title": "Lab 8: The Twelve Days of Christmas",
    "section": "",
    "text": "library(tidyverse)\nxmas &lt;- read.csv(\"https://raw.githubusercontent.com/zoerehnberg/STAT331-S23/main/practice_activities/xmas.csv\")\nDownload starter .qmd file\nYou’ve already created two helper functions, pluralize_gift() and make_phrase(), which you used to create a column of song phrases in the practice activity.\nToday, you will write a function that sings the appropriate lines of the song for a given day. We will then use this function to iterate through the 12 days of Christmas to sing the full song!"
  },
  {
    "objectID": "labs/instructions/lab-8-old.html#helper-functions",
    "href": "labs/instructions/lab-8-old.html#helper-functions",
    "title": "Lab 8: The Twelve Days of Christmas",
    "section": "1 Helper Functions",
    "text": "1 Helper Functions\n\n\n\n\n\n\nNote\n\n\n\nYou will need to copy over your functions from the practice activity into your new lab Quarto document.\n\n\n\n# Copy over functions from your practice activity!\n\nUse your PA functions to create a Full.Phrase column in the xmas2 dataset.\n\nxmas2 &lt;- xmas |&gt;\n  mutate(\n    Full.Phrase = pmap_chr(.l = list(num       = Day,\n                                     item      = Gift.Item, \n                                     verb      = Verb, \n                                     adjective = Adjective, \n                                     location  = Location), \n                           .f = make_phrase))\n\nError in `mutate()`:\nℹ In argument: `Full.Phrase = pmap_chr(...)`.\nCaused by error:\n! object 'make_phrase' not found"
  },
  {
    "objectID": "labs/instructions/lab-8-old.html#iteration",
    "href": "labs/instructions/lab-8-old.html#iteration",
    "title": "Lab 8: The Twelve Days of Christmas",
    "section": "2 Iteration",
    "text": "2 Iteration\nWrite a function called sing_day() that takes as input:\n\nA dataset (input as a dataframe).\nA number indicating which day to sing about (input as an integer).\nThe name of a column in the dataset that contains the phrases for each day (input as a tidy name).\n\nFor example,\nsing_day(xmas2, 2, Full.Phrase)\nshould return\nOn the second day of Christmas, my true love sent to me:\ntwo turtle doves and\na partridge in a pear tree.\n\n\n\n\n\n\nTip\n\n\n\nHint 1: The {phrase_col} part, which I provided for you, lets you use column names as arguments to a function. Don’t delete that line of code!\nHint 2: The ordinal() function from the english package could be helpful when converting the line input (e.g., 1) to a word (e.g., “first”).\n\n\n\n# Produces the string for one day of the song.\n# Arguments:  dataset -- a dataframe containing information about gifts.\n#             num -- the number of the day you want to sing about.\n#             phrase_col -- the variable name for the column in dataset with the song phrases.\n# Returns:    a string with the line of the song containing ALL gifts for the given day.\n\nsing_day &lt;- function(dataset, num, phrase_col){\n  \n  # Step 1: Setup the intro line\n  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)\n  num_word &lt;- ____\n  \n  intro &lt;- glue::glue(\"On the {num_word} day of Christmas, my true love sent to me:\")\n  \n  # Step 2: Sing the gift phrases\n  # Hint: What order are they gifts sung in each day?\n\n    phrases &lt;- dataset |&gt;\n      pull({{phrase_col}})\n\n  ????\n    \n  ## put it together\n    \n  ????\n\n}\n\nError: &lt;text&gt;:11:16: unexpected input\n10:   # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)\n11:   num_word &lt;- __\n                   ^\n\n\n\n\n\n\n\n\nA Small Test\n\n\n\n\nxmas2 |&gt;\n  sing_day(num = 2, phrase_col = Full.Phrase)\n\nError in sing_day(xmas2, num = 2, phrase_col = Full.Phrase): could not find function \"sing_day\""
  },
  {
    "objectID": "labs/instructions/lab-8-old.html#sing-the-song",
    "href": "labs/instructions/lab-8-old.html#sing-the-song",
    "title": "Lab 8: The Twelve Days of Christmas",
    "section": "3 Sing the Song",
    "text": "3 Sing the Song\nRun the following code to test out your functions! The output should be the lyrics for the entire The Twelve Days of Christmas song.\n\nmap_chr(1:12, ~ sing_day(dataset = xmas2, \n                         num = .x, \n                         phrase_col = Full.Phrase)) |&gt;\n  str_c(collapse = \"\\n\") |&gt;\n  cat()\n\nError in `map_chr()`:\nℹ In index: 1.\nCaused by error in `sing_day()`:\n! could not find function \"sing_day\"\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou will get automatic deductions for:\n\nFunctions that do not work the way they are intended.\nHard coding values in your in functions.\nNot using the map() code supplied for you to iterate the function you just wrote.\nNot singing the full song. Remember, each day, you get the gift for that day and all the prior days."
  },
  {
    "objectID": "labs/instructions/lab-8-old.html#style-the-song-output",
    "href": "labs/instructions/lab-8-old.html#style-the-song-output",
    "title": "Lab 8: The Twelve Days of Christmas",
    "section": "4 Style the Song Output",
    "text": "4 Style the Song Output\nLet’s output the song in a visually appealing way!\n\n\n\n\n\n\nNote\n\n\n\nMake the following changes to your sing_day() function above. Do not copy the code to a new code chunk for the style section.\n\n\na. Remove any additional whitespace.\n\nThere should be only one whitespace character between words.\nThere should be no whitespace at the beginning or end of each phrase.\n\nb. Print each phase on its own line.\n\nFor example, your function should output the following for sing_day(xmas, num = 2, phrase_col = Full.Phrase):\n\nOn the second day of Christmas, my true love sent to me: \ntwo turtle doves and \na partridge in a pear tree\nc. Add blank lines between the different lines of the song.\n\nFor example, your output should look like the following:\n\nOn the first day of Christmas, my true love sent to me:\na partridge in a pear tree\n\nOn the second day of Christmas, my true love sent to me: \ntwo turtle doves and \na partridge in a pear tree\nd. Ensure the lines of your song are grammatically correct.\n\nUse of Commas – each line should end in a comma except for the last line.\nUse of And – there should be an “and” included either at the end of the second to last line or at the beginning of the final line.\nUse of Period – there should be a period at the end of the final line.\n\n\nFor example, your function should output the following for sing_day(xmas, num = 3, phrase_col = Full.Phrase):\n\nOn the third day of Christmas, my true love sent to me: \nthree french hens, \ntwo turtle doves and \na partridge in a pear tree.\n\n\n\n\n\n\nNote\n\n\n\nWhile I am a fan of the Oxford comma, you do not have to use an Oxford comma for the second to last phrase of your song."
  },
  {
    "objectID": "labs/instructions/challenge-2-instructions.html",
    "href": "labs/instructions/challenge-2-instructions.html",
    "title": "Challenge 2: Spicing things up with ggplot2",
    "section": "",
    "text": "For this week’s Challenge, you will have three different options to explore. I’ve arranged these options in terms of their “spiciness,” or the difficulty of completing the task. You are only required to complete one task, but if you are interested in exploring more than one, feel free!\nThis is a great place to let your creativity show! Make sure to indicate what additional touches you added, and provide any online references you used.\n\n\n\n\n\n\nTip\n\n\n\nYou will be working in the challenge-2.qmd file, found in the repository you cloned for Lab 2. Within this document, make sure to specify that your plots are contained in your document (self-contained: true) and that your code is visible to the reader (echo: true). If there are other formatting specifics you would like to include, feel free to toss those in the YAML, too!\nThen, create a setup code chunk to load the packages and read in the surveys.csv data file exactly how you did in Lab 2.\nCreate another code chunk and paste in your code from Question 14 or Question 15 in Lab 2 – we will be modifying the box plot of weights by species!\n\n\n\n🌶 Medium: Ridge Plots\nIn Lab 2, you used side-by-side boxplots to visualize the distribution of weight within each species of rodent. Boxplots have substantial flaws, namely that they disguise distributions with multiple modes.\nA “superior” alternative is the density plot. However, ggplot2 does not allow for side-by-side density plots using geom_density(). Instead, we will need to make use of the ggridges package to create side-by-side density (ridge) plots.\n\nFor this challenge you are to change your boxplots to ridge plots. You will need to install the ggridges package and explore the geom_density_ridges() function.\n\n\n\n🌶 🌶 Spicy: Exploring Color Themes\nThe built-in ggplot() color scheme may not include the colors you were looking for. Don’t worry – there are many other color palettes available to use!\nYou can change the colors used by ggplot() in a few different ways.\n\nManual Specification\nAdd the scale_color_manual() or scale_fill_manual() functions to your plot and directly specify the colors you want to use. You can either:\n\ndefine a vector of colors within the scale functions (e.g. values = c(\"blue\", \"black\", \"red\", \"green\")) OR\ncreate a vector of colors using hex numbers and store that vector as a variable. Then, call that vector in the scale_color_manual() function.\n\nHere are some example hex color schemes:\n\n# A vector of a RG color deficient friendly palette with gray:\ncdPalette_grey &lt;- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n# A vector of a RG color deficient friendly palette with black:\ncdPalette_blk &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are interested in using specific hex colors, I like the image color picker app to find the colors I want.\n\n\n\n\nPackage Specification\nWhile manual specification may be necessary for some contexts, it can be a real pain to handpick 5+ colors. This is where color scales built-in to R packages come in handy! Popular packages for colors include:\n\nRColorBrewer – change colors by using scale_fill_brewer() or scale_colour_brewer().\nviridis – change colors by using scale_colour_viridis_d() for discrete data, scale_colour_viridis_c() for continuous data.\nggsci – change colors by using scale_color_&lt;PALNAME&gt;() or scale_fill_&lt;PALNAME&gt;(), where you specify the name of the palette you wish to use (e.g. scale_color_aaas()).\n\n\n\n\n\n\n\nNote\n\n\n\nThis website provides an exhaustive list of color themes available through various packages.\n\n\n\nIn this challenge you are expected to use this information to modify the boxplots you created Lab 2. First, you are to color the boxplots based on the variable genus. Next, you are to change the colors used for genus using either manual color specification or any of the packages listed here (or others!).\n\n\n\n\n🌶 🌶 🌶 Hot: Exploring ggplot2 Annotation\nSome data scientists advocate that we should try to eliminate legends from our plots to make them more clear. Instead of using legends, which cause the reader’s eye to stray from the plot, we should use annotation.\nWe can add annotation(s) to a ggplot() using the annotate() function:\n\nggplot(data = surveys, \n       mapping = aes(x = weight, y = species, color = genus)\n       ) +\n  geom_boxplot() +\n  scale_color_manual(values = cdPalette_grey) + \n  annotate(\"text\", y = 6, x = 200, label = \"Sigmodon\") +\n  annotate(\"text\", y = 4, x = 200, label = \"Perognathus\") +\n  theme(legend.position = \"none\") +\n  labs(x = \"Weight (g)\",\n       y = \"\",\n       subtitle = \"by Species and Genera\",\n       title = \"Rodent Weight\")\n\n\n\n\n\n\n\n\nNote that I’ve labeled the “Sigmodon” and “Perognathus” genera, so the reader can tell that these boxplots are associated with their respective genus.\n\nIn this challenge you are expected to use this information to modify the boxplots you created in Lab 2. First, you are to color the boxplots based on the variable genus. Next, you are to add annotations for each genus next to the boxplot(s) associated with that genus. Finally, you are expected to use the theme() function to remove the color legend from the plot, since it is no longer needed!\n\n\n\nChallenge 2 Submission\nFor Lab 2 you will submit only your HTML file. Your HTML file is required to have the following specifications in the YAML options (at the top of your document):\n\nhave the plots embedded (embed-resources: true)\ninclude your source code (code-tools: true)\ninclude all your code and output (echo: true)\n\n\nIn addition, your document should not have any warnings or messages output in your HTML document.",
    "crumbs": [
      "Labs",
      "Challenge 2 Instructions"
    ]
  },
  {
    "objectID": "weeks/week-1-version-control.html#objectives",
    "href": "weeks/week-1-version-control.html#objectives",
    "title": "Week 1, Part 3: Version Control with Git and GitHub",
    "section": "0.1 Objectives",
    "text": "0.1 Objectives\nMost of this section is either heavily inspired by Happy Git and Github for the UseR (Bryan, Hester, and The Stat 545 TAs 2021) or directly links to that book.\n\nRecognize the benefits of using version control to improve your coding practices and workflow.\nIdentify git / GitHub as a version control platform (and helper).\nInstall git onto your computer and register for a GitHub account\nStart applying version control practices to your workflow.",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 3 - Version Control"
    ]
  },
  {
    "objectID": "weeks/week-1-version-control.html#footnotes",
    "href": "weeks/week-1-version-control.html#footnotes",
    "title": "Week 1, Part 3: Version Control with Git and GitHub",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYes, I’m aware that this sounds paranoid. It’s been a very rare occasion that I’ve needed to restore something from another backup. You don’t want to take chances.↩︎",
    "crumbs": [
      "Weekly materials",
      "Week 1, Part 3 - Version Control"
    ]
  },
  {
    "objectID": "weeks/week-7-data-frame-functions.html",
    "href": "weeks/week-7-data-frame-functions.html",
    "title": "Writing Data Frame & Plot Functions in R",
    "section": "",
    "text": "The second half of this week’s coursework focuses on writing functions that work with data frames.\nBy the end of the week you should have a grasp of:",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Data Frame Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-data-frame-functions.html#tidy-evaluation",
    "href": "weeks/week-7-data-frame-functions.html#tidy-evaluation",
    "title": "Writing Data Frame & Plot Functions in R",
    "section": "1.1 Tidy Evaluation",
    "text": "1.1 Tidy Evaluation\nWriting functions that work with data frames and call on the functions we’ve become used to (e.g., filter(), select(), summarise()) requires we learn about tidy evaluation. To write these functions you will need to know, at a high level, whether the function you are trying to incorporate uses data masking or tidy selection.\nAt a high level, data masking is used in functions like arrange(), filter(), and summarize() that compute with variables. Whereas, tidy selection is used for functions like select() and rename() that select variables.\nYour intuition about which functions use tidy evaluation should be good for many of these functions. If you can input c(var1, var2, var3) into the function (e.g., select(mtcars, c(vs, am, gear))), then the function uses tidy selection! If you cannot input c(var1, var2, var3) into the function, then the function is performing computations on the data and uses data masking.\nIf you are interested in learning more about tidy evaluation, I would highly recommend:\n\nthis video by Jenny Bryan\n\nI do want to note that this video is from 2019 and some things have changed since then. Namely, we used to need to use the enquo() function to inject\nvariable names into dplyr functions, whereas we now use embracing {{}}. 🤗\n\nthis vignette for tidy evaluation with dplyr\n\n\n✅ Check-in 7.2: Writing Data Frame Functions\n\n\n\n\n\n\nData Structure\n\n\n\nNote for Questions 1 & 2, I am assuming the flight data has a similar structure to the nycflights data from the openintro R package.\n\nhead(openintro::nycflights)\n\n# A tibble: 6 × 16\n   year month   day dep_time dep_delay arr_time arr_delay carrier tailnum flight\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt;\n1  2013     6    30      940        15     1216        -4 VX      N626VA     407\n2  2013     5     7     1657        -3     2104        10 DL      N3760C     329\n3  2013    12     8      859        -1     1238        11 DL      N712TW     422\n4  2013     5    14     1841        -4     2122       -34 DL      N914DL    2391\n5  2013     7    21     1102        -3     1230        -8 9E      N823AY    3652\n6  2013     1     1     1817        -3     2008         3 AA      N3AXAA     353\n# ℹ 6 more variables: origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;\n\n\n\n\nQuestion 1: Fill in the code below to write a function that finds all flights that were cancelled or delayed by more than a user supplied number of hours:\n\nfilter_severe &lt;- function(df, hours) { \n  df |&gt; \n    filter(dep_delay _____)\n}\n\n\nnycflights |&gt; \n  filter_severe(hours = 2)\n\nQuestion 2: Fill in the code below to write a function that converts the user supplied variable that uses clock time (e.g., dep_time, arr_time, etc.) into a decimal time (i.e. hours + (minutes / 60)).\n\nstandardize_time &lt;- function(df, time_var) {\n  df |&gt; \n    # Times are stored as 2008 for 8\n    mutate( {{ time_var }} := \n              as.numeric(\n                ## Grab first two numbers for hour\n                str_sub(\n                  {{ time_var }}, \n                  start = 1, \n                  end = 2)\n                ) +  \n              as.numeric(\n                ## Grab second two numbers for minutes\n                str_sub(\n                  {{ time_var }}, \n                  start = 3, \n                  end = 4)\n                ) / 60\n            )\n  \n}\n\nnycflights |&gt; \n  standardize_time(arr_time)\n\nQuestion 3: For each of the following functions determine if the function uses data-masking or tidy-selection:\n\ndistinct()\ncount()\ngroup_by()\nselect()\nrename_with()\nacross()",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Data Frame Functions"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html",
    "href": "weeks/week-2-ggplot.html",
    "title": "Introduction to ggplot",
    "section": "",
    "text": "The greatest possibilities of visual display lie in vividness and inescapability of the intended message. A visual display can stop your mental flow in its tracks and make you think. A visual display can force you to notice what you never expected to see. (“Why, that scatter diagram has a hole in the middle!”) – John Tukey, Data Based Graphics: Visual Display in the Decades to Come",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#learning-objectives",
    "href": "weeks/week-2-ggplot.html#learning-objectives",
    "title": "Introduction to ggplot",
    "section": "0.1 Learning Objectives",
    "text": "0.1 Learning Objectives\n\nDescribe charts using the grammar of graphics\nCreate layered graphics that highlight multiple aspects of the data\nEvaluate existing charts and develop new versions that improve accessibility and readability",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#loading-in-the-ggplot2-package",
    "href": "weeks/week-2-ggplot.html#loading-in-the-ggplot2-package",
    "title": "Introduction to ggplot",
    "section": "0.2 Loading in the ggplot2 Package",
    "text": "0.2 Loading in the ggplot2 Package\nIn this class, we’re going to use the ggplot2 package to create graphics in R. This package is already installed as part of the tidyverse, but can be installed:\n\ninstall.packages(\"ggplot2\")\n\nand/or loaded:\n\nlibrary(\"ggplot2\")\n\n# alternatively\nlibrary(\"tidyverse\") # (my preference!)\n\n\n\n\n\n\nBuilding a masterpiece, by Allison Horst",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#the-grammar-of-graphics",
    "href": "weeks/week-2-ggplot.html#the-grammar-of-graphics",
    "title": "Introduction to ggplot",
    "section": "1.1 The Grammar of Graphics",
    "text": "1.1 The Grammar of Graphics\nThe grammar of graphics is an approach first introduced in Leland Wilkinson’s book (Wilkinson 2005). Unlike other graphics classification schemes, the grammar of graphics makes an attempt to describe how the data set itself relates to the components of the chart.\nThis has a few advantages:\n\nIt’s relatively easy to represent the same data set with different types of plots (and to find their strengths and weaknesses)\nGrammar leads to a concise description of the plot and its contents\nWe can add layers to modify the graphics, each with their own basic grammar (just like we combine sentences and clauses to build a rich, descriptive paragraph)\n\n\n\n\nA pyramid view of the major components of the grammar of graphics, with data as the base, aesthetics building on data, scales building on aesthetics, geometric objects, statistics, facets, and the coordinate system at the top of the pyramid. Source: (Sarkar 2018)",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#making-your-first-ggplot",
    "href": "weeks/week-2-ggplot.html#making-your-first-ggplot",
    "title": "Introduction to ggplot",
    "section": "1.2 Making Your First ggplot",
    "text": "1.2 Making Your First ggplot\n▶️ Required Video: ggplot2 First Steps (4 minutes)\n💻 Required Tutorials\n\nBar Charts\nHistograms\nScatterplots\nLine Plots\n\n\n✅ Check-in 2.1\nQuestion 1 – What specifically does the code ggplot(data = mpg) do?\n\nCreates a blank plot\nMakes a scatterplot of the first two variables in the mpg dataset\nCreates a ggplot with the mpg dataset",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#aesthetics",
    "href": "weeks/week-2-ggplot.html#aesthetics",
    "title": "Introduction to ggplot",
    "section": "1.3 Aesthetics",
    "text": "1.3 Aesthetics\n▶️ Required Video: What is an aesthetic? (7 minutes)\n\n✅ Check-in 2.1\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy), color = \"blue\")\n\nQuestion 2: What aesthetics does this plot contain?\n\nx\ny\ncolor\ndata\n\nQuestion 3: Which of the following changes would set the color of the points to be blue?\n\n## Option A\nggplot(data = mpg) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy, \n                color = blue)\n  )\n\n## Option B\nggplot(data = mpg) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy), \n  color = \"blue\"\n  )\n\n## Option C\nggplot(data = mpg, \n       mapping = aes(color = \"blue\")\n       ) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy)\n  )",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#geoms",
    "href": "weeks/week-2-ggplot.html#geoms",
    "title": "Introduction to ggplot",
    "section": "1.4 geoms",
    "text": "1.4 geoms\n▶️ Required Video: What is a geometric object?\n\nWhat type of chart to use?\nIt can be hard to know what type of chart to use for a particular type of data. I recommend figuring out what you want to show first, and then thinking about how to show that data with an appropriate plot type. Consider the following factors:\n\nWhat type of variable is x? Categorical? Continuous? Discrete?\nWhat type of variable is y?\nHow many observations do I have for each x / y variable?\nAre there any important moderating variables?\nDo I have data that might be best shown in small multiples? E.g. a categorical moderating variable and a lot of data, where the categorical variable might be important for showing different features of the data?\n\nOnce you’ve thought through this, take a look through catalogs like the R Graph Gallery to see what visualizations match your data and use-case.\n\n\n✅ Check-in 2.1\nQuestion 4: Match each plot with the geom_XXX() function used to create it!\n\n\n\nLine Chart\nBoxplot\nHistogram\nArea Chart\n\n\n\ngeom_boxplot()\ngeom_point()\ngeom_hist()\ngeom_bar()\ngeom_smooth()\ngeom_point()\ngeom_area()\ngeom_line()\ngeom_histogram()",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#getting-a-bit-fancier",
    "href": "weeks/week-2-ggplot.html#getting-a-bit-fancier",
    "title": "Introduction to ggplot",
    "section": "1.5 Getting a Bit Fancier",
    "text": "1.5 Getting a Bit Fancier\nIn this section we dig a bit deeper into how we can make our code more efficient and other ways we can add additional variables to our plots.\n\nGlobal vs. local aesthetics\n▶️ Required Video: Global vs. local aesthetics (4 minutes)\n\n\n✅ Check-in 2.1\nQuestion 5: Match the code to the type of aesthetics that are being used:\n\n\n\nGlobal\n \nLocal\n\n\nggplot(data = mpg, \n       mapping = aes(x = mpg, y = hwy)\n       ) + \n  geom_point()\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = mpg, y = hwy))",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#facets",
    "href": "weeks/week-2-ggplot.html#facets",
    "title": "Introduction to ggplot",
    "section": "1.6 Facets",
    "text": "1.6 Facets\n▶️ Required Video: Adding a third variable with facets",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#data-transformations",
    "href": "weeks/week-2-ggplot.html#data-transformations",
    "title": "Introduction to ggplot",
    "section": "1.7 Data transformations",
    "text": "1.7 Data transformations\n▶️ Required Video: What is being plotted? (6 minutes)",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#changing-the-positions-of-bars",
    "href": "weeks/week-2-ggplot.html#changing-the-positions-of-bars",
    "title": "Introduction to ggplot",
    "section": "1.8 Changing the positions of bars",
    "text": "1.8 Changing the positions of bars\n▶️ Required Video: How do I change positions?\n\n✅ Check-in 2.1\nQuestion 6: What arguments for geom_jitter() control the amount of jittering?\n\nwidth\nheight\nstat\nposition\nna.rm\nshow.legend\ndata\nmapping",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "weeks/week-2-ggplot.html#plot-customizations",
    "href": "weeks/week-2-ggplot.html#plot-customizations",
    "title": "Introduction to ggplot",
    "section": "1.9 Plot Customizations",
    "text": "1.9 Plot Customizations\n📖 Required Reading: Communication\n\n\n✅ Check-in 2.1\nQuestion 7: What can the labs() function do? Select all that apply.\n\nCustomize the x-axis label\nCustomize the y-axis label\nCustomize the legend label\nCustomize the plot title\nAdd a caption to the plot",
    "crumbs": [
      "Weekly materials",
      "Week 2, Part 1 - ggplot"
    ]
  },
  {
    "objectID": "labs/instructions/lab-8-instructions.html",
    "href": "labs/instructions/lab-8-instructions.html",
    "title": "Lab 8: Searching for Efficiency",
    "section": "",
    "text": "For this week’s lab, we will be revisiting questions from previous lab assignments, with the purpose of using functions from the map() family to iterate over certain tasks. To do this, we will need to load in the data from Lab 2, Lab 3, and Lab 7. I’ve included all the datasets in the data folder, so all you need to do is read them in. 🙃",
    "crumbs": [
      "Labs",
      "Lab 8 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-8-instructions.html#lab-2",
    "href": "labs/instructions/lab-8-instructions.html#lab-2",
    "title": "Lab 8: Searching for Efficiency",
    "section": "Lab 2",
    "text": "Lab 2\nFirst up, we’re going to revisit Question 3 from Lab 2. This question asked:\n\nWhat are the data types of the variables in this dataset?\n\n1. Using map_chr(), produce a nicely formatted table of the data type of each variable in the surveys dataset. Specifically, the table should have 15 columns, one for each variable, with the datatype of that variable immediately below it’s name.",
    "crumbs": [
      "Labs",
      "Lab 8 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-8-instructions.html#lab-3",
    "href": "labs/instructions/lab-8-instructions.html#lab-3",
    "title": "Lab 8: Searching for Efficiency",
    "section": "Lab 3",
    "text": "Lab 3\nNow, were on to Lab 3 where we will revisit two questions.\nIn the original version of Lab 3, Question 5 asked you to:\n\nChange data types in whichever way you see fit (e.g., is the instructor ID really a numeric data type?)\n\n2. Using map_at(), convert the teacher_id, weekday, academic_degree, seniority, and sex columns to factors. Hint: You will need to use bind_cols() to transform the list output back into a data frame.\nNext up, we’re going revisit Question 7 which asked:\n\nWhat are the demographics of the instructors in this study? Investigate the variables academic_degree, seniority, and sex and summarize your findings in ~3 complete sentences.\n\nMany people created multiple tables of counts for each of these demographics, but in this exercise we are going to create one table with every demographic.\n3. Using pivot_longer() and pivot_wider(), recreate the table below.\n\n\n\n\n\n\n\nSame classification as Challenge 3\n\n\n\nI’m using the sen_level classification from Challenge 3\n\n\"junior\" = seniority is 4 or less (inclusive)\n\"senior\" = seniority is more than 4\n\n\n\n\n\n\n\n\n\nExtending you thinking…\n\n\n\nIf you are interested in exploring my table fomatting, I specifically used the kable() function from the knitr package to first get an HTML table. Then I styled that table using the kable_styling() function from the kableExtra package.",
    "crumbs": [
      "Labs",
      "Lab 8 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-8-instructions.html#lab-7",
    "href": "labs/instructions/lab-8-instructions.html#lab-7",
    "title": "Lab 8: Searching for Efficiency",
    "section": "Lab 7",
    "text": "Lab 7\nFor our last problem, we will revisit a question from the most recent lab. Question 1 asked you to use across() to make a table which summarized:\n\nWhat variable(s) have missing values present?\nHow many observations have missing values?\n\n4. Using map_int(), produce a nicely formatted table of the number of missing values for each variable in the fish data.",
    "crumbs": [
      "Labs",
      "Lab 8 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html",
    "href": "labs/instructions/lab-2-instructions.html",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "You can access the Lab 2 materials through the Lab 2 assignment on GitHub Classroom. We’re going to follow the same steps as last week to make your own copy of this repository:\n\n\n\n\n\n\nSame process as last week!\n\n\n\n\n\nUse these steps to make a copy of the Lab 2 repository: List of Steps to Copy the Lab Assignment from GitHub Classroom\n\n\n\n\n\n\nNow, find the lab-2-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).\n\n\n\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-2-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main\n\n\n\nGo back to your browser. I assume you’re still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on “commits”, you should see one with the message you used, e.g. “Added my name”.\n\n\n\nPart of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and attaching the .txt file containing your entire conversation with ChatGPT.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-1-making-a-copy-from-github-classroom",
    "href": "labs/instructions/lab-2-instructions.html#step-1-making-a-copy-from-github-classroom",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "You can access the Lab 2 materials through the Lab 2 assignment on GitHub Classroom. We’re going to follow the same steps as last week to make your own copy of this repository:\n\n\n\n\n\n\nSame process as last week!\n\n\n\n\n\nUse these steps to make a copy of the Lab 2 repository: List of Steps to Copy the Lab Assignment from GitHub Classroom",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-2-instructions.html#step-2-making-a-small-change",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Now, find the lab-2-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-2-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Now for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-2-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-4-verifying-your-changes",
    "href": "labs/instructions/lab-2-instructions.html#step-4-verifying-your-changes",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Go back to your browser. I assume you’re still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on “commits”, you should see one with the message you used, e.g. “Added my name”.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-5-lets-get-started-making-some-plots",
    "href": "labs/instructions/lab-2-instructions.html#step-5-lets-get-started-making-some-plots",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Part of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and attaching the .txt file containing your entire conversation with ChatGPT.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#setup",
    "href": "labs/instructions/lab-2-instructions.html#setup",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "2.1 Setup",
    "text": "2.1 Setup\nIn the code chunk below, load in the packages necessary for your analysis. You should only need the tidyverse package for this analysis.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#data-context",
    "href": "labs/instructions/lab-2-instructions.html#data-context",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "2.2 Data Context",
    "text": "2.2 Data Context\nThe Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants, and plants, as well as their respective responses to climate. To study the interactions among organisms, researchers experimentally manipulated access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.\nWe will be investigating the animal species diversity and weights found within plots at the Portal study site. The data are stored as a comma separated value (CSV) file. Each row holds information for a single animal, and the columns represent:\n\n\n\nColumn\nDescription\n\n\n\n\nrecord_id\nUnique ID for the observation\n\n\nmonth\nmonth of observation\n\n\nday\nday of observation\n\n\nyear\nyear of observation\n\n\nplot_id\nID of a particular plot\n\n\nspecies_id\n2-letter code\n\n\nsex\nsex of animal (“M”, “F”)\n\n\nhindfoot_length\nlength of the hindfoot in mm\n\n\nweight\nweight of the animal in grams\n\n\ngenus\ngenus of animal\n\n\nspecies\nspecies of animal\n\n\ntaxon\ne.g. Rodent, Reptile, Bird, Rabbit\n\n\nplot_type\ntype of plot",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#reading-the-data-into-r",
    "href": "labs/instructions/lab-2-instructions.html#reading-the-data-into-r",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "2.3 Reading the Data into R",
    "text": "2.3 Reading the Data into R\n1. Using the read_csv() function, write the code necessary to load in the surveys.csv dataset (stored in the data folder). For simplicity, name the data surveys.\n2. What are the dimensions (# of rows and columns) of these data?\n\n3. What are the data types of the variables in this dataset?",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#scatterplot",
    "href": "labs/instructions/lab-2-instructions.html#scatterplot",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "3.1 Scatterplot",
    "text": "3.1 Scatterplot\n4. First, let’s create a scatterplot of the relationship between weight (on the \\(x\\)-axis) and hindfoot_length (on the \\(y\\)-axis).\nWe can see there are a lot of points plotted on top of each other. Let’s try and modify this plot to extract more information from it.\n5. Let’s add transparency (alpha) to the points, to make the points more transparent and (possibly) easier to see.\n\nDespite our best efforts there is still a substantial amount of overplotting occurring in our scatterplot. Let’s try splitting the dataset into smaller subsets and see if that allows for us to see the trends a bit better.\n6. Facet your scatterplot by species.\n\n7. No plot is complete without axis labels and a title. Include reader friendly labels and a title to your plot.\n\nIt takes a larger cognitive load to read text that is rotated. It is common practice in many journals and media outlets to move the \\(y\\)-axis label to the top of the graph under the title.\n8. Specify your \\(y\\)-axis label to be empty and move the \\(y\\)-axis label into the subtitle.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#boxplots",
    "href": "labs/instructions/lab-2-instructions.html#boxplots",
    "title": "Lab 2: Exploring Rodents with ggplot2",
    "section": "3.2 Boxplots",
    "text": "3.2 Boxplots\n10. Create side-by-side boxplots to visualize the distribution of weight within each species.\nA fundamental complaint of boxplots is that they do not plot the raw data. However, with ggplot we can add the raw points on top of the boxplots!\n11. Add another layer to your previous plot that plots each observation.\n\nAlright, this should look less than optimal. Your points should appear rather stacked on top of each other. To make them less stacked, we need to jitter them a bit, using geom_jitter().\n12. Remove the previous layer and include a geom_jitter() layer instead.\n\nThat should look a bit better! But its really hard to see the points when everything is black.\n13. Set the color aesthetic in geom_jitter() to change the color of the points and add set the alpha aesthetic to add transparency.\n\n\n\n\n\n\n\nNote\n\n\n\nYou are welcome to use whatever color you wish! Some of my favorites are “orange3” and “steelblue”.\n\n\nGreat! Now that you can see the points, you should notice something odd: there are two colors of points still being plotted. Some of the observations are being plotted twice, once from geom_boxplot() as outliers and again from geom_jitter()!\n14. Inspect the help file for geom_boxplot() and see how you can remove the outliers from being plotted by geom_boxplot(). Make this change in your code!\n\nSome small changes can make big differences to plots. One of these changes are better labels for a plot’s axes and legend.\n15. Modify the \\(x\\)-axis and \\(y\\)-axis labels to describe what is being plotted. Be sure to include any necessary units! You might also be getting overlap in the species names – use theme(axis.text.x = ____) or theme(axis.text.y = ____) to turn the species axis labels 45 degrees.\n\nSome people (and journals) prefer for boxplots to be stacked with a specific orientation! Let’s practice changing the orientation of our boxplots.\n16. Now copy-paste your boxplot code you’ve been adding to above. Flip the orientation of your boxplots. If you created horizontally stacked boxplots, your boxplots should now be stacked vertically. If you had vertically stacked boxplots, you should now stack your boxplots horizontally!\nNotice how vertically stacked boxplots make the species labels more readable than horizontally stacked boxplots (even when the axis labels are rotated). This is good practice!",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-4/PA-4-tidyr.html",
    "href": "group-activities/week-4/PA-4-tidyr.html",
    "title": "PA 4: Military Spending",
    "section": "",
    "text": "library(readxl) \nlibrary(tidyverse)\nToday you will be tidying messy data to explore the relationship between countries of the world and military spending. You can find the gov_spending_per_capita.xlsx data included in the data folder.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them."
  },
  {
    "objectID": "group-activities/week-4/PA-4-tidyr.html#data-description",
    "href": "group-activities/week-4/PA-4-tidyr.html#data-description",
    "title": "PA 4: Military Spending",
    "section": "Data Description",
    "text": "Data Description\nWe will be using data from the Stockholm International Peace Research Institute (SIPRI). The SIPRI Military Expenditure Database is an open source data set containing time series on the military spending of countries from 1949–2019. The database is updated annually, which may include updates to data from previous years.\nMilitary expenditure is presented in many ways:\n\nin local currency and in US $ (both from 2018 and current);\nin terms of financial years and calendar years;\nas a share of GDP and per capita.\n\nThe availability of data varies considerably by country, but we note that data is available from at least the late 1950s for a majority of countries that were independent at the time. Estimates for regional military expenditure have been extended backwards depending on availability of data, but no estimates for total world military expenditure are available before 1988 due to the lack of data from the Soviet Union.\nSIPRI military expenditure data is based on open sources only."
  },
  {
    "objectID": "group-activities/week-4/PA-4-tidyr.html#data-import",
    "href": "group-activities/week-4/PA-4-tidyr.html#data-import",
    "title": "PA 4: Military Spending",
    "section": "Data Import",
    "text": "Data Import\nFirst, you should notice that there are ten different sheets included in the dataset. We are interested in the sheet labeled “Share of Govt. spending”, which contains information about the share of all government spending that is allocated to the military.\nNext, you’ll notice that there are notes about the data in the first six rows. Ugh! Also notice that the last six rows are footnotes about the data. Ugh!\nRather than copying this one sheet into a new Excel file and deleting the first and last few rows, let’s learn something new about the read_xlsx() function!\nThe read_xlsx() function has several useful arguments:\n\nsheet: specify the name of the sheet that you want to use. The name must be passed in as a string (in quotations)!\nskip: specify the number of rows you want to skip before reading in the data.\nn_max: specify the maximum number of rows of data to read in.\n\n1. Modify the code below (potentially including the file path) to read the military expenditures data into your workspace.\n\nmilitary &lt;- read_xlsx(here::here(\"data\", \n                                 \"gov_spending_per_capita.xlsx\"), \n                      sheet = , \n                      skip  = , \n                      n_max = )\n\nError: `path` does not exist: 'F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/STAT331/Glanz/Winter2025/statistical-computing-with-r/data/gov_spending_per_capita.xlsx'\n\n\nI would highly recommend you open the dataset in Excel, so you can see the data layout! ## Data Cleaning\nIn addition to NAs, missing values were coded in two other ways.\n2. What are the two ways missing values were coded?\nHint: information in the top 6 rows of the excel sheet will help you answer this question.\n3. Now that we know how missing values were coded, let’s read in the data again. This time use the na argument to specify the values that need to be replaced with NAs.\nHint: You need to specify the values to replace with NAs as a character string (e.g., c(\"a\", \"b\"))\n\nmilitary &lt;- read_xlsx(here::here(\"data\", \n                                 \"gov_spending_per_capita.xlsx\"), \n                      sheet = , \n                      skip  = , \n                      n_max = , \n                      na = c()\n                      )\n\nError: `path` does not exist: 'F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/STAT331/Glanz/Winter2025/statistical-computing-with-r/data/gov_spending_per_capita.xlsx'\n\n\n\nIf you give the Country column a look, you’ll see there are names of continents and regions included. These names are only included to make it simpler to find countries, as they contain no data.\nLuckily for us, these region names were also stored in the “Regional totals” sheet. We can use the Region column of this dataset to filter out the names we don’t want.\nRun the code below to read in the “Regional totals” data.\n\ncont_region &lt;- read_xlsx(here::here(\"data\", \n                                    \"gov_spending_per_capita.xlsx\"), \n                      sheet = \"Regional totals\", \n                      skip = 14) |&gt; \n  filter(Region != \"World total (including Iraq)\", \n         Region != \"World total (excluding Iraq)\")\n\nError: `path` does not exist: 'F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/STAT331/Glanz/Winter2025/statistical-computing-with-r/data/gov_spending_per_capita.xlsx'\n\n\nA clever way to filter out observations you don’t want is with an anti_join(). This function will return all of the rows of one dataset without a match in another dataset.\n4. Use the anti_join() function to filter out the Country values we don’t want in the military_clean data. The by argument needs to be filled with the name(s) of the variables that the two datasets should be joined with.\nHint: To join by different variables in data1 and data2 you need to use by = join_by(a == b), which will match data1$a to data2$b.\n\nCanvas Question #1\n5. Complete the code below to figure out what four regions were NOT removed from the military_clean data set?\nHint: the regions that were not removed have missing values for every column except Country.\n\nmilitary_clean |&gt; \n  filter(if_all(.cols = , \n                .fns = )\n         )\n\nError: object 'military_clean' not found"
  },
  {
    "objectID": "group-activities/week-4/PA-4-tidyr.html#data-organization",
    "href": "group-activities/week-4/PA-4-tidyr.html#data-organization",
    "title": "PA 4: Military Spending",
    "section": "Data Organization",
    "text": "Data Organization\n\nWe are interested in comparing the military expenditures of countries in Eastern Europe. Our desired plot looks something like this:\n\n\n\nDesired plot: Countries from Central Asia used for demonstration – your plot will have different countries and spending values.\n\n\nUnfortunately, if we want a point representing the spending for every country and year, we need every year to be a single column!\nTo tidy a dataset like this, we need to pivot the columns of years from wide format to long format. To do this process we need three arguments:\n\ncols: The set of columns that represent values, not variables. In these data, those are all the columns from 1988 to 2019.\nnames_to: The name of the variable that should be created to move these columns into. In these data, this could be \"Year\".\nvalues_to: The name of the variable that should be created to move these column’s values into. In these data, this could be labeled \"Spending\".\n\nThese form the three required arguments for the pivot_longer() function.\n6. Pivot the cleaned up military data set to a “longer” orientation. Save this new “long” version as a new object called military_long.\nHint: Do not overwrite your cleaned up dataset!"
  },
  {
    "objectID": "group-activities/week-4/PA-4-tidyr.html#data-visualization",
    "href": "group-activities/week-4/PA-4-tidyr.html#data-visualization",
    "title": "PA 4: Military Spending",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nNow that we’ve transformed the data, let’s create a plot to explore military spending across Eastern European countries.\n7. Create side-by-side boxplots to explore the military spending between Eastern European countries.\nHint 1: Place the Country variable on an axis that makes it easier to read the labels!\nHint 2: Make sure you change the plot title and axis labels to accurately represent the plot.\n\n# Countries to include in the plot!\neastern_europe &lt;- c(\"Armenia\", \n                    \"Azerbaijan\",\n                    \"Belarus\", \n                    \"Georgia\", \n                    \"Moldova\", \n                    \"Russia\", \n                    \"Ukraine\")\n\n\nCanvas Question 2 & Question 3\n8. Looking at the plot you created above, which Eastern European country had the second highest median military expenditure?.\n9. Looking at the plot you created above, which Eastern European country had the largest variability in military expenditures over time?"
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html",
    "href": "labs/instructions/lab-7-instructions.html",
    "title": "Lab 7: Functions + Fish",
    "section": "",
    "text": "The goal of this lab is learn more about exploring missing data and writing modular code."
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html#the-data",
    "href": "labs/instructions/lab-7-instructions.html#the-data",
    "title": "Lab 7: Functions + Fish",
    "section": "The Data",
    "text": "The Data\nThis lab’s data concerns mark-recapture data on four species of trout from the Blackfoot River outside of Helena, Montana. These four species are rainbow trout (RBT), westslope cutthroat trout (WCT), bull trout, and brown trout.\n\nMark-recapture is a common method used by ecologists to estimate a population’s size when it is impossible to conduct a census (count every animal). This method works by tagging animals with a tracking device so that scientists can track their movement and presence."
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html#data-exploration",
    "href": "labs/instructions/lab-7-instructions.html#data-exploration",
    "title": "Lab 7: Functions + Fish",
    "section": "Data Exploration",
    "text": "Data Exploration\nThe measurements of each captured fish were taken by a biologist on a raft in the river. The lack of a laboratory setting opens the door to the possibility of measurement errors.\n1. Let’s look for missing values in the dataset. Output ONE table that answers BOTH of the following questions:\n\nHow many observations have missing values?\nWhat variable(s) have missing values present?\n\n\n\n\n\n\n\nYou should use across()!\n\n\n\n\n\n\n2. Create ONE thoughtful visualization that explores the frequency of missing values across the different years, sections, and trips."
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html#rescaling-the-data",
    "href": "labs/instructions/lab-7-instructions.html#rescaling-the-data",
    "title": "Lab 7: Functions + Fish",
    "section": "Rescaling the Data",
    "text": "Rescaling the Data\nIf I wanted to rescale every quantitative variable in my dataset so that they only have values between 0 and 1, I could use this formula:\n\n\\[y_{scaled} = \\frac{y_i - min\\{y_1, y_2,..., y_n\\}}{max\\{y_1, y_2,..., y_n\\}\n- min\\{y_1, y_2,..., y_n\\}}\\]\n\nI might write the following R code to carry out the rescaling procedure for the length and weight columns of the BlackfoorFish data:\n\nfish &lt;- fish |&gt; \n  mutate(length = (length - min(length, na.rm = TRUE)) / \n           (max(length, na.rm = TRUE) - min(length, na.rm = TRUE)), \n         weight = (weight - min(weight, na.rm = TRUE)) / \n           (max(weight, na.rm = TRUE) - min(length, na.rm = TRUE)))\n\nThis process of duplicating an action multiple times can make it difficult to understand the intent of the process. Additionally, it can make it very difficult to spot mistakes.\n3. What is the mistake I made in the above rescaling code?\nWhen you find yourself copy-pasting lines of code, it’s time to write a function, instead!\n4. Transform the repeated process above into a rescale_01() function. Your function should…\n\n… take a single vector as input.\n… return the rescaled vector.\n\n\n\n\n\n\n\nEfficiency\n\n\n\nAre you calling the same function multiple times? You might want to look into the range() function.\n\n\n5. Let’s incorporate some input validation into your function. Modify your previous code so that the function stops if …\n\n… the input vector is not numeric.\n… the length of the input vector is not greater than 1.\n\n\n\n\n\n\n\nModify Previous Code\n\n\n\nDo not create a new code chunk here – simply add these stops to your function above!"
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html#test-your-function",
    "href": "labs/instructions/lab-7-instructions.html#test-your-function",
    "title": "Lab 7: Functions + Fish",
    "section": "Test Your Function",
    "text": "Test Your Function\n6. Run the code below to test your function. Verify that the maximum of your rescaled vector is 1 and the minimum is 0!\n\nx &lt;- c(1:25, NA)\n\nrescaled &lt;- rescale_01(x)\nmin(rescaled, na.rm = TRUE)\nmax(rescaled, na.rm = TRUE)\n\nNext, let’s test the function on the length column of the BlackfootFish data.\n7. The code below makes a histogram of the original values of length. Add a plot of the rescaled values of length. Output your plots side-by-side, so the reader can confirm the only aspect that has changed is the scale.\n\n\n\n\n\n\nWarning\n\n\n\nThis will require you to call your rescale_01() function within a mutate() statement in order to create a length_scaled variable.\n\n\n\nfish |&gt;  \n  ggplot(aes(x = length)) + \n  geom_histogram(binwidth = 45) +\n  labs(x = \"Original Values of Fish Length (mm)\") +\n  scale_y_continuous(limits = c(0,4000))\n\n# Code for Q7 plot.\n\n\n\n\n\n\n\nTip\n\n\n\n\nSet the y-axis limits for both plots to go from 0 to 4000 to allow for direct comparison across plots.\nPay attention to binwidth!\nUse a Quarto code chunk option to put the plots side-by-side."
  },
  {
    "objectID": "labs/instructions/lab-7-instructions.html#use-variables-within-a-dataset",
    "href": "labs/instructions/lab-7-instructions.html#use-variables-within-a-dataset",
    "title": "Lab 7: Functions + Fish",
    "section": "Use Variables within a Dataset",
    "text": "Use Variables within a Dataset\nSuppose you would like for your rescale() function to perform operations on a variable within a dataset. Ideally, your function would take in a data frame and a variable name as inputs and return a data frame where the variable has been rescaled.\n8. Create a rescale_column() function that accepts two arguments:\n\na dataframe\nthe name(s) of the variable(s) to be rescaled\n\nThe body of the function should call the original rescale_01() function you wrote previously. Your solution MUST use one of the rlang options from class.\n\n\n\n\n\n\nTip\n\n\n\nIf you are struggling with this task, I recommend looking back over the data frame functions section of R for Data Science!\n\n\n9. Use your rescale_column() function to rescale both the length and weight columns.\n\n\n\n\n\n\nWarning\n\n\n\nI expect that you carry out this process by calling the rescale_column() function only ONE time!"
  },
  {
    "objectID": "group-activities/week-5/PA-5-dates.html",
    "href": "group-activities/week-5/PA-5-dates.html",
    "title": "PA 5.2: Jewel Heist",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "group-activities/week-5/PA-5-dates.html#solve-the-mystery",
    "href": "group-activities/week-5/PA-5-dates.html#solve-the-mystery",
    "title": "PA 5.2: Jewel Heist",
    "section": "Solve the Mystery",
    "text": "Solve the Mystery\nJust down the road in Montecito, CA several rare jewels went missing. The jewels were stolen and replaced with fakes, but detectives have not been able to solve the case. They are now calling in a data scientist to help parse their clues.\nA camera was located near the building where the jewels went missing, so the detectives have provided you with a list of people who may have entered the building. This list includes the date and time they were spotted on the camera, in Pacific Standard Time (PST).\nUnfortunately, the date and time of the jewel heist is not known. You have been hired to crack the case. Use the clues below to discover the thief’s identity.\n\nsuspects &lt;- read_csv(\"https://raw.githubusercontent.com/zoerehnberg/STAT331-S23/main/practice_activities/suspects.csv\")\n\ndim(suspects)\n\n[1] 214   3\n\n# 214 total suspects\n\n\n\nThe crime was committed in Montecito, CA, so we need to make sure the time zone for these dates are correct. Modify the Time.Spotted variable to have the correct time zone.\n\n\nBased on the cleaning schedule for the room where the jewels are held, the heist was not committed in the morning.\n\n\n# After this step you should have 112 suspects left\n\n\nThe room where the heist was committed is closed on Tuesdays and Thursdays (and there were no signs of forced entry), so the heist did not happen on those days.\n\n\n# After this step you should have 78 suspects left\n\n\n\nIt is believed that the heist was committed within 5 weeks (35 days) of Thanksgiving 2022. Hint: Pay attention to time zones!\n\n\n# After this step you should have 11 suspects left\n\n\nThe detectives partially decoded a message from the thief to a notorious fence in Iceland. In it, the thief said the job would be done “after the sun sets for you, but before midnight.” Hint: When does the sun set in Iceland at that time of year?\n\n\n# After this step you should have 4 suspects left\n\n\nThe thief left behind a receipt at the scene of the crime. The receipt is smudged, but the day of the month is shown to be 22. It is thought that the heist took place no more than three days after the receipt was issued.\n\n\n# After this step you should have 2 suspects left\n\n\n\nThe thief is amused by your efforts and has sent you a cryptic clue:\n\n\n“The exact number of seconds between midnight on Jan 1, 1970 and the time I arrived on the scene is divisible by 6.”\n\n\n# You should end with 1 suspect left"
  },
  {
    "objectID": "group-activities/week-5/PA-5-dates.html#canvas-quiz-submission",
    "href": "group-activities/week-5/PA-5-dates.html#canvas-quiz-submission",
    "title": "PA 5.2: Jewel Heist",
    "section": "Canvas Quiz Submission",
    "text": "Canvas Quiz Submission\nWho is the thief? Only one name should remain."
  },
  {
    "objectID": "group-activities/week-9/PA-9.html",
    "href": "group-activities/week-9/PA-9.html",
    "title": "PA 9: Instrument Con",
    "section": "",
    "text": "Professor Harold Hill wanders into your small town. He claims to be selling top-quality instruments for a marching band. He begins selling his instruments to all the children in town.\nYou are suspicious of Professor Hill, and think that perhaps he is selling instruments made of sub-par materials to scam the townsfolk.\nYou do some research on the weights of properly crafted brass instruments, and you learn the following facts:"
  },
  {
    "objectID": "group-activities/week-9/PA-9.html#warm-up",
    "href": "group-activities/week-9/PA-9.html#warm-up",
    "title": "PA 9: Instrument Con",
    "section": "Warm-up",
    "text": "Warm-up\n\n1. What is the 95th percentile for trumpet weight?\n2. What is the 10th percentile for trombone weight?\n3. About what percent of trombones do you expect to be more than 5 pounds?\n\n4. About what percent of reed instruments do you expect to be more than 5 pounds?\n5. Simulate 100 random trombone weights. How many of them were below 4 pounds?"
  },
  {
    "objectID": "group-activities/week-9/PA-9.html#catching-a-con",
    "href": "group-activities/week-9/PA-9.html#catching-a-con",
    "title": "PA 9: Instrument Con",
    "section": "Catching a Con",
    "text": "Catching a Con\nYou manage to intercept a shipping notice for a delivery to Professor Hill. It says the following:\nWells Fargo Shipment 1957\n\nTo:  Harold Hill, Mason City, Iowa\nFrom:  Music Factory, Gary, Indiana\n\nItems included:\n    Trombones: 76\n    Cornets: 110\n    Saxophones: 542\n    Clarinets: 318\n    Bassoons: 175\n    \nTotal Shipped Weight: 4532 lbs.\nThis is your chance to catch Professor Hill in his lie!\n\n6. Write a function that samples the correct number of trombones, cornets (trumpets), and reed instruments (saxophones, clarinets, bassoons), and then returns the total weight of the shipment.\n\nmusic_man &lt;- function(n_tromb, n_cor, n_reed){\n  \n  trombones &lt;- rnorm(n_tromb, ...)\n  cornets   &lt;- ...\n  reeds     &lt;- ...\n  \n  ...\n  \n  return()\n  \n}\n\n\n7. Use the function you just wrote to create random samples of the total weight of 1000 possible shipments. Do not change the seed in the code provided below!\n\nset.seed(1957)\n\nmy_weights &lt;- map_dbl(.x = 1:1000, \n                      .f = ~ music_man(n_tromb = 76, ...)\n                      )\n\nError in `map_dbl()`:\nℹ In index: 1.\nCaused by error in `music_man()`:\n! '...' used in an incorrect context"
  },
  {
    "objectID": "group-activities/week-9/PA-9.html#canvas-submission",
    "href": "group-activities/week-9/PA-9.html#canvas-submission",
    "title": "PA 9: Instrument Con",
    "section": "Canvas submission",
    "text": "Canvas submission\nYou and your partner together should address the following questions:\n\nHow many of these samples had a weight less than or equal to Professor Hill’s shipment?\nDo you beleive Professor Hill ordered genuine instruments?"
  },
  {
    "objectID": "weeks/week-4-reshaping-joining.html",
    "href": "weeks/week-4-reshaping-joining.html",
    "title": "Data Joins and Transformations",
    "section": "",
    "text": "Broadly, your objective while reading these chapters is to be able to identify data sets which have “messy” formats and determine a sequence of operations to transition the data into “tidy” format. To do this, you should master the following concepts:"
  },
  {
    "objectID": "weeks/week-4-reshaping-joining.html#examples-messy-data",
    "href": "weeks/week-4-reshaping-joining.html#examples-messy-data",
    "title": "Data Joins and Transformations",
    "section": "1.1 Examples: Messy Data",
    "text": "1.1 Examples: Messy Data\nThese datasets all display the same data: TB (Tuberculosis) cases documented by the WHO (World Health Organization) in Afghanistan, Brazil, and China, between 1999 and 2000. There are four variables: country, year, cases, and population, but each table has a different layout.\n\nFor each of the data set, determine whether each table is tidy.\n\nIf it is not, identify which rule(s) it violates.\n\nWhat would you have to do to the data to be able to compute a standardized TB infection rate per 100,000 people?\n\n\n\n\n\n\n\nTip\n\n\n\nAll of these data sets are “built-in” to the tidyr package!\n\n\n\nTable 1Table 2Table 3Table 4Table 5\n\n\n\n\n\nTable 1\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\nHere, each observation is a single row, each variable is a column, and everything is nicely arranged for e.g. regression or statistical analysis. We can easily compute another measure, such as cases per 100,000 population, by taking cases / population * 100000 (this would define a new column).\n\n\n\n\n\nTable 2\n\n\ncountry\nyear\ntype\ncount\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n1999\npopulation\n19987071\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nAfghanistan\n2000\npopulation\n20595360\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n1999\npopulation\n172006362\n\n\nBrazil\n2000\ncases\n80488\n\n\nBrazil\n2000\npopulation\n174504898\n\n\nChina\n1999\ncases\n212258\n\n\nChina\n1999\npopulation\n1272915272\n\n\nChina\n2000\ncases\n213766\n\n\nChina\n2000\npopulation\n1280428583\n\n\n\n\n\nHere, we have 4 columns again, but we now have 12 rows (instead of 6): one of the columns is an indicator of which of two numerical observations is recorded in that row; a second column stores the value (e.g., cases, population). This form of the data is more easily plotted in ggplot2, if we want to show trend lines for both cases and population, but computing per capita cases would be much more difficult in this form than in the arrangement in Table 1!\n\n\n\n\n\nTable 3\n\n\ncountry\nyear\nrate\n\n\n\n\nAfghanistan\n1999\n745/19987071\n\n\nAfghanistan\n2000\n2666/20595360\n\n\nBrazil\n1999\n37737/172006362\n\n\nBrazil\n2000\n80488/174504898\n\n\nChina\n1999\n212258/1272915272\n\n\nChina\n2000\n213766/1280428583\n\n\n\n\n\nThis form has only 3 columns, because the rate variable (which is a character) stores both the case count and the population. We can’t do anything with this format as it stands, because we can’t do math on data stored as characters. However, this form might be easier to read and record for a human being.\n\n\n\n\n\nTable 4a\n\n\ncountry\n1999\n2000\n\n\n\n\nAfghanistan\n745\n2666\n\n\nBrazil\n37737\n80488\n\n\nChina\n212258\n213766\n\n\n\n\n\n\nTable 4b\n\n\ncountry\n1999\n2000\n\n\n\n\nAfghanistan\n19987071\n20595360\n\n\nBrazil\n172006362\n174504898\n\n\nChina\n1272915272\n1280428583\n\n\n\n\n\nIn this form, we have two tables - one for population, and one for cases. Each year’s observations are in a separate column. This format is often found in separate sheets of an Excel workbook. To work with this data, we’ll need to transform each table so that there is a column indicating which year an observation is from, and then merge the two tables together by country and year.\n\n\n\n\n\nTable 5\n\n\ncountry\ncentury\nyear\nrate\n\n\n\n\nAfghanistan\n19\n99\n745/19987071\n\n\nAfghanistan\n20\n00\n2666/20595360\n\n\nBrazil\n19\n99\n37737/172006362\n\n\nBrazil\n20\n00\n80488/174504898\n\n\nChina\n19\n99\n212258/1272915272\n\n\nChina\n20\n00\n213766/1280428583\n\n\n\n\n\nTable 5 is very similar to Table 3, but the year has been separated into two columns - century, and year. This is more common with year, month, and day in separate columns (or date and time in separate columns), often to deal with the fact that spreadsheets don’t always handle dates the way you’d hope they would.\n\n\n\nIn a perfect world, all data would come in the right format for our needs, but this is often not the case. We will spend the next few weeks learning about how to use R to reformat our data to follow the tidy data framework and see why this is so important. By the end of this chapter, you will have the skills needed to wrangle and transform the most common “messy” data sets into “tidy” form.\n\n\n\n\n\n\nDo we always want our data in the same layout?\n\n\n\nThe concept of tidy data is useful for mapping variables from the data set to elements in a graph, specifications of a model, or aggregating to create summaries. However, what is considered to be “tidy data” format for one task, might not be in the correct “tidy data” format for a different task. It is important for you to consider the end goal when restructuring your data.\nPart of this course is building the skills for you to be able to map your data operation steps from an original data set to the correct format (and output)."
  },
  {
    "objectID": "group-activities/week-3/PA-3-dplyr.html",
    "href": "group-activities/week-3/PA-3-dplyr.html",
    "title": "PA 3: Identify the Mystery College 🏫",
    "section": "",
    "text": "Today you will use the dplyr package to clean some data. We will then use that cleaned data to figure out what college Ephelia has been accepted to.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-3/PA-3-dplyr.html#data-download-package-loading",
    "href": "group-activities/week-3/PA-3-dplyr.html#data-download-package-loading",
    "title": "PA 3: Identify the Mystery College 🏫",
    "section": "Data Download & Package Loading",
    "text": "Data Download & Package Loading\nFirst, we declare our package dependencies and load the data.\nThe data loading function read_csv() will give you an outpouring of helpful information about the dataset. If you do not see the word “error”, there is nothing to be concerned about.\n\nlibrary(tidyverse)\n\ncolleges &lt;- read_csv(\"https://www.dropbox.com/s/bt5hvctdevhbq6j/colleges.csv?dl=1\")\n\nTake a look at the variables in your downloaded data by running the following code. This tells reports the data type for each column in the dataset.\n\nglimpse(colleges)"
  },
  {
    "objectID": "group-activities/week-3/PA-3-dplyr.html#data-cleaning",
    "href": "group-activities/week-3/PA-3-dplyr.html#data-cleaning",
    "title": "PA 3: Identify the Mystery College 🏫",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nNow we will clean the data. Alas, each of the R chunks in this section will cause an error and / or do the desired task incorrectly. Even the chunks that run without error are not correct! You will need to find the mistake and correct it to complete the intended action.\nStep 1: There are too many variables in this data set. We don’t need all of them. Narrow your data set down to only:\n\nINSTNM name of the institution\nCITY city, STABBR state, and ZIP ZIP code of the institution\nADM_RATE admissions rate\nSAT_AVG average SAT score\nUGDS number of undergraduate students\nTUITIONFEE_IN in- and TUITIONFEE_OUT out-of-state tuition\nCONTROL Whether the school is public or private\nREGION region of the school.\n\n\ncolleges_clean1 &lt;- colleges | &gt;  \n  select(INSTNM, \n         CITY, \n         STABBR, \n         ZIP,\n         ADM_RATE, \n         SAT_AVG, \n         UGDS,\n         TUITIONFEE_IN, \n         TUITIONFEE_OUT\n         CONTROL,\n         REGION) \n\nStep 2: Remove the schools that are private and for-profit (category 3).\n\ncolleges_clean2 &lt;- colleges_clean1 |&gt; \n  filter(CONTROL == 3)\n\nStep 3: Adjust the appropriate variables to be numeric, using as.numeric().\n\ncolleges_clean3 &lt;- colleges_clean2 |&gt; \n  mutate(TUITIONFEE_IN  = numeric(TUITIONFEE_IN),\n         TUITIONFEE_OUT = numeric(TUITIONFEE_OUT),\n         SAT_AVG        = numeric(SAT_AVG),\n         UGDS           = numeric(UGDS),\n         ADM_RATE       = numeric(ADM_RATE)) \n\n\nStep 4: Adjust the appropriate variables to be factors, using as.factor().\n\ncolleges_clean4 &lt;- colleges_clean3 |&gt;\n  mutate(CONTROL = as.character(CONTROL),\n         REGION  = as.character(REGION))\n\nStep 5: Create a new variable called TUITION_DIFF which contains the difference between out-of-state and in-state costs.\n\ncolleges_clean5 &lt;- colleges_clean4 |&gt; \n    TUITION_DIFF = TUITIONFEE_OUT - TUITIONFEE_IN\n\nStep 6: Remove every row with missing data.\n\ncolleges_clean6 &lt;- colleges_clean5 |&gt; \n  drop.na()\n\nAt this point we’ve made six different datasets, but notice each of these steps started with colleges_clean &lt;- colleges_clean |&gt;. That is pretty redundant! Instead, we could have performed all these tasks as one long “pipeline.”\nStep 7: Combine your (fixed) code chunks into a single code chunk that carries out all of the steps necessary to clean the data.\nThink about coding efficiency – you should not have multiple calls to the same function!\n\n# Code combining ALL of your previous steps into ONE pipeline\n\ncolleges_clean &lt;- colleges |&gt;"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets",
    "title": "Using map() to Simulate Data",
    "section": "Simulate Multiple Datasets",
    "text": "Simulate Multiple Datasets\n\nFunctionParametersSimulate\n\n\nWrite a function to simulate height data from a population with some mean and SD height.\n\nht_func &lt;- function(n = 200, avg, std){\n  tibble(person = 1:n,\n         ht = rnorm(n = n, mean = avg, sd = std))\n}\n\nht_func(n = 5, avg = 66, std = 3)\n\n# A tibble: 5 × 2\n  person    ht\n   &lt;int&gt; &lt;dbl&gt;\n1      1  62.5\n2      2  64.9\n3      3  71.2\n4      4  67.0\n5      5  69.1\n\n\n\n\nCreate a mean and SD height for each population.\n\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n            std_ht  = c(3, 6))\n\n# A tibble: 8 × 2\n  mean_ht std_ht\n    &lt;dbl&gt;  &lt;dbl&gt;\n1      60      3\n2      60      6\n3      66      3\n4      66      6\n5      72      3\n6      72      6\n7      78      3\n8      78      6\n\n\n\n\nSimulate datasets with different mean and SD heights.\n\n\nCode\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n         std_ht  = c(3, 6)\n         ) |&gt; \n mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), \n                       .f = ht_func\n                       )\n        ) |&gt; \n  unnest(cols = ht_data) |&gt; \n  slice_sample(n = 10)\n\n\n# A tibble: 10 × 4\n   mean_ht std_ht person    ht\n     &lt;dbl&gt;  &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n 1      60      3     26  60.3\n 2      78      3    171  80.5\n 3      66      3     53  72.7\n 4      60      6     76  63.4\n 5      60      6    120  50.1\n 6      72      3     11  71.9\n 7      66      6    188  69.3\n 8      72      6    137  70.7\n 9      72      3    188  69.7\n10      66      6    178  69.6"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#nest-and-unnest",
    "href": "slides/week-9/data-simulation-part-2.html#nest-and-unnest",
    "title": "Simulating Probabilities & Datasets",
    "section": "nest() and unnest()",
    "text": "nest() and unnest()\n\nWe can pair functions from the map() family very nicely with two tidyr functions: nest() and unnest().\nThese allow us to easily map functions onto subsets of the data."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#nest",
    "href": "slides/week-9/data-simulation-part-2.html#nest",
    "title": "Simulating Probabilities & Datasets",
    "section": "nest()",
    "text": "nest()\nNest subsets of the data (as tibbles) inside a tibble.\n\nSpecify the column(s) to create subsets on.\n\n\n\n\nmtcars |&gt; \n  nest(.by = cyl)\n\n\n\n\n# A tibble: 3 × 2\n    cyl data              \n  &lt;dbl&gt; &lt;list&gt;            \n1     6 &lt;tibble [7 × 10]&gt; \n2     4 &lt;tibble [11 × 10]&gt;\n3     8 &lt;tibble [14 × 10]&gt;"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#unnest",
    "href": "slides/week-9/data-simulation-part-2.html#unnest",
    "title": "Simulating Probabilities & Datasets",
    "section": "unnest()",
    "text": "unnest()\nUn-nest the data by row binding the subsets back together.\n\nSpecify the column(s) that contains the subsets.\n\n\n\n\n\nmtcars |&gt; \n  nest(.by = cyl) |&gt; \n  unnest(data) |&gt; \n  slice_head(n = 10)\n\n\n\n\n\n\n\n\n# A tibble: 10 × 11\n     cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     6  21    160    110  3.9   2.62  16.5     0     1     4     4\n 2     6  21    160    110  3.9   2.88  17.0     0     1     4     4\n 3     6  21.4  258    110  3.08  3.22  19.4     1     0     3     1\n 4     6  18.1  225    105  2.76  3.46  20.2     1     0     3     1\n 5     6  19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n 6     6  17.8  168.   123  3.92  3.44  18.9     1     0     4     4\n 7     6  19.7  145    175  3.62  2.77  15.5     0     1     5     6\n 8     4  22.8  108     93  3.85  2.32  18.6     1     1     4     1\n 9     4  24.4  147.    62  3.69  3.19  20       1     0     4     2\n10     4  22.8  141.    95  3.92  3.15  22.9     1     0     4     2"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#draw-a-random-sample",
    "href": "slides/week-9/data-simulation-part-2.html#draw-a-random-sample",
    "title": "Using map() to Simulate Data",
    "section": "Draw a Random Sample",
    "text": "Draw a Random Sample\nUse sample() to take a random sample of values from a vector.\n\nmy_vec &lt;- c(\"dog\", \"cat\", \"bunny\", \"horse\", \"goat\", \"chicken\")\n\nsample(x = my_vec, size = 3)\n\n[1] \"cat\"     \"goat\"    \"chicken\"\n\nset.seed(1)\nsample(x = my_vec, size = 5, replace = T)\n\n[1] \"dog\"   \"horse\" \"dog\"   \"cat\"   \"goat\""
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#draw-a-random-sample-1",
    "href": "slides/week-9/data-simulation-part-2.html#draw-a-random-sample-1",
    "title": "Using map() to Simulate Data",
    "section": "Draw a Random Sample",
    "text": "Draw a Random Sample\nUse sample_n() to take a random sample of observations (rows) from a dataset.\n\nfake_data |&gt; \n  sample_n(size = 3)\n\n# A tibble: 3 × 5\n  names                    height   age measure supports_measure_A\n  &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;chr&gt;             \n1 Dr. Rutherford Gutmann I   70.6  65.1       1 yes               \n2 Vance Baumbach             70.1  34.3       1 yes               \n3 Daron Macejkovic           61.7  33.9       0 no"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation",
    "href": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation",
    "title": "Using map() to Simulate Data",
    "section": "Example: Birthday Simulation",
    "text": "Example: Birthday Simulation\nUse a map() function to simulate 1000 datasets.\n\nWhat proportion of these datasets contain at least two people with the same birthday?\n\n\nsim_results &lt;- map_lgl(.x = 1:1000,\n                       .f = ~ get_shared_birthdays(n = 50))\n\nsum(sim_results)/1000\n\n[1] 0.965"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation-1",
    "href": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation-1",
    "title": "Using map() to Simulate Data",
    "section": "Example: Birthday Simulation",
    "text": "Example: Birthday Simulation\nUse a map() function to simulate 1000 datasets.\n\nWhat proportion of these datasets contain at least two people with the same birthday?\n\n\nsim_results &lt;- map_lgl(.x = 1:1000,\n                       .f = ~ bDays(n = 50))\n\nsum(sim_results)/1000\n\n[1] 0.965"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation-2",
    "href": "slides/week-9/data-simulation-part-2.html#example-birthday-simulation-2",
    "title": "Using map() to Simulate Data",
    "section": "Example: Birthday Simulation",
    "text": "Example: Birthday Simulation\nUse a map() function to simulate 1000 datasets.\n\nWhat proportion of these datasets contain at least two people with the same birthday?\n\n\nsim_results &lt;- map_lgl(.x = 1:1000,\n                       .f = ~ bDays(n = 50))\n\nsum(sim_results)/1000\n\n[1] 0.967"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#in-line-code",
    "href": "slides/week-9/data-simulation-part-2.html#in-line-code",
    "title": "Simulating Probabilities & Datasets",
    "section": "In-line Code",
    "text": "In-line Code\nWe can automatically include code output in the written portion of a Quarto document using `r`.\n\n\n\nmy_rand &lt;- rnorm(1, mean = 0, sd = 1)\nmy_rand\n\n[1] -1.936856\n\n\n\nType this: My random number is `r my_rand`.\nTo get this: My random number is -1.936856."
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html",
    "href": "labs/instructions/lab-3-instructions.html",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "",
    "text": "In this lab, we will be using the dplyr package to explore student evaluations of teaching data. You are expected to use functions from dplyr to do your data manipulation!",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#step-1-making-a-copy-from-github-classroom",
    "href": "labs/instructions/lab-3-instructions.html#step-1-making-a-copy-from-github-classroom",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Step 1: Making a Copy from GitHub Classroom",
    "text": "Step 1: Making a Copy from GitHub Classroom\nYou can access the Lab 3 materials through the Lab 3 assignment on GitHub Classroom. We’re going to follow the same steps as last week to make your own copy of this repository:\n\n\n\n\n\n\n\nSame process as last week!\n\n\n\n\n\nUse these steps to make a copy of the Lab 2 repository: List of Steps to Copy the Lab Assignment from GitHub Classroom",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-3-instructions.html#step-2-making-a-small-change",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Step 2: Making a Small Change",
    "text": "Step 2: Making a Small Change\nNow, find the lab-3-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-3-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Step 3: Pushing Your Lab to GitHub",
    "text": "Step 3: Pushing Your Lab to GitHub\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-3-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#step-4-lets-get-started-wranging-some-data",
    "href": "labs/instructions/lab-3-instructions.html#step-4-lets-get-started-wranging-some-data",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Step 4: Let’s get started wranging some data!",
    "text": "Step 4: Let’s get started wranging some data!",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#setting-up-your-code-chunks",
    "href": "labs/instructions/lab-3-instructions.html#setting-up-your-code-chunks",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Setting Up Your Code Chunks",
    "text": "Setting Up Your Code Chunks\n\nThe first chunk of your Quarto document should be to declare your libraries (probably only tidyverse for now).\nThe second chunk of your Quarto document should be to load in your data.",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#save-regularly-render-often",
    "href": "labs/instructions/lab-3-instructions.html#save-regularly-render-often",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Save Regularly, Render Often",
    "text": "Save Regularly, Render Often\n\nBe sure to save your work regularly.\nBe sure to render your file every so often, to check for errors and make sure it looks nice.\n\nMake sure your Quarto document does not contain View(dataset) or install.packages(\"package\"), both of these will prevent rendering.\nCheck your Quarto document for occasions when you looked at the data by typing the name of the data frame. Leaving these in means the whole dataset will print out and this looks unprofessional. Remove these!\nIf all else fails, you can set your execution options to error: true, which will allow the file to render even if errors are present.",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#the-data",
    "href": "labs/instructions/lab-3-instructions.html#the-data",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "The Data",
    "text": "The Data\nThe teacher_evals dataset contains student evaluations of reaching (SET) collected from students at a University in Poland. There are SET surveys from students in all fields and all levels of study offered by the university. 1\nThe SET questionnaire that every student at this university completes is as follows:\n\nEvaluation survey of the teaching staff of University of Poland. Please complete the following evaluation form, which aims to assess the lecturer’s performance. Only one answer should be indicated for each question. The answers are coded in the following way: 5 - I strongly agree; 4 - I agree; 3 - Neutral; 2 - I don’t agree; 1 - I strongly don’t agree.\nQuestion 1: I learned a lot during the course.\nQuestion 2: I think that the knowledge acquired during the course is very useful.\nQuestion 3: The professor used activities to make the class more engaging.\nQuestion 4: If it was possible, I would enroll for a course conducted by this lecturer again.\nQuestion 5: The classes started on time.\nQuestion 6: The lecturer always used time efficiently.\nQuestion 7: The lecturer delivered the class content in an understandable and efficient way.\nQuestion 8: The lecturer was available when we had doubts.\nQuestion 9. The lecturer treated all students equally regardless of their race, background and ethnicity.\n\nThese data are from the end of the winter semester of the 2020-2021 academic year. In the period of data collection, all university classes were entirely online amid the COVID-19 pandemic. While expected learning outcomes were not changed, the online mode of study could have affected grading policies and could have implications for data.\nAverage SET scores were combined with many other variables, including:\n\ncharacteristics of the teacher (degree, seniority, gender, SET scores in the past 6 semesters).\ncharacteristics of the course (time of day, day of the week, course type, course breadth, class duration, class size).\npercentage of students providing SET feedback.\ncourse grades (mean, standard deviation, percentage failed for the current course and previous 6 semesters).\n\nThis rich dataset allows us to investigate many of the biases in student evaluations of teaching that have been reported in the literature and to formulate new hypotheses.\nBefore tackling the problems below, study the description of each variable included in the teacher_evals_codebook.pdf inside the “resources” folder.\n1. Load the appropriate R packages for your analysis.\n\n# code chunk for loading packages\n\n2. Load in the teacher_evals data. Hint: You should use the here() function from the here package!\n\n# code chunk for importing the data\n\n\nData Inspection + Summary\n3. Provide a brief overview (~4 sentences) of the dataset.\n\n\n\n\n\n\nNote\n\n\n\nIt is always good practice to start an analysis by getting a feel for the data and providing a quick summary for readers. You do not need to show any code for this question, although you probably want to use code to get some information about the data (e.g., summary(data), glimpse(data), dim(data), etc.). Things to think about – where did the data come from? what sort of data are provided (context and data type)? how much data do you have? etc.\n\n\n\n# you may want to use code to answer this question\n\n4. What is the unit of observation (i.e. a single row in the dataset) identified by?\n\n\n\n\n\n\nWarning\n\n\n\nIt is not one instructor per row! It’s also not just one class per row!\n\n\n\n# you may want to use code to answer this question\n\n5. Use one dplyr pipeline to clean the data by:\n\nrenaming the gender variable sex\nremoving all courses with fewer than 10 respondents\nchanging data types in whichever way you see fit (e.g., is the instructor ID really a numeric data type?)\nonly keeping the columns we will use – course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, and sex\n\nAssign your cleaned data to a new variable named teacher_evals_clean –- use these data going forward.\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: rename(), mutate(), as.factor()\nIt would be most efficient to use across() in combination with mutate() to complete this task.\n\n\n\n# code chunk for Q4\n\n5. How many unique instructors and unique courses are present in the cleaned dataset?\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: summarize(), n_distinct()\n\n\n\n# code chunk for Q5\n\n6. One teacher-course combination has some missing values, coded as NA. Which instructor has these missing values? Which course? What variable are the missing values in?\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: filter(), if_any()\n\n\n\n# code chunk for Q6\n\n7. What are the demographics of the instructors in this study? Investigate the variables academic_degree, seniority, and sex and summarize your findings in ~3 complete sentences.\n\n\n\n\n\n\nTip\n\n\n\nYou’ll need to first wrangle your data to have each instructor represented only once.\nHelpful functions: select(), distinct(___, .keep_all = TRUE), count(), summary()\n\n\n\n# code chunk for Q7\n\n8. Each course seems to have used a different subset of the nine evaluation questions. How many teacher-course combinations asked all nine questions?\n\n# code chunk for Q8",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#rate-my-professor",
    "href": "labs/instructions/lab-3-instructions.html#rate-my-professor",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Rate my Professor",
    "text": "Rate my Professor\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: filter(), group_by(), summarize(), slice()\nUseful variables: question_no, teacher_id, SET_score_avg, percent_failed_cur, resp_share, academic_degree, seniority, sex\n\n\n9. Which instructors had the highest and lowest average rating for Question 1 (I learnt a lot during the course.) across all their courses?\n\n# code chunk for Q9\n\n10. Which instructors with one year of experience had the highest and lowest average percentage of students failing in the current semester across all their courses?\n\n# code chunk for Q10\n\n11. Which female instructors with either a doctorate or professor degree had the highest and lowest average percent of students responding to the evaluation across all their courses?\n\n# code chunk for Q11",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#footnotes",
    "href": "labs/instructions/lab-3-instructions.html#footnotes",
    "title": "Lab 3: Student Evaluations of Teaching",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCitation: journal, Under blind review in refereed. University SET data, with faculty and courses characteristics. Ann Arbor, MI: Inter-university Consortium for Political and Social Research [distributor], 2021-09-12. https://doi.org/10.3886/E149801V1↩︎",
    "crumbs": [
      "Labs",
      "Lab 3 Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-5/PA-5-strings.html",
    "href": "group-activities/week-5/PA-5-strings.html",
    "title": "PA 5.1: Scrambled Message",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "group-activities/week-5/PA-5-strings.html#read-in-the-secret-message",
    "href": "group-activities/week-5/PA-5-strings.html#read-in-the-secret-message",
    "title": "PA 5.1: Scrambled Message",
    "section": "Read in the Secret Message",
    "text": "Read in the Secret Message\n\nmessage_data &lt;- read_csv(\"https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/scrambled_message.txt\")"
  },
  {
    "objectID": "group-activities/week-5/PA-5-strings.html#extracting-the-secret-message",
    "href": "group-activities/week-5/PA-5-strings.html#extracting-the-secret-message",
    "title": "PA 5.1: Scrambled Message",
    "section": "Extracting the Secret Message",
    "text": "Extracting the Secret Message\nFor this activity, we will practice using the stringr functions on a character vector. In the code below, we extract the Word column from the message_data, which is then stored as a character vector. With the character vector, you can use indexing (e.g., message[1]) to extract elements.\n\nmessage &lt;- message_data |&gt; \n  pull(Word)\n\nclass(message)\n\n[1] \"character\"\n\n\nIn this activity, a “word” is a set of characters with no white space. That is, even though many of elements of the scrambled mess vector are nonsense, and some have punctuation, you can consider each element to be a “word”."
  },
  {
    "objectID": "group-activities/week-5/PA-5-strings.html#warm-up-exercises",
    "href": "group-activities/week-5/PA-5-strings.html#warm-up-exercises",
    "title": "PA 5.1: Scrambled Message",
    "section": "Warm-up exercises",
    "text": "Warm-up exercises\n\n\nHow many characters are in the scrambled message?\n\n\nHow many words are in the scrambled message?\n\n\nPrint out every word in the scrambled message that starts with the letter “m”.\n\n\n\nPrint out every word in the scrambled message that ends with the letter “z”\n\n\nPrint out the punctuation symbols that are present in the scrambled message.\n\n\nPrint out the longest word in the scrambled message."
  },
  {
    "objectID": "group-activities/week-5/PA-5-strings.html#decode-the-message",
    "href": "group-activities/week-5/PA-5-strings.html#decode-the-message",
    "title": "PA 5.1: Scrambled Message",
    "section": "Decode the Message",
    "text": "Decode the Message\nComplete the following steps to decode the message.\n\nRemove any spaces before or after each word.\n\n\nNo word should be longer than 16 characters. Drop all extra characters off the end of each word.\n\n\nAny time you see the word “ugh”, with any number of h’s, followed by a punctuation mark, delete this.\n\n\nReplace all instances of exactly 2 a’s with exactly 2 e’s.\n\n\n\nReplace all z’s with t’s.\n\n\nEvery word that ends in b, change that to a y.\n\n\nEvery word that starts with k (or K), change that to a v (or V).\n\n\nRecombine all your words into a message.\n\n\nFind the movie this quote is from.\n\n\nCanvas Quiz Submission\nWhat is the name of the movie the quote is from?"
  },
  {
    "objectID": "weeks/week-7-vector-functions.html",
    "href": "weeks/week-7-vector-functions.html",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "",
    "text": "This week’s coursework is broken into two parts. First you will learn how to write functions that work with vectors. Then, in the second half of the week, you will take your knowledge of functions and modify your code to work with data frames.\nBy the end of the week, you should have a grasp of:",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-vector-functions.html#arguments-and-parameters",
    "href": "weeks/week-7-vector-functions.html#arguments-and-parameters",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "2.1 Arguments and Parameters",
    "text": "2.1 Arguments and Parameters\nAn argument is the name for the object you pass into a function.\nA parameter is the name for the object once it is inside the function (or the name of the thing as defined in the function).\n\nExample\nLet’s examine the difference between arguments and parameters by writing a function that takes a puppy’s name and returns \"&lt;name&gt; is a good pup!\".\n\ndog &lt;- \"Eddie\"\n\ngoodpup &lt;- function(name) {\n  paste(name, \"is a good pup!\")\n}\n\ngoodpup(dog)\n\n[1] \"Eddie is a good pup!\"\n\n\nIn this example R function, when we call goodpup(dog), dog is the argument. name is the parameter. What is happening inside the computer’s memory as goodpup() runs?\n\n\n\nA sketch of the execution of the program goodpup, showing that name is only defined within the local environment that is created while goodpup is running. We can never access name in our global environment.\n\n\nThis is why the distinction between arguments and parameters matters. Parameters are only accessible while inside of the function - and in that local environment, we need to call the object by the parameter name, not the name we use outside the function (the argument name).\nWe can even call a function with an argument that isn’t defined outside of the function call: goodpup(\"Tesla\") produces “Tesla is a good pup!”. Here, I do not have a variable storing the string \"Tesla\", but I can make the function run anyways. So \"Tesla\" here is an argument to goodpup but it is not a variable in my environment.\nThis is a confusing set of concepts and it’s ok if you only just sort of get what I’m trying to explain here. Hopefully it will become more clear as you write more code.\n\n\n\n\n\n\nTest it out!\n\n\n\n\n\nFor each of the following blocks of code, identify the function name, function arguments, parameter names, and return statements. When the function is called, see if you can predict what the output will be.\n\nFunctionAnswer\n\n\n\nmy_mean &lt;- function(x) {\n  censor_x &lt;- sample(x, size = length(x) - 2, replace = F)\n  mean(censor_x)\n}\n\n\nmy_mean(1:10)\n\n\n\n\nFunction name: my_mean\nFunction parameters: x\nFunction arguments: 1:10\nFunction output: an average value for the censor_x numerical vector (varies each time the function is run unless you set the seed)\n\n\nmy_mean(1:10)\n\n[1] 5.375\n\n\n\n\n\n\n\n\n\n\n✅ Check-in 7.1: Writing Vector Functions\nQuestion 1 – In the second variant of rescale01(), infinite values are left unchanged. Fill in the code below to rewrite rescale01() so -Inf is mapped to 0, and Inf is mapped to 1.\n\nrescale01 &lt;- function(x) {\n  rng &lt;- range(x, na.rm = TRUE, finite = TRUE)\n  \n  rescale_out &lt;- case_when(\n    is.numeric(x) _____ ~ (x - rng[1] ) / (rng[2] - rng[1]),\n    x _____ ~ 0,\n    x _____ ~ 1)\n  \n  return(rescale_out)\n\n}\n\nQuestion 2 – Fill in the code below to write a function that accepts a vector of birthdates, and outputs the age in years\n\nget_age &lt;- function(x) {\n  \n  birthdates &lt;- mdy(x)\n  \n  time_passed &lt;- _____(\n    today() - birthdates\n    ) |&gt; \n    day()\n  \n  # Getting the age people are, not what age they will turn soon!\n  ages &lt;- _____(time_passed / 365)\n  \n  return(ages)\n}\n\nQuestion 3 – Fill in the code below to write both_na(), a summary function that takes two vectors of the same length and returns the number of positions that have an NA in both vectors.\n\nboth_na &lt;- function(x, y) {\n  \n  na_matches &lt;- which(is.na(x)) %in% which(is.na(y))\n  \n  return(\n    # Find the number (sum) of the positions with matches\n    sum(\n      ## Convert logical values to 0s and 1s\n      _____(na_matches)\n      )\n    )\n}\n\n\n\n\n\n\n\nQuestions 4 through 11 are sprinkled throughout the rest of the coursework!",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-vector-functions.html#named-arguments-and-parameter-order",
    "href": "weeks/week-7-vector-functions.html#named-arguments-and-parameter-order",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "2.2 Named Arguments and Parameter Order",
    "text": "2.2 Named Arguments and Parameter Order\nIn the examples above, you didn’t have to worry about what order parameters were passed into the function, because there were 0 and 1 parameters, respectively. But what happens when we have a function with multiple parameters?\n\ndivide &lt;- function(x, y) {\n  x / y\n}\n\nIn this function, the order of the parameters matters! divide(3, 6) does not produce the same result as divide(6, 3). As you might imagine, this can quickly get confusing as the number of parameters in the function increases.\nIn this case, it can be simpler to use the parameter names when you pass in arguments.\n\ndivide(3, 6)\n\n[1] 0.5\n\ndivide(x = 3, y = 6)\n\n[1] 0.5\n\ndivide(y = 6, x = 3)\n\n[1] 0.5\n\ndivide(6, 3)\n\n[1] 2\n\ndivide(x = 6, y = 3)\n\n[1] 2\n\ndivide(y = 3, x = 6)\n\n[1] 2\n\n\nAs you can see, the order of the arguments doesn’t much matter, as long as you use named arguments, but if you don’t name your arguments, the order very much matters.",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-vector-functions.html#input-validation",
    "href": "weeks/week-7-vector-functions.html#input-validation",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "2.3 Input Validation",
    "text": "2.3 Input Validation\nWhen you write a function, you often assume that your parameters will be of a certain type. But you can’t guarantee that the person using your function knows that they need a certain type of input. In these cases, it’s best to validate your function input.\nIn R, you can use stopifnot() to check for certain essential conditions. If you want to provide a more illuminating error message, you can check your conditions using if() or if(){ } else{ } and then use stop(\"better error message\") in the body of the if or else statement.\n\nstopifnot()if(){ } else { }if(){stop()}\n\n\n\nadd &lt;- function(x, y) {\n  x + y\n}\n\nadd(\"tmp\", 3)\n\nError in x + y: non-numeric argument to binary operator\n\nadd &lt;- function(x, y) {\n  stopifnot(is.numeric(x), \n            is.numeric(y)\n            )\n  x + y\n}\n\nadd(\"tmp\", 3)\n\nError in add(\"tmp\", 3): is.numeric(x) is not TRUE\n\nadd(3, 4)\n\n[1] 7\n\n\n\n\n\nadd &lt;- function(x, y) {\n  if(is.numeric(x) & is.numeric(y)) {\n    x + y\n  } else {\n    stop(\"Argument input for x or y is not numeric\")\n  }\n}\n\nadd(\"tmp\", 3)\n\nError in add(\"tmp\", 3): Argument input for x or y is not numeric\n\nadd(3, 4)\n\n[1] 7\n\n\n\n\n\nadd &lt;- function(x, y) {\n  if(!is.numeric(x) | !is.numeric(y)) {\n    stop(\"Argument input for x or y is not numeric\")\n  }\n    x + y\n}\n\nadd(\"tmp\", 3)\n\nError in add(\"tmp\", 3): Argument input for x or y is not numeric\n\nadd(3, 4)\n\n[1] 7\n\n\n\n\n\nInput validation is one aspect of defensive programming - programming in such a way that you try to ensure that your programs don’t error out due to unexpected bugs by anticipating ways your programs might be misunderstood or misused. If you’re interested, Wikipedia has more about defensive programming.\n\n\n✅ Check-in 7.1: Writing Vector Functions\n\n\n\n\n\n\nQuestions 4 through 6\n\n\n\n\n\n\n\nadd_or_subtract &lt;- function(first_num, \n                            second_num = 2, \n                            type = \"add\") {\n  \n  if (type == \"add\") {\n    first_num + second_num\n  } else if (type == \"subtract\") {\n    first_num - second_num\n  } else {\n    stop(\"Please choose `add` or `subtract` as the type.\")\n  }\n  \n}\n\n\n\nFor the three calls to the add_or_subtract() function, which of the following will be output?\n\n1\n-1\nAn error defined by the function add_or_subtract()\nAn error defined in a different function, which is called inside the add_or_subtract() function\n\n\n\n\n\nadd_or_subtract(5, 6, \n                type = \"subtract\")\n\nadd_or_subtract(\"orange\")\n\nadd_or_subtract(5, \n                6, \n                type = \"multiply\")",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-vector-functions.html#scope",
    "href": "weeks/week-7-vector-functions.html#scope",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "2.4 Scope",
    "text": "2.4 Scope\nWhen talking about functions, for the first time we start to confront a critical concept in programming, which is scope. Scope is the part of the program where the name you’ve given a variable is valid - that is, where you can use a variable.\n\n\n\n\nA variable is only available from inside the region it is created.\n\nWhat do I mean by the part of a program? The lexical scope is the portion of the code (the set of lines of code) where the name is valid.\nThe concept of scope is best demonstrated through a series of examples, so in the rest of this section, I’ll show you some examples of how scope works and the concepts that help you figure out what “scope” actually means in practice.\n\nName Masking\nScope is most clearly demonstrated when we use the same variable name inside and outside a function. Note that this is 1) bad programming practice, and 2) fairly easily avoided if you can make your names even slightly more creative than a, b, and so on. But, for the purposes of demonstration, I hope you’ll forgive my lack of creativity in this area so that you can see how name masking works.\n\nWhat does this function return, 10 or 20?\n\nPseudocodeSketchR Function\n\n\na &lt;- 10\n\nmyfun &lt;- function() {\n  a &lt;- 20\n  a\n}\n\nmyfun()\n\n\n\n\n\nA sketch of the global environment as well as the environment within myfun(). Because a = 20 inside myfun(), when we call myfun(), we get the value of a within that environment, instead of within the global environment.\n\n\n\n\n\na &lt;- 10\n\nmyfun &lt;- function() {\n  a &lt;- 20\n  a\n}\n\nmyfun()\n\n[1] 20\n\na\n\n[1] 10\n\n\n\n\n\n\nThe lexical scope of the function is the area that is between the braces. Outside the function, a has the value of 10, but inside the function, a has the value of 20. So when we call myfun(), we get 20, because the scope of myfun is the local context where a is evaluated, and the value of a in that environment dominates.\nThis is an example of name masking, where names defined inside of a function mask names defined outside of a function.\n\n\nEnvironments and Scope\nAnother principle of scoping is that if you call a function and then call the same function again, the function’s environment is re-created each time. Each function call is unrelated to the next function call when the function is defined using local variables.\n\nPseudocodeSketchR Function\n\n\nmyfun &lt;- function() {\n  if aa is not defined\n    aa &lt;- 1\n  else\n    aa &lt;- aa + 1\n}\n\nmyfun()\nmyfun()\n\nWhat does this output?\n\n\n{fig-alt=” The image explains how repeated calls to the myfun() function in R yield the same output because the function does not create or store an object in the global environment. The function myfun() uses an if-else statement: if the variable aa does not exist, it assigns aa the value 1; otherwise, it increments aa by 1. Each time myfun() is called, a new, independent copy of the function’s environment is created. The image depicts two separate calls to myfun(), both initializing aa to 1 because aa is not stored in either the function enviroment (where the function looks first) or in the global environment (where the function looks next) and therefore does not persist between calls. As a result, aa is always reset to 1 during each function invocation, with no accumulation occurring across different calls. The image emphasizes that the local environment created by the function is temporary and does not affect the global environment.”}\n\n\n\nmyfun &lt;- function() {\n  if (!exists(\"aa\")) {\n    aa &lt;- 1\n  } else {\n    aa &lt;- aa + 1\n  }\n  return(aa)\n}\n\nmyfun()\n\n[1] 1\n\nmyfun()\n\n[1] 1\n\n\n\n\n\n\n\nDynamic Lookup\nScoping determines where to look for values – when, however, is determined by the sequence of steps in the code. When a function is called, the calling environment (the global environment or set of environments at the time the function is called) determines what values are used.\nIf an object doesn’t exist in the function’s environment, the global environment will be searched next; if there is no object in the global environment, the program will error out. This behavior, combined with changes in the calling environment over time, can mean that the output of a function can change based on objects outside of the function.\n\nPseudocodeSketchR\n\n\nmyfun &lt;- function(){\n  x + 1\n}\n\nx &lt;- 14\n\nmyfun()\n\nx &lt;- 20\n\nmyfun()\n\nWhat will the output be of this code?\n\n\n\n\n\nThe state of the global environment at the time the function is called (that is, the state of the calling environment) can change the results of the function\n\n\n\n\n\nmyfun &lt;- function() {\n  x + 1\n}\n\nx &lt;- 14\n\nmyfun()\n\n[1] 15\n\nx &lt;- 20\n\nmyfun()\n\n[1] 21\n\n\n\n\n\n\n\n\n\n\n\nTest it out!\n\n\n\n\n\nWhat does the following function return? Make a prediction, then run the code yourself. (Taken from (Wickham 2015, chap. 6))\n\nCodeSolution\n\n\n\nf &lt;- function(x) {\n  f &lt;- function(x) {\n    f &lt;- function() {\n      x ^ 2\n    }\n    f() + 1\n  }\n  f(x) * 2\n}\nf(10)\n\n\n\n\nf &lt;- function(x) {\n  f &lt;- function(x) {\n    f &lt;- function() {\n      x ^ 2\n    }\n    f() + 1\n  }\n  f(x) * 2\n}\nf(10)\n\n[1] 202\n\n\n\n\n\n\n\n\n\n\n✅ Check-in 7.1: Writing Vector Functions\n\n\n\n\n\n\nQuestions 7 through 10\n\n\n\n\n\n\n\n\nConsider the following code:\n\nfirst_num &lt;- 5\nsecond_num &lt;- 3\n\nresult &lt;- 8\n\nresult &lt;- add_or_subtract(first_num, \n                          second_num = 4)\n\nresult_2 &lt;- add_or_subtract(first_num)\n\n\n\n\nIn your Global Environment, what is the value of…\n\nfirst_num\nsecond_num\nresult\nresult_2",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "weeks/week-7-vector-functions.html#debugging",
    "href": "weeks/week-7-vector-functions.html#debugging",
    "title": "Writing Simple (Vector) Functions in R",
    "section": "2.5 Debugging",
    "text": "2.5 Debugging\nNow that you’re writing functions, it’s time to talk a bit about debugging techniques. This is a lifelong topic - as you become a more advanced programmer, you will need to develop more advanced debugging skills as well (because you’ll become more adept at screwing things up).\n\n\n\nThe faces of debugging (by Allison Horst)\n\n\nLet’s start with the basics: print debugging.\n\nPrint Debugging\nThis technique is basically exactly what it sounds like. You insert a ton of print statements to give you an idea of what is happening at each step of the function.\nLet’s try it out on the previous example (see what I did there?)\nNote that I’ve modified the code slightly so that we store the value into returnval and then return it later - this allows us to see the code execution without calling functions twice (which would make the print output a bit more confusing).\n\nf &lt;- function(x) {\n  print (\"Entering Outer Function\")\n  print (paste(\"x =\", x))\n  f &lt;- function(x) {\n    print (\"Entering Middle Function\")\n    print (paste(\"x = \", x))\n    f &lt;- function() {\n      print (\"Entering Inner Function\")\n      print (paste(\"x = \", x))\n      print (paste(\"Inner Function: Returning\", x^2))\n      x ^ 2\n    }\n    returnval &lt;- f() + 1\n    print (paste(\"Middle Function: Returning\", returnval))\n    returnval\n  }\n  returnval &lt;- f(x) * 2\n  print (paste(\"Outer Function: Returning\", returnval))\n  returnval\n}\nf(10)\n\n[1] \"Entering Outer Function\"\n[1] \"x = 10\"\n[1] \"Entering Middle Function\"\n[1] \"x =  10\"\n[1] \"Entering Inner Function\"\n[1] \"x =  10\"\n[1] \"Inner Function: Returning 100\"\n[1] \"Middle Function: Returning 101\"\n[1] \"Outer Function: Returning 202\"\n\n\n[1] 202\n\n\n\n\nGeneral Debugging Strategies\n\nDebugging: Being the detective in a crime movie where you are also the murderer. - some t-shirt I saw once\n\nThe overall process is well described in Advanced R by H. Wickham; I’ve copied it here because it’s such a succinct distillation of the process, but I’ve adapted some of the explanations to this class rather than the original context of package development.\n\nRealize that you have a bug\nGoogle! In R you can automate this with the errorist and searcher packages, but general Googling the error + the programming language + any packages you think are causing the issue is a good strategy.\nMake the error repeatable: This makes it easier to figure out what the error is, faster to iterate, and easier to ask for help.\n\nUse binary search (remove 1/2 of the code, see if the error occurs, if not go to the other 1/2 of the code. Repeat until you’ve isolated the error.)\nGenerate the error faster - use a minimal test dataset, if possible, so that you can ask for help easily and run code faster. This is worth the investment if you’ve been debugging the same error for a while.\nNote which inputs don’t generate the bug – this negative “data” is helpful when asking for help.\n\nFigure out where it is. Debuggers may help with this, but you can also use the scientific method to explore the code, or the tried-and-true method of using lots of print() statements.\nFix it and test it. The goal with tests is to ensure that the same error doesn’t pop back up in a future version of your code. Generate an example that will test for the error, and add it to your documentation.\n\nThere are several other general strategies for debugging:\n\nRetype (from scratch) your code\n\nThis works well if it’s a short function or a couple of lines of code, but it’s less useful if you have a big script full of code to debug. However, it does sometimes fix really silly typos that are hard to spot, like having typed &lt;-- instead of &lt;- in R and then wondering why your answers are negative.\n\nVisualize your data as it moves through the program.\n\nThis may be done using print() statements, or the debugger, or some other strategy depending on your application.\n\nTracing statements.\n\nAgain, this is part of print() debugging, but these messages indicate progress - “got into function x”, “returning from function y”, and so on.\n\nRubber ducking.\n\nHave you ever tried to explain a problem you’re having to someone else, only to have a moment of insight and “oh, never mind”? Hopefully so, because this is exactly how your pair programming sessions should be going! Rubber ducking outsources the problem to a nonjudgmental entity, such as a rubber duck. You simply explain, in terms simple enough for your rubber duck to understand, exactly what your code does, line by line, until you’ve found the problem. A more thorough explanation can be found at gitduck.com.\n\n\n\n\n\nYou may find it helpful to procure a rubber duck expert for each language you work in. I use color-your-own rubber ducks to endow my ducks with certain language expertise. Other people use plain rubber ducks and give them capes.\n\n\nDo not be surprised if, in the process of debugging, you encounter new bugs. This is a problem that’s well-known it has an xkcd comic. At some point, getting up and going for a walk may help. Redesigning your code to be more modular and more organized is also a good idea.\n\n\n\n\n\n\nMaking Minimal Reproducible Examples\n\n\n\n\n\nThese section is included as FYI, but you don’t have to read it just now. It;s important, but not urgent, if that makes sense.\nIf all else has failed, and you can’t figure out what is causing your error, it’s probably time to ask for help. If you have a friend or buddy that knows the language you’re working in, by all means ask for help sooner - use them as a rubber duck if you have to. But when you ask for help online, often you’re asking people who are much more knowledgeable about the topic - members of R core browse StackOverflow and may drop in and help you out. Under those circumstances, it’s better to make the task of helping you as easy as possible because it shows respect for their time. The same thing goes for your supervisors and professors. 🙃\n\n\n\nThe reprex R package will help you make a reproducible example (drawing by Allison Horst)\n\n\nSo, with that said, there are numerous resources for writing what’s called a “minimal working example”, “reproducible example” (commonly abbreviated reprex), or MCVE (minimal complete verifiable example). Much of this is lifted directly from the StackOverflow post describing a minimal reproducible example.\nThe goal is to reproduce the error message with information that is\n\nminimal - as little code as possible to still reproduce the problem\ncomplete - everything necessary to reproduce the issue is contained in the description/question\nreproducible - test the code you provide to reproduce the problem.\n\nYou should format your question to make it as easy as possible to help you. Make it so that code can be copied from your post directly and pasted into an R script or notebook (e.g. Quarto document code chunk). Describe what you see and what you’d hope to see if the code were working.\nOther resources:\n\nreprex package: Do’s and Don’ts\nHow to use the reprex package - Vignette with videos from the Jenny Bryan\nreprex magic - Vignette adapted from a blog post by Nick Tierney",
    "crumbs": [
      "Weekly materials",
      "Week 7, Part 1 -- Vector Functions"
    ]
  },
  {
    "objectID": "slides/week-2/week-2-import.html#thursday-october-1",
    "href": "slides/week-2/week-2-import.html#thursday-october-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Thursday, October 1",
    "text": "Thursday, October 1\nToday we will…\n\n\nDebrief PA 1\nDebrief Lab 1\n\nContent Related to Lab 2\n\nNew Material\n\nTidy Data\nLoad External Data\nGraphical Perception\nColors in ggplot\n\nLab 2: Exploring Rodents with ggplot2\n\nUsing External Resources"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#multiple-categorical-variables",
    "href": "slides/week-2/week-2-import.html#multiple-categorical-variables",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Multiple Categorical Variables",
    "text": "Multiple Categorical Variables\n\nColors & ShapesColors & Facets\n\n\n\n\n\nCode\nggplot(data = penguins) +\n    geom_point(mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = island )) + \n    labs(title = \"Relashonship Between Bill Length and Bill Depth\", x = \"Bill Length (mm)\" , y = \"Bill Depth (mm)\",)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = penguins,\n       mapping = aes(x = bill_length_mm, \n                     y = bill_depth_mm, \n                     color = species)) +\n  geom_point() + \n  facet_wrap(~island) +\n  labs(x = \"Bill Length\",\n       y = \"\", \n       title = \"Changes in Bill Depth versus Length\")"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#somethings-i-also-noticed",
    "href": "slides/week-2/week-2-import.html#somethings-i-also-noticed",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Somethings I also noticed…",
    "text": "Somethings I also noticed…\n\n\nCode chunk options need to have a space before the option (#| label: not #|label:).\nMake sure your code is visible (echo: true)!\nMake sure you remove the messages and warnings from your final document!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#did-you-notice-that-your-figures-were-not-included-in-the-html-your-group-submitted-to-canvas",
    "href": "slides/week-2/week-2-import.html#did-you-notice-that-your-figures-were-not-included-in-the-html-your-group-submitted-to-canvas",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Did you notice that your figures were not included in the HTML your group submitted to Canvas?",
    "text": "Did you notice that your figures were not included in the HTML your group submitted to Canvas?\n\n\nBy default, Quarto does not embed plots in the HTML document. Instead, it creates a “PA-2-files” folder which stores all your plots.\n\n\n\n\nSo, when you submit your HTML file, your plots are not included! How do we fix this????\n\n\n\n\nAdd an embed-resources: true line to your YAML (at the beginning of your document)!\n---\ntitle: \"PA 2: Using Data Visualization to Find the Penguins\"\nauthor: \"Dr. T!\"\nformat: html\neditor: source\nembed-resources: true\n---"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#grading-feedback",
    "href": "slides/week-2/week-2-import.html#grading-feedback",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Grading / Feedback",
    "text": "Grading / Feedback\n\n\nEach question will earn a score of “Success” or “Growing”.\n\nQuestions marked “Growing” will receive feedback on how to improve your solution.\nThese questions can be resubmitted for additional feedback.\n\n\n\n\n\n\nEarning a “Success” doesn’t necessarily mean your solution is without error.\n\nYou may still receive feedback on how to improve your solution.\nThese questions cannot be resubmitted for additional feedback."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#growing-points",
    "href": "slides/week-2/week-2-import.html#growing-points",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Growing Points",
    "text": "Growing Points\n\n\nQ2: All your code should be visible!\nQ9: Captions should include more information than what is already present in the plot!\nQ11: There’s no need to save intermediate objects if they are never used later!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#how-this-translates-into-lab-2",
    "href": "slides/week-2/week-2-import.html#how-this-translates-into-lab-2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "How this translates into Lab 2…",
    "text": "How this translates into Lab 2…\n\n\nEvery lab and challenge is expected to use code-folding.\nThere should be no messages / warnings output in your final rendered HTML.\nYou should reduce the amount of “intermediate object junk” in your workspace.\n\nAsk yourself, do I need to use this later?\nIf the answer is no, then you should not save that object."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#tidy-data-1",
    "href": "slides/week-2/week-2-import.html#tidy-data-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#same-data-different-formats",
    "href": "slides/week-2/week-2-import.html#same-data-different-formats",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Same Data, Different Formats",
    "text": "Same Data, Different Formats\nDifferent formats of the data are tidy in different ways.\n\nOption 1Option 2\n\n\n\n\n\n\n\nTeam\nPoints\nAssists\nRebounds\n\n\n\n\nA\n88\n12\n22\n\n\nB\n91\n17\n28\n\n\nC\n99\n24\n30\n\n\nD\n94\n28\n31\n\n\n\n\n\n\n\n\n\n\n\n\nTeam\nStatistic\nValue\n\n\n\n\nA\nPoints\n88\n\n\nA\nAssists\n12\n\n\nA\nRebounds\n22\n\n\nB\nPoints\n91\n\n\nB\nAssists\n17\n\n\nB\nRebounds\n28\n\n\nC\nPoints\n99\n\n\nC\nAssists\n24\n\n\nC\nRebounds\n30\n\n\nD\nPoints\n94\n\n\nD\nAssists\n28\n\n\nD\nRebounds\n31"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#connection-to-ggplot",
    "href": "slides/week-2/week-2-import.html#connection-to-ggplot",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Connection to ggplot",
    "text": "Connection to ggplot\nLet’s make a plot of each team’s statistics!\n\nOption 1 - Wide DataOption 2 - Long Data\n\n\n\n\n\nCode\nggplot(data = bb_wide, \n       mapping = aes(x = Team)\n       ) +\n  geom_point(mapping = aes(y = Points, \n                           color = \"Points\"), \n             size = 4) +\n  geom_point(mapping = aes(y = Assists, \n                           color = \"Assists\"), \n             size = 4) +\n  geom_point(mapping = aes(y = Rebounds, \n                           color = \"Rebounds\"), \n             size = 4) + \n  scale_colour_manual(\n    values = c(\"darkred\", \"steelblue\", \"forestgreen\")\n  ) +\n  labs(color = \"Statistic\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = bb_long, \n       mapping = aes(x = Team, \n                     y = Value, \n                     color = Statistic)\n       ) +\n  geom_point(size = 4) + \n  scale_colour_manual(\n    values = c(\"darkred\", \"steelblue\", \"forestgreen\")\n  ) +\n  labs(color = \"Statistic\")"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#tidy-data-2",
    "href": "slides/week-2/week-2-import.html#tidy-data-2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#common-types-of-data-files",
    "href": "slides/week-2/week-2-import.html#common-types-of-data-files",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Common Types of Data Files",
    "text": "Common Types of Data Files\nLook at the file extension for the type of data file.\n\n\n\n.csv : “comma-separated values”\n\nName, Age\nBob, 49\nJoe, 40\n\n\n\n.xls, .xlsx: Microsoft Excel spreadsheet\n\nCommon approach: save as .csv\nNicer approach: use the readxl package\n\n\n\n.txt: plain text\n\nCould have any sort of delimiter…\nNeed to let R know what to look for!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#common-types-of-data-files-1",
    "href": "slides/week-2/week-2-import.html#common-types-of-data-files-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Common Types of Data Files",
    "text": "Common Types of Data Files\n\nFile AFile BFile CSources\n\n\n\n\n\n\n\n\n\n\n\n\nFile A\nFile B\nFile C"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#loading-external-data",
    "href": "slides/week-2/week-2-import.html#loading-external-data",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Loading External Data",
    "text": "Loading External Data\nUsing base R functions:\n\nread.csv() is for reading in .csv files.\nread.table() and read.delim() are for any data with “columns” (you specify the separator)."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#loading-external-data-1",
    "href": "slides/week-2/week-2-import.html#loading-external-data-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Loading External Data",
    "text": "Loading External Data\nThe tidyverse has some cleaned-up versions in the readr and readxl packages:\n\n\nread_csv() is for comma-separated data.\nread_tsv() is for tab-separated data.\nread_table() is for white-space-separated data.\nread_delim() is any data with “columns” (you specify the separator). The above are special cases.\nread_xls() and read_xlsx() are specifically for dealing with Excel files.\n\n\nRemember to load the readr and readxl packages first!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#whats-the-difference",
    "href": "slides/week-2/week-2-import.html#whats-the-difference",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "What’s the difference?",
    "text": "What’s the difference?"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#pre-attentive-features-1",
    "href": "slides/week-2/week-2-import.html#pre-attentive-features-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Pre-attentive Features",
    "text": "Pre-attentive Features\n\nThe next slide will have one point that is not like the others.\n\nRaise your hand when you notice it."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#pre-attentive-features-2",
    "href": "slides/week-2/week-2-import.html#pre-attentive-features-2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Pre-attentive Features",
    "text": "Pre-attentive Features"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#pre-attentive-features-3",
    "href": "slides/week-2/week-2-import.html#pre-attentive-features-3",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Pre-attentive Features",
    "text": "Pre-attentive Features"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#pre-attentive-features-4",
    "href": "slides/week-2/week-2-import.html#pre-attentive-features-4",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Pre-attentive Features",
    "text": "Pre-attentive Features\n\nfeatures that we see and perceive before we even think about it\n\n\nThey will jump out at us in less than 250 ms.\nE.g., color, form, movement, spatial location.\n\n\nThere is a hierarchy of features:\n\nColor is stronger than shape.\nCombinations of pre-attentive features may not be pre-attentive due to interference."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#gestalt-principles",
    "href": "slides/week-2/week-2-import.html#gestalt-principles",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Gestalt Principles",
    "text": "Gestalt Principles\n\n\n\nGestalt Hierarchy\nGraphical Feature\n\n\n\n\n1. Enclosure\nFacets\n\n\n2. Connection\nLines\n\n\n3. Proximity\nWhite Space\n\n\n4. Similarity\nColor/Shape\n\n\n\n\n\n\nImplications for practice:\n\nKnow that we perceive some groups before others.\nDesign to facilitate and emphasize the most important comparisons."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#double-encoding",
    "href": "slides/week-2/week-2-import.html#double-encoding",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Double Encoding",
    "text": "Double Encoding"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#no-double-encoding",
    "href": "slides/week-2/week-2-import.html#no-double-encoding",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "No Double Encoding",
    "text": "No Double Encoding"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-1",
    "href": "slides/week-2/week-2-import.html#color-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color",
    "text": "Color\n\nColor, hue, and intensity are pre-attentive features, and bigger contrasts lead to faster detection.\n\nHue: main color family (red, orange, yellow…)\nIntensity: amount of color"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines",
    "href": "slides/week-2/week-2-import.html#color-guidelines",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\n\nDo not use rainbow color gradients!\nBe conscious of what certain colors “mean”.\n\nGood idea to use red for “good” and green for “bad”?"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines-1",
    "href": "slides/week-2/week-2-import.html#color-guidelines-1",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\nFor categorical data, try not to use more than 7 colors:\n\n\n\n\n\n\n\n\n\n\nIf you need to, you can use colorRampPalette() from the RColorBrewer package to produce larger palettes:"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines-2",
    "href": "slides/week-2/week-2-import.html#color-guidelines-2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\n\nFor quantitative data, use mappings from data to color that are numerically and perceptually uniform.\n\nRelative discriminability of two colors should be proportional to the difference between the corresponding data values."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines-3",
    "href": "slides/week-2/week-2-import.html#color-guidelines-3",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\nTo make your graphic color deficiency friendly…\n\nuse double encoding - when you use color, also use another aesthetic (line type, shape, facet, etc.)."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines-4",
    "href": "slides/week-2/week-2-import.html#color-guidelines-4",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\nTo make your graphic color deficiency friendly…\n\nwith a unidirectional scale (e.g., all + values), use a monochromatic color gradient.\n\n\n\n\n\n\n\n\n\n\n\nwith a bidirectional scale (e.g., + and - values), use a purple-white-orange color gradient. Transition through white!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-guidelines-5",
    "href": "slides/week-2/week-2-import.html#color-guidelines-5",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color Guidelines",
    "text": "Color Guidelines\nTo make your graphic color deficiency friendly…\n\nprint your chart out in black and white – if you can still read it, it will be safe for all users."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#color-in-ggplot2",
    "href": "slides/week-2/week-2-import.html#color-in-ggplot2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Color in ggplot2",
    "text": "Color in ggplot2\nThere are several packages with color scheme options:\n\nRcolorbrewer\nggsci\nviridis\nwesanderson\n\nThese packages have color palettes that are aesthetically pleasing and, in many cases, color deficiency friendly.\nYou can also take a look at other ways to find nice color palettes."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#peer-code-review",
    "href": "slides/week-2/week-2-import.html#peer-code-review",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Peer Code Review",
    "text": "Peer Code Review\nStarting with Lab 2, your labs will have an appearance / code format portion.\n\nReview the code formatting guidelines before you submit your lab!\nEach week, you will be assigned one of your peer’s labs to review their code formatting."
  },
  {
    "objectID": "slides/week-2/week-2-import.html#on-the-use-of-external-resources",
    "href": "slides/week-2/week-2-import.html#on-the-use-of-external-resources",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "On the Use of External Resources…",
    "text": "On the Use of External Resources…\n\nPart of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet.\nIn this class the assumed knowledge is the course materials, including the course textbook, coursework pages, and course slides. Any functions / code used outside of these materials require direct references.\n\n\n\n\nIf you used Google:\n\npaste the link to the resource in a code comment next to where you used that resource\n\nIf you used ChatGPT:\n\nindicate somewhere in the problem that you used ChatGPT\npaste the link to your chat (using the Share button from ChatGPT)"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#things-you-should-know-about-chatgpt",
    "href": "slides/week-2/week-2-import.html#things-you-should-know-about-chatgpt",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Things You Should Know About ChatGPT…",
    "text": "Things You Should Know About ChatGPT…\n\n\n\nGPT uses machine learning to predict what words to give you\n\nThis method is entirely probabilistic, meaning, the same question may produce different answers for different people.\n\n\n\n\n\n\n\nThe answers GPT gives rely a lot on the context you provide (or don’t provide)\n\nIt is good to give lots of background information (e.g., what R package you are using)\n\n\n\n\n\n\n\nChatGPT is a pretty decent tutor.\n\nDid you use GPT to help you with some code?\nDo you not understand what the code is doing?\nAsk GPT to explain code to you!"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#to-do",
    "href": "slides/week-2/week-2-import.html#to-do",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "To do…",
    "text": "To do…\n\nLab 2: Exploring rodents with ggplot2\n\ndue Sunday, January 19 at 11:59pm\n\nLab 2: Spicing things up with ggplot2\n\ndue Sunday, January 19 at 11:59pm\n\nComplete Week 3 Coursework: Data Wrangling with dplyr\n\nCheck-ins 3.1 and 3.2 due Thursday, January 23 at 12pm"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#wednesday-may-15",
    "href": "slides/week-7/week-7-data-frame-functions.html#wednesday-may-15",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Wednesday, May 15",
    "text": "Wednesday, May 15\nToday we will…\n\nDiscuss Groupt Project + Group Contract\nNew Material\n\nCalling Functions on Datasets\nThinking About Missing Data\n\nLab 7: Functions and Fish"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#group-project-details",
    "href": "slides/week-7/week-7-data-frame-functions.html#group-project-details",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Group Project Details",
    "text": "Group Project Details\nCheck out the Canvas page outlining the group project!\n\n\nGroups have been assigned.\nYour group contract is due on Monday!"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#last-time",
    "href": "slides/week-7/week-7-data-frame-functions.html#last-time",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Last Time…",
    "text": "Last Time…\nWe wrote a function called find_car_make() that takes in the name of a car and returns the “make” of the car (the company that created it).\n\nfind_car_make(\"Toyota Camry\") returns “Toyota”.\nfind_car_make(\"Ford Anglica\") returns “Ford”.\n\n\nfind_car_make &lt;- function(car_name){\n  make &lt;- str_extract(string = car_name, \n                      pattern = \"[:alpha:]*\")\n  return(make)\n}"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#pair-our-function-with-dplyr",
    "href": "slides/week-7/week-7-data-frame-functions.html#pair-our-function-with-dplyr",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Pair Our Function with dplyr",
    "text": "Pair Our Function with dplyr\nConsider the mtcars data.\n\ndata(mtcars)\nhead(mtcars, n = 3)\n\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n\n\nLet’s use our new function:\n\nmtcars |&gt; \n  rownames_to_column(\"make_model\") |&gt; \n  mutate(make = find_car_make(make_model),\n         .after = make_model) |&gt; \n  head(n = 3)\n\n     make_model   make  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1     Mazda RX4  Mazda 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 Mazda RX4 Wag  Mazda 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3    Datsun 710 Datsun 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#recall-the-penguins-data",
    "href": "slides/week-7/week-7-data-frame-functions.html#recall-the-penguins-data",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Recall the penguins Data",
    "text": "Recall the penguins Data\n\nlibrary(palmerpenguins)\ndata(penguins)\npenguins |&gt; \n  head()\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#function-to-standardize-data",
    "href": "slides/week-7/week-7-data-frame-functions.html#function-to-standardize-data",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Function to Standardize Data",
    "text": "Function to Standardize Data\nWe want to take in a vector of numbers and standardize it – make all values be between 0 and 1.\n\n\nstd_to_01 &lt;- function(var) {\n  stopifnot(is.numeric(var))\n  \n  num &lt;- var - min(var, na.rm = TRUE)\n  denom &lt;- max(var, na.rm = TRUE) - min(var, na.rm = TRUE)\n  \n  return(num / denom)\n}"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#standardizing-variables",
    "href": "slides/week-7/week-7-data-frame-functions.html#standardizing-variables",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Standardizing Variables",
    "text": "Standardizing Variables\nIs it a good idea to standardize (scale) variables in a data analysis?\n\n\nWhy standardize?\n\nEasier to compare across variables.\nEasier to model – standardizes the amount of variability.\n\n\nWhy not standardize?\n\nMore difficult to interpret the values.\n\n\n\nE.g., a penguin with a bill length of 35 mm (std to 0.11) and a mass of 5500 g (std to 0.78)."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#pair-our-function-with-dplyr-1",
    "href": "slides/week-7/week-7-data-frame-functions.html#pair-our-function-with-dplyr-1",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Pair Our Function with dplyr",
    "text": "Pair Our Function with dplyr\nLet’s standardize penguin measurements.\n\npenguins |&gt; \n  mutate(bill_length_mm    = std_to_01(bill_length_mm), \n         bill_depth_mm     = std_to_01(bill_depth_mm), \n         flipper_length_mm = std_to_01(flipper_length_mm), \n         body_mass_g       = std_to_01(body_mass_g))\n\n\nUgh. Still copy-pasting!\n\n\nRecall across()!\n\npenguins |&gt; \n  mutate(across(.cols = bill_length_mm:body_mass_g,\n                .fns = ~ std_to_01(.x))) |&gt; \n  slice_head(n = 4)\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen          0.255         0.667             0.153       0.292\n2 Adelie  Torgersen          0.269         0.512             0.237       0.306\n3 Adelie  Torgersen          0.298         0.583             0.390       0.153\n4 Adelie  Torgersen         NA            NA                NA          NA    \n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#use-variables-as-function-arguments",
    "href": "slides/week-7/week-7-data-frame-functions.html#use-variables-as-function-arguments",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Use variables as function arguments?",
    "text": "Use variables as function arguments?\n\nstd_column_01 &lt;- function(data, variable) {\n  stopifnot(is.data.frame(data))\n  \n  data &lt;- data |&gt; \n    mutate(variable = std_to_01(variable))\n  return(data)\n}\n\n\n\n\n\n\n\nNote\n\n\nI used the existing function std_to_01() inside the new function for clarity!\n\n\n\n\nBut it didn’t work…\n\nstd_column_01(penguins, body_mass_g)\n\nError in `mutate()`:\nℹ In argument: `variable = std_to_01(variable)`.\nCaused by error:\n! object 'body_mass_g' not found"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#tidy-evaluation",
    "href": "slides/week-7/week-7-data-frame-functions.html#tidy-evaluation",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Tidy Evaluation",
    "text": "Tidy Evaluation\nFunctions using unquoted variable names as arguments are said to use nonstandard evaluation or tidy evaluation.\n\n\nTidy:\n\npenguins |&gt; \n  pull(body_mass_g)\n\n  OR\n\npenguins$body_mass_g\n\n\nUntidy:\n\npenguins[, \"body_mass_g\"]\n\n  OR\n\npenguins[[\"body_mass_g\"]]\n\n\n\n\nTidy evaluation isn’t naturally supported when writing your own functions."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#defused-r-code",
    "href": "slides/week-7/week-7-data-frame-functions.html#defused-r-code",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Defused R Code",
    "text": "Defused R Code\nWhen a piece of code is defused, R doesn’t return its value like normal.\n\nInstead it returns an expression that describes how to evaluate it.\n\n\n\n\nEvaluated code:\n\n1 + 1\n\n[1] 2\n\n\n\nDefused code:\n\nexpr(1 + 1)\n\n1 + 1\n\n\n\n\n\nWe produce defused code when we use tidy evaluation and our own functions don’t know how to handle it."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#solution-1",
    "href": "slides/week-7/week-7-data-frame-functions.html#solution-1",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Solution 1",
    "text": "Solution 1\nDon’t use tidy evaluation in your own functions.\n\nThis is more complicated to read and use, but it’s safe.\n\n\nstd_column_01 &lt;- function(data, variable) {\n  stopifnot(is.data.frame(data))\n  \n  data[[variable]] &lt;- std_to_01(data[[variable]])\n  return(data)\n}\n\nstd_column_01(penguins, \"bill_length_mm\")"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang",
    "href": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Solution 2: rlang",
    "text": "Solution 2: rlang\nUse the rlang package!\n\n\n\nThis package provides operators that simplify writing functions around tidyverse pipelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead more about using this package for function writing here!"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang-1",
    "href": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang-1",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Solution 2: rlang",
    "text": "Solution 2: rlang\nTwo ways to get around the issue of defused code:\n\nEmbrace Operator ({ })\n\n\nWith { }, you can transport a variable from one function to another.\n\n\n\nDefuse and Inject\n\n\nYou can first use enquo(arg) to defuse the variable.\nThen use !!arg to inject the variable."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang-2",
    "href": "slides/week-7/week-7-data-frame-functions.html#solution-2-rlang-2",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Solution 2: rlang",
    "text": "Solution 2: rlang\nIf we use either of these solutions, we also need to use the walrus operator (:=).\n\nThis means we have to use := instead of = in any dplyr verb containing one of these rlang fixes."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#recall-our-broken-function",
    "href": "slides/week-7/week-7-data-frame-functions.html#recall-our-broken-function",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Recall Our Broken Function",
    "text": "Recall Our Broken Function\n\nstd_column_01 &lt;- function(data, variable) {\n  stopifnot(is.data.frame(data))\n  \n  data &lt;- data |&gt; \n    mutate(variable = std_to_01(variable))\n  return(data)\n}\n\nstd_column_01(penguins, body_mass_g)\n\nError in `mutate()`:\nℹ In argument: `variable = std_to_01(variable)`.\nCaused by error:\n! object 'body_mass_g' not found\n\n\n\nThe code is defused, so mutate() doesn’t know what body_mass_g is.\nWe need to modify variable to make this work correctly!"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#fixing-our-broken-function",
    "href": "slides/week-7/week-7-data-frame-functions.html#fixing-our-broken-function",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Fixing Our Broken Function",
    "text": "Fixing Our Broken Function\n\nEmbrace OperatorDefuse + Inject\n\n\n\nstd_column_01 &lt;- function(data, variable) {\n  stopifnot(is.data.frame(data))\n\n  data &lt;- data |&gt;\n    mutate({{variable}} := std_to_01({{variable}}))\n  return(data)\n}\n\nstd_column_01(penguins, body_mass_g)\n\n\n\n# A tibble: 6 × 7\n  species island    bill_length_mm bill_depth_mm body_mass_g sex     year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7       0.292 male    2007\n2 Adelie  Torgersen           39.5          17.4       0.306 female  2007\n3 Adelie  Torgersen           40.3          18         0.153 female  2007\n4 Adelie  Torgersen           NA            NA        NA     &lt;NA&gt;    2007\n5 Adelie  Torgersen           36.7          19.3       0.208 female  2007\n6 Adelie  Torgersen           39.3          20.6       0.264 male    2007\n\n\n\n\n\nstd_column_01 &lt;- function(data, variable) {\n  stopifnot(is.data.frame(data))\n  \n  variable &lt;- enquo(variable)\n\n  data &lt;- data |&gt;\n    mutate(!!variable := std_to_01(!!variable))\n  return(data)\n}\n\nstd_column_01(penguins, body_mass_g)\n\n\n\n# A tibble: 6 × 7\n  species island    bill_length_mm bill_depth_mm body_mass_g sex     year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7       0.292 male    2007\n2 Adelie  Torgersen           39.5          17.4       0.306 female  2007\n3 Adelie  Torgersen           40.3          18         0.153 female  2007\n4 Adelie  Torgersen           NA            NA        NA     &lt;NA&gt;    2007\n5 Adelie  Torgersen           36.7          19.3       0.208 female  2007\n6 Adelie  Torgersen           39.3          20.6       0.264 male    2007"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#inject-multiple-variables",
    "href": "slides/week-7/week-7-data-frame-functions.html#inject-multiple-variables",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Inject Multiple Variables",
    "text": "Inject Multiple Variables\nWhat if I want to modify multiple columns?\n\nUse across()!\n\n\nstd_column_01 &lt;- function(data, variables) {\n  stopifnot(is.data.frame(data))\n  \n  data &lt;- data |&gt; \n    mutate(across(.cols = {{variables}},\n                  .fns = ~ std_to_01(.x)))\n  return(data)\n}\n\nstd_column_01(penguins, bill_length_mm:body_mass_g)\n\n\n\n# A tibble: 5 × 7\n  species island    bill_length_mm bill_depth_mm body_mass_g sex     year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  &lt;int&gt;\n1 Adelie  Torgersen          0.255         0.667       0.292 male    2007\n2 Adelie  Torgersen          0.269         0.512       0.306 female  2007\n3 Adelie  Torgersen          0.298         0.583       0.153 female  2007\n4 Adelie  Torgersen         NA            NA          NA     &lt;NA&gt;    2007\n5 Adelie  Torgersen          0.167         0.738       0.208 female  2007"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#types-of-missing-data",
    "href": "slides/week-7/week-7-data-frame-functions.html#types-of-missing-data",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Types of Missing Data",
    "text": "Types of Missing Data\n\nMissing Completely at Random (MCAR)\n\nNo difference between missing and observed values.\nMissing observations are a random subset of all observations.\n\nMissing at Random (MAR)\n\nSystematic difference between missing and observed values, but can be entirely explained by other observed variables.\n\nMissing Not at Random (MNAR)\n\nMissingness is directly related to the unobserved value."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#types-of-missing-data-1",
    "href": "slides/week-7/week-7-data-frame-functions.html#types-of-missing-data-1",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Types of Missing Data",
    "text": "Types of Missing Data\nConsider a study of depression.\n\nMissing Completely at Random (MCAR)\n\nSome subjects have missing lab values because a batch of samples was processed improperly.\n\nMissing at Random (MAR)\n\nSubjects who identify as men are less likely to complete a survey on depression severity.\n\nMissing Not at Random (MNAR)\n\nSubjects with more severe depression are less likely to complete a survey on depression severity."
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#when-we-remove-missing-data",
    "href": "slides/week-7/week-7-data-frame-functions.html#when-we-remove-missing-data",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "When we remove missing data…",
    "text": "When we remove missing data…\nWe implicitly assume observations are missing completely at random!\n\nWe might be mostly removing data from subjects who identify as men.\nWe might be mostly removing data from subjects with severe depression.\nWe are inadvertently making our data less representative.\n\n\nWe need to take more care when dealing with missing values!"
  },
  {
    "objectID": "slides/week-7/week-7-data-frame-functions.html#dealing-with-missing-data",
    "href": "slides/week-7/week-7-data-frame-functions.html#dealing-with-missing-data",
    "title": "Writing Data Frame / Plotting Functions",
    "section": "Dealing with Missing Data",
    "text": "Dealing with Missing Data\n\nLook for patterns!\n\nDo observations with missing values have similar traits?\n\n\n\n\nConsider outside explanations!\n\nWhy might missing data exist?\nShould we have a “missing” category in our analysis?\n\n\n\n\n\nCan we impute values?\n\nIf depression is MCAR within gender, age, and education level, then the distribution of depression will be similar for people of the same gender, age, and education level."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#thursday-october-24",
    "href": "slides/week-5/week-5-dates.html#thursday-october-24",
    "title": "Using lubridate to Work with Dates",
    "section": "Thursday, October 24",
    "text": "Thursday, October 24\nToday we will…\n\nReminder About Lab 3 / Challenge 3 Revisions\nDebrief Lab 4\n\nLab 4 Peer Code Review\n\nMidterm Portfolio\n\nWhat to Expect\nHow to Get Started\n\nNew Material\n\nWorking with Date & Time Variables\n\nPA 5.2: Jewel Heist"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#common-mishaps",
    "href": "slides/week-5/week-5-dates.html#common-mishaps",
    "title": "Using lubridate to Work with Dates",
    "section": "Common Mishaps",
    "text": "Common Mishaps\n\n\n\nQ1: Who collected these data? When were the data collected?\nQ4: Column titles of 2008 and 2018 are not descriptive!\n\nCreating column names that describe the values stored in those columns!\nThe names_prefix = argument to pivot_wider() can help you make better column names!\nDVS-6: I can create tables which make my summaries clear to the reader\n\nQ4: Unless you specify .groups = \"drop\" within summarize() your table still is grouped!\n\ngroup_by() + summarize() only drops the first group.\nIf you have two variables inside group_by(), then the data will still be grouped by the second variable!\n\nQ7: The data description contains important information!\n\nmc_toddler – Aggregated weekly, full-time median price charged for Center-based Care for toddlers.\nmhi_2018 – Median household income expressed in 2018 dollars."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#recreating-the-plot",
    "href": "slides/week-5/week-5-dates.html#recreating-the-plot",
    "title": "Using lubridate to Work with Dates",
    "section": "Recreating the Plot",
    "text": "Recreating the Plot\n\nDVS-2: I use plot modifications to make my visualizations clearer to the reader\n\n\n\nFacets ordered based on developmental stage not alphabetically\nOrdering colors in the legend so they appear in the same order as the lines in the plot.\n\n\n\n\nDVS-3: I show creativity in my visualizations\n\n\n\nExploring different color themes\n\nPersonally, I like the \"Accent\" palette from the RColorBrewer package, but you might like others!\nGetting 10 colors is hard! I would recommend looking into the colorRampPalette() function to get more colors.\n\n\n\n\n\n\n\nExploring different plot themes\n\nPersonally, I like theme_bw(), but you might like others!"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#other-big-picture-code-feedback",
    "href": "slides/week-5/week-5-dates.html#other-big-picture-code-feedback",
    "title": "Using lubridate to Work with Dates",
    "section": "Other “Big Picture” Code Feedback",
    "text": "Other “Big Picture” Code Feedback\n\n\nI strongly recommend against nested functions, as they are difficult for people to understand what your code is doing. Having two lines is not less efficient and is more readable.\n\n\nmutate(age_group = fct_relevel(fct_recode(age_group,\n                                          \"Infant\" = \"mc_infant\",\n                                          \"Toddler\" = \"mc_toddler\",\n                                          \"Preschool\" = \"mc_preschool\"),\n                                \"Infant\",\n                                \"Toddler\",\n                                \"Preschool\"))\n\n\n\n\n\n\nCan you do this entire process in one pipeline?\n\n\nca_counties &lt;- counties |&gt;\n  filter(state_name == \"California\")\n\nca_childcare &lt;- childcare_costs |&gt;\n  inner_join(ca_counties)"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#saving-objects-that-arent-worth-saving",
    "href": "slides/week-5/week-5-dates.html#saving-objects-that-arent-worth-saving",
    "title": "Using lubridate to Work with Dates",
    "section": "Saving Objects That Aren’t Worth Saving",
    "text": "Saving Objects That Aren’t Worth Saving\n\n\nWe should only save objects that we need to use later!\n\n\nlowest_child_care_price_2018 &lt;- ca_childcare |&gt;\n  filter(study_year == 2018) |&gt;\n  group_by(region) |&gt;   \n  summarise(median_infant_price = median(mc_infant)) |&gt; \n  slice_min(order_by = median_infant_price)\n\nlowest_child_care_price_2018"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#what-to-expect",
    "href": "slides/week-5/week-5-dates.html#what-to-expect",
    "title": "Using lubridate to Work with Dates",
    "section": "What to Expect",
    "text": "What to Expect\nYou will create a Midterm Portfolio, with code covering the learning targets we have covered thus far in the course.\n\n\nYour code will be pulled from your Lab and Challenge assignments.\n\n\n\n\nYou will write reflections on how you’ve:\n\nrevised your thinking\nextended your thinking\nsupported and collaborated with your peers"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#getting-started",
    "href": "slides/week-5/week-5-dates.html#getting-started",
    "title": "Using lubridate to Work with Dates",
    "section": "Getting Started",
    "text": "Getting Started\nThe partner who got the most sleep starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#why-are-dates-and-times-tricky",
    "href": "slides/week-5/week-5-dates.html#why-are-dates-and-times-tricky",
    "title": "Using lubridate to Work with Dates",
    "section": "Why are dates and times tricky?",
    "text": "Why are dates and times tricky?\nWhen parsing dates and times, we have to consider complicating factors like…\n\nDaylight Savings Time.\n\nOne day a year is 23 hours; one day a year is 25 hours.\nSome places use it, some don’t.\n\nLeap years – most years have 365 days, some have 366.\nTime zones."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#lubridate",
    "href": "slides/week-5/week-5-dates.html#lubridate",
    "title": "Using lubridate to Work with Dates",
    "section": "lubridate",
    "text": "lubridate\n\n\n\nConvert a date-like variable (“May 8, 1995”) to a date or date-time object.\nFind the weekday, month, year, etc from a date-time object.\nConvert between time zones.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe lubridate package installs and loads with the tidyverse."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#date-time-objects",
    "href": "slides/week-5/week-5-dates.html#date-time-objects",
    "title": "Using lubridate to Work with Dates",
    "section": "date-time Objects",
    "text": "date-time Objects\nThere are multiple data types for dates and times.\n\nA date:\n\ndate or Date\n\nA date and a time (identifies a unique instant in time):\n\ndtm\nPOSIXlt – stores date-times as the number of seconds since January 1, 1970 (“Unix Epoch”)\nPOSIXct – stores date-times as a list with elements for second, minute, hour, day, month, year, etc."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#creating-date-time-objects",
    "href": "slides/week-5/week-5-dates.html#creating-date-time-objects",
    "title": "Using lubridate to Work with Dates",
    "section": "Creating date-time Objects",
    "text": "Creating date-time Objects\nCreate a date from individual components:\n\nmake_date(year = 1995, month = 05, day = 08)\n\n[1] \"1995-05-08\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#create-a-date-time-object-from-a-string",
    "href": "slides/week-5/week-5-dates.html#create-a-date-time-object-from-a-string",
    "title": "Using lubridate to Work with Dates",
    "section": "Create a date-time Object from a String",
    "text": "Create a date-time Object from a String\n\n\nmdy(\"August 29, 1991\")\n\n[1] \"1991-08-29\"\n\n\n\n\n\n\ndmy(\"29-August-1991\", \n    tz = \"America/Denver\")\n\n[1] \"1991-08-29 MDT\"\n\n\n\n\n\n\n\ndmy_hms(\"29-August-1991 9:32:12\", \n        tz = \"America/Denver\")\n\n[1] \"1991-08-29 09:32:12 MDT\"\n\n\n\n\n\n\n\nas_datetime(\"91-08-29\", \n            format = \"%y-%m-%d\")\n\n[1] \"1991-08-29 UTC\"\n\n\n\n\n\n\n\nparse_datetime(\"8/29/1991\", \n               format = \"%m/%d/%Y\")\n\n[1] \"1991-08-29 UTC\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#creating-date-time-objects-1",
    "href": "slides/week-5/week-5-dates.html#creating-date-time-objects-1",
    "title": "Using lubridate to Work with Dates",
    "section": "Creating date-time Objects",
    "text": "Creating date-time Objects"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#common-mistake-with-dates",
    "href": "slides/week-5/week-5-dates.html#common-mistake-with-dates",
    "title": "Using lubridate to Work with Dates",
    "section": "Common Mistake with Dates",
    "text": "Common Mistake with Dates\n\n\n\nas_datetime(2023-02-6)\n\n[1] \"1970-01-01 00:33:35 UTC\"\n\n\n\n\n\n\nmy_date &lt;- 2023-02-6\nmy_date\n\n[1] 2015\n\n\n\n\n\nWhat’s wrong here?\n\n\n\nMake sure you use quotes!\n\n2,015 seconds \\(\\approx\\) 33.5 minutes"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#extracting-date-time-components",
    "href": "slides/week-5/week-5-dates.html#extracting-date-time-components",
    "title": "Using lubridate to Work with Dates",
    "section": "Extracting date-time Components",
    "text": "Extracting date-time Components\n\nbday &lt;- ymd_hms(\"1989-01-14 12:03:12\", \n                tz = \"America/Denver\")\nbday\n\n[1] \"1989-01-14 12:03:12 MST\"\n\n\n\n\n\n\n\n\nyear(bday)\n\n[1] 1989\n\nmonth(bday)\n\n[1] 1\n\nday(bday)\n\n[1] 14\n\n\n\n\n\n\n\nwday(bday)\n\n[1] 7\n\nwday(bday, \n     label = TRUE, \n     abbr = FALSE)\n\n[1] Saturday\n7 Levels: Sunday &lt; Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; ... &lt; Saturday"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#subtraction-with-date-time-objects",
    "href": "slides/week-5/week-5-dates.html#subtraction-with-date-time-objects",
    "title": "Using lubridate to Work with Dates",
    "section": "Subtraction with date-time Objects",
    "text": "Subtraction with date-time Objects\nDoing subtraction gives you a difftime object.\ndifftime objects do not always have the same units – it depends on the scale of the objects you are working with."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#how-old-am-i",
    "href": "slides/week-5/week-5-dates.html#how-old-am-i",
    "title": "Using lubridate to Work with Dates",
    "section": "How old am I?",
    "text": "How old am I?\n\ntoday() - mdy(01141989)\n\nTime difference of 13165 days\n\n\n\n\nHow long did it take me to type this slide?\n\nbegin &lt;- mdy_hms(\"10/21/2024 20:40:34\")\nfinish &lt;- mdy_hms(\"10/21/2024 20:43:11\")\n\nfinish - begin\n\nTime difference of 2.616667 mins"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#durations-and-periods",
    "href": "slides/week-5/week-5-dates.html#durations-and-periods",
    "title": "Using lubridate to Work with Dates",
    "section": "Durations and Periods",
    "text": "Durations and Periods\n\n\nDurations will always give the time span in an exact number of seconds.\n\nas.duration(\n  today() - mdy(01141989)\n            )\n\n[1] \"1137456000s (~36.04 years)\"\n\n\n\n\n\n\nPeriods will give the time span in more approximate, but human readable times.\n\nas.period(\n  today() - mdy(01141989)\n  )\n\n[1] \"13165d 0H 0M 0S\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#durations-and-periods-1",
    "href": "slides/week-5/week-5-dates.html#durations-and-periods-1",
    "title": "Using lubridate to Work with Dates",
    "section": "Durations and Periods",
    "text": "Durations and Periods\n\n\nWe can also add time to date-time objects:\n\ndays(), years(), etc. will add a period of time.\nddays(), dyears(), etc. will add a duration of time.\n\n\n\n\n\nBecause durations use the exact number of seconds to represent days and years, you might get unexpected results.\n\nWhen is is my 99th birthday?\n\nmdy(01141989) + years(99)\n\n[1] \"2088-01-14\"\n\n\n\nmdy(01141989) + dyears(99)\n\n[1] \"2088-01-14 18:00:00 UTC\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#time-zones",
    "href": "slides/week-5/week-5-dates.html#time-zones",
    "title": "Using lubridate to Work with Dates",
    "section": "Time Zones…",
    "text": "Time Zones…\n…are complicated!\n\nSpecify time zones in the form:\n\n{continent}/{city} – “America/Denver”, “Africa/Nairobi”\n{ocean}/{city} – “Pacific/Auckland”\n\n\nWhat time zone does R think I’m in?\n\nSys.timezone()\n\n[1] \"America/Los_Angeles\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#time-zones-1",
    "href": "slides/week-5/week-5-dates.html#time-zones-1",
    "title": "Using lubridate to Work with Dates",
    "section": "Time Zones",
    "text": "Time Zones\nYou can change the time zone of a date in two ways:\n\nx &lt;- ymd_hms(\"2024-10-24 18:00:00\", \n             tz = \"Europe/Copenhagen\")\n\n\n\n\nwith_tz()\n\nKeeps the instant in time the same, but changes the visual representation.\n\nx |&gt; \n  with_tz()\n\n[1] \"2024-10-24 09:00:00 PDT\"\n\nx |&gt; \n  with_tz(tzone = \"Asia/Kolkata\")\n\n[1] \"2024-10-24 21:30:00 IST\"\n\n\n\n\n\n\n\nforce_tz()\n\nChanges the instant in time by forcing a time zone change.\n\nx |&gt; \n  force_tz()\n\n[1] \"2024-10-24 18:00:00 PDT\"\n\nx |&gt; \n  force_tz(tzone = \"Asia/Kolkata\")\n\n[1] \"2024-10-24 18:00:00 IST\""
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#common-mistake-with-dates-1",
    "href": "slides/week-5/week-5-dates.html#common-mistake-with-dates-1",
    "title": "Using lubridate to Work with Dates",
    "section": "Common Mistake with Dates",
    "text": "Common Mistake with Dates\nWhen you read data in or create a new date-time object, the default time zone (if not specified) is UTC (Universal Time Coordinated)*.\n\nSo, make sure you specify your desired time zone!\n\nx &lt;- mdy(\"11/20/1993\")\ntz(x)\n\n[1] \"UTC\"\n\n\n\nx &lt;- mdy(\"11/20/1993\", \n         tz = \"America/Los_Angeles\")\ntz(x)\n\n[1] \"America/Los_Angeles\"\n\n\n\n*UTC is the same as GMT (Greenwich Mean Time)"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#this-activity-will-require-knowledge-of",
    "href": "slides/week-5/week-5-dates.html#this-activity-will-require-knowledge-of",
    "title": "Using lubridate to Work with Dates",
    "section": "This activity will require knowledge of:",
    "text": "This activity will require knowledge of:\n\n\nConverting time zones\nExtracting components of a date\nFiltering based on date components\nMaking intervals of time\nFiltering values that fall into an interval\nFinding the duration between two dates\nModulus division\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#lubridate-resources",
    "href": "slides/week-5/week-5-dates.html#lubridate-resources",
    "title": "Using lubridate to Work with Dates",
    "section": "lubridate Resources",
    "text": "lubridate Resources\n\n\nEvery group should have a lubridate cheatsheet!\n\nOn the Front:\n\nMiddle Column – functions related to “getting components” of dates\nBottom Right – functions related to time zones\n\n\n\n\nOn the Back:\n\nLeft Column – functions related to adding / subtracting “periods” to / from dates\nRight Column – functions related to creating and using intervals of time"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#task-card",
    "href": "slides/week-5/week-5-dates.html#task-card",
    "title": "Using lubridate to Work with Dates",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\n\n\n\nOn the Front\n\nthe expectations of each role\nthe norms of collaborating\n\n\n\n\n\nOn the Back\n\n\nlubridate functions for different tasks you may encounter"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#getting-started-1",
    "href": "slides/week-5/week-5-dates.html#getting-started-1",
    "title": "Using lubridate to Work with Dates",
    "section": "Getting Started",
    "text": "Getting Started\nThe partner who got the most sleep starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#submission",
    "href": "slides/week-5/week-5-dates.html#submission",
    "title": "Using lubridate to Work with Dates",
    "section": "Submission",
    "text": "Submission\n\nSubmit the name of the thief to the Canvas Quiz.\n\n\nEach person will input the full name of the thief into the PA 5.2 quiz.\nEach person will submit the PA-5-dates.html file."
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#to-do",
    "href": "slides/week-5/week-5-dates.html#to-do",
    "title": "Using lubridate to Work with Dates",
    "section": "To do…",
    "text": "To do…\n\nLab 5: Murder in SQL City\n\ndue Sunday, February 9 at 11:59pm"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#new-seating-chart",
    "href": "slides/week-7/week-7-vector-functions.html#new-seating-chart",
    "title": "Writing Vector Functions",
    "section": "New Seating Chart",
    "text": "New Seating Chart"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#tuesday-november-2",
    "href": "slides/week-7/week-7-vector-functions.html#tuesday-november-2",
    "title": "Writing Vector Functions",
    "section": "Tuesday, November 2",
    "text": "Tuesday, November 2\nToday we will…\n\nReminder: Midterm Portfolio Meetings\nNew Material\n\nFunction Basics\nVariable Scope + Environment\n\nPA 7: Writing Functions"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#midterm-portfolio-meetings-1",
    "href": "slides/week-7/week-7-vector-functions.html#midterm-portfolio-meetings-1",
    "title": "Writing Vector Functions",
    "section": "Midterm Portfolio Meetings",
    "text": "Midterm Portfolio Meetings\n\n\nNo in-person class on Thursday\n\nRemember the time you signed up for: Google Sheet with Sign-up Times\n\nDeadline to sign-up (or move your time) is Tuesday at 5pm.\n\nMeetings scheduled between 8am and 11am will be in Dr. T’s office (25-105).\nMeetings scheduled between 12pm and 3pm will be in our classroom (this room)."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#why-write-functions",
    "href": "slides/week-7/week-7-vector-functions.html#why-write-functions",
    "title": "Writing Vector Functions",
    "section": "Why write functions?",
    "text": "Why write functions?\nFunctions allow you to automate common tasks!\n\nWe’ve been using functions since Day 1, but when we write our own, we can customize them!\nHave you found yourself copy-pasting code and only changing small parts?"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#why-write-functions-1",
    "href": "slides/week-7/week-7-vector-functions.html#why-write-functions-1",
    "title": "Writing Vector Functions",
    "section": "Why write functions?",
    "text": "Why write functions?\nWriting functions has three big advantages over copy-paste:\n\nYour code is easier to read.\nTo change your analysis, simply change one function.\nYou avoid mistakes."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#function-syntax",
    "href": "slides/week-7/week-7-vector-functions.html#function-syntax",
    "title": "Writing Vector Functions",
    "section": "Function Syntax",
    "text": "Function Syntax"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#function-syntax-1",
    "href": "slides/week-7/week-7-vector-functions.html#function-syntax-1",
    "title": "Writing Vector Functions",
    "section": "Function Syntax",
    "text": "Function Syntax"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#a-very-simple-function",
    "href": "slides/week-7/week-7-vector-functions.html#a-very-simple-function",
    "title": "Writing Vector Functions",
    "section": "A (very) Simple Function",
    "text": "A (very) Simple Function\nLet’s define a function.\n\nYou run the code to define the function just once.\n\n\nadd_two &lt;- function(x){\n  x + 2\n}\n\n\n\nLet’s call the function!\n\nadd_two(5)\n\n[1] 7"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#naming-add_two",
    "href": "slides/week-7/week-7-vector-functions.html#naming-add_two",
    "title": "Writing Vector Functions",
    "section": "Naming: add_two",
    "text": "Naming: add_two\nThe name of the function is chosen by the author.\n\nadd_two &lt;- function(x){\n  x + 2\n}\n\n\n\n\n\n\n\n\nFunction names have no inherent meaning.\n\n\nThe name you give to a function does not affect what the function does.\n\nadd_three &lt;- function(x){\n  x + 7\n}\n\n\n\nadd_three(5)\n\n[1] 12"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#arguments",
    "href": "slides/week-7/week-7-vector-functions.html#arguments",
    "title": "Writing Vector Functions",
    "section": "Arguments",
    "text": "Arguments\nThe argument(s) of the function are chosen by the author.\n\nArguments are how we pass external values into the function.\nThey are temporary variables that only exist inside the function body.\n\n\n\n\n\n\nWe give them general names:\n\nx, y, z – vectors\ndf – data frame\ni, j – indices\n\n\n\n\n\n\nadd_two &lt;- function(x){\n  x + 2\n}"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#arguments-1",
    "href": "slides/week-7/week-7-vector-functions.html#arguments-1",
    "title": "Writing Vector Functions",
    "section": "Arguments",
    "text": "Arguments\n\nOptional argumentsRequired arguments\n\n\n\nIf we supply a default value when defining the function, the argument is optional when calling the function.\n\nadd_something &lt;- function(x, something = 2){\n  return(x + something)\n}\n\n\n\n\nIf a value is not supplied, something defaults to 2.\n\nadd_something(x = 5)\n\n[1] 7\n\n\n\nadd_something(x = 5, something = 6)\n\n[1] 11\n\n\n\n\n\n\n\nIf we do not supply a default value when defining the function, the argument is required when calling the function.\n\nadd_something &lt;- function(x, something){\n  x + something\n}\n\nadd_something(x = 2)\n\nError in add_something(x = 2): argument \"something\" is missing, with no default"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#body",
    "href": "slides/week-7/week-7-vector-functions.html#body",
    "title": "Writing Vector Functions",
    "section": "Body: {  }",
    "text": "Body: {  }\nThe body of the function is where the action happens.\n\nThe body must be specified within a set of curly brackets.\nThe code in the body will be executed (in order) whenever the function is called.\n\n\nadd_two &lt;- function(x){\n  x + 2\n}"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#output-return",
    "href": "slides/week-7/week-7-vector-functions.html#output-return",
    "title": "Writing Vector Functions",
    "section": "Output: return()",
    "text": "Output: return()\nYour function will give back what would normally print out…\n\nadd_two &lt;- function(x){\n  x + 2\n}\n\n\n\n\n\n7 + 2\n\n[1] 9\n\n\n\n\nadd_two(7)\n\n[1] 9\n\n\n\n\n\n…but it’s better to be explicit and use return()*.\n\nadd_two &lt;- function(x){\n  return(x + 2)\n}"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#function-style-using-returns",
    "href": "slides/week-7/week-7-vector-functions.html#function-style-using-returns",
    "title": "Writing Vector Functions",
    "section": "Function Style – Using return()s",
    "text": "Function Style – Using return()s\n\n\n“Only use return() for early returns. Otherwise, rely on R to return the result of the last evaluated expression.”\n\n\n\n\n\n\n\n\n# Good\nfind_abs &lt;- function(x) {\n  if (x &gt; 0) {\n    return(x)\n  }\n  x * -1\n}\n\n\n\n\n\n\n\n# Bad\nadd_two &lt;- function(x, y) {\n  return(x + y)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nI tend to disagree…\n\n\nI prefer to use return() statements because it saves me from accidentally writing a function that outputs nothing."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#output-return-1",
    "href": "slides/week-7/week-7-vector-functions.html#output-return-1",
    "title": "Writing Vector Functions",
    "section": "Output: return()",
    "text": "Output: return()\n\nIf you need to return more than one object from a function, wrap those objects in a list.\n\n\n\nmin_max &lt;- function(x){\n  lowest &lt;- min(x)\n  highest &lt;- max(x)\n  return(list(lowest, highest))\n}\n\nvec &lt;- c(346,\n         547,\n         865, \n         112, \n         58)\n\nmin_max(vec)\n\n[[1]]\n[1] 58\n\n[[2]]\n[1] 865"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#input-validation",
    "href": "slides/week-7/week-7-vector-functions.html#input-validation",
    "title": "Writing Vector Functions",
    "section": "Input Validation",
    "text": "Input Validation\nWhen a function requires an input of a specific data type, check that the supplied argument is valid.\n\nstopifnot()if() + stop()Multiple validations\n\n\n\n\nadd_something &lt;- function(x, something){\n  stopifnot(is.numeric(x))\n  return(x + something)\n}\n\nadd_something(x = \"statistics\", something = 5)\n\nError in add_something(x = \"statistics\", something = 5): is.numeric(x) is not TRUE\n\n\n\n\n\n\n\nadd_something &lt;- function(x, something){\n  if(!is.numeric(x)){\n    stop(\"Please provide a numeric input for the x argument.\")\n  }\n  return(x + something)\n}\n\nadd_something(x = \"statistics\", something = 5)\n\nError in add_something(x = \"statistics\", something = 5): Please provide a numeric input for the x argument.\n\n\n\n\n\n\nHow would you modify the previous code to validate both x and something?\nMeaning, the function should check if both x and something are numeric."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#multiple-validations-1",
    "href": "slides/week-7/week-7-vector-functions.html#multiple-validations-1",
    "title": "Writing Vector Functions",
    "section": "Multiple Validations",
    "text": "Multiple Validations\n\nOption 1: if() + stop()Option 2: stopifnot()\n\n\n\nadd_something &lt;- function(x, something){\n  if(!is.numeric(x) | !is.numeric(something)){\n    stop(\"Please provide numeric inputs for both arguments.\")\n  }\n  return(x + something)\n}\n\nadd_something(x = 2, something = \"R\")\n\nError in add_something(x = 2, something = \"R\"): Please provide numeric inputs for both arguments.\n\n\n\n\n\nadd_something &lt;- function(x, something){\n  stopifnot(is.numeric(x), is.numeric(something))\n  return(x + something)\n}\n\nadd_something(x = 2, something = \"R\")\n\nError in add_something(x = 2, something = \"R\"): is.numeric(something) is not TRUE"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#variable-scope",
    "href": "slides/week-7/week-7-vector-functions.html#variable-scope",
    "title": "Writing Vector Functions",
    "section": "Variable Scope",
    "text": "Variable Scope\nThe location (environment) in which we can find and access a variable is called its scope.\n\nWe need to think about the scope of variables when we write functions.\nWhat variables can we access inside a function?\nWhat variables can we access outside a function?"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#global-environment",
    "href": "slides/week-7/week-7-vector-functions.html#global-environment",
    "title": "Writing Vector Functions",
    "section": "Global Environment",
    "text": "Global Environment\n\nThe top right pane of Rstudio shows you the global environment.\n\nThis is the current state of all objects you have created.\nThese objects can be accessed anywhere."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#function-environment",
    "href": "slides/week-7/week-7-vector-functions.html#function-environment",
    "title": "Writing Vector Functions",
    "section": "Function Environment",
    "text": "Function Environment\n\nThe code inside a function executes in the function environment.\n\nFunction arguments and any variables created inside the function only exist inside the function.\n\nThey disappear when the function code is complete.\n\n\nWhat happens in the function environment does not affect things in the global environment."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#function-environment-1",
    "href": "slides/week-7/week-7-vector-functions.html#function-environment-1",
    "title": "Writing Vector Functions",
    "section": "Function Environment",
    "text": "Function Environment\nWe cannot access variables created inside a function outside of the function.\n\nadd_two &lt;- function(x) {\n  my_result &lt;- x + 2\n  return(my_result)\n}\n\n\n\n\n\nadd_two(9)\n\n[1] 11\n\n\n\n\n\n\n\nmy_result\n\nError: object 'my_result' not found"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#name-masking",
    "href": "slides/week-7/week-7-vector-functions.html#name-masking",
    "title": "Writing Vector Functions",
    "section": "Name Masking",
    "text": "Name Masking\n\nName masking occurs when an object in the function environment has the same name as an object in the global environment.\n\n\n\nadd_two &lt;- function(x) {\n  my_result &lt;- x + 2\n  return(my_result)\n}\n\n\n\n\n\nmy_result &lt;- 2000\n\n\n\n\n\n\nThe my_result created inside the function is different from the my_result created outside.\n\n\n\nadd_two(5)\n\n[1] 7\n\n\n\n\nmy_result\n\n[1] 2000"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#dynamic-lookup",
    "href": "slides/week-7/week-7-vector-functions.html#dynamic-lookup",
    "title": "Writing Vector Functions",
    "section": "Dynamic Lookup",
    "text": "Dynamic Lookup\n\nFunctions look for objects FIRST in the function environment and SECOND in the global environment.\n\n\n\nIf the object doesn’t exist in either, the code will give an error.\n\n\nadd_two &lt;- function() {\n  return(x + 2)\n}\n\nadd_two()\n\nError in add_two(): object 'x' not found\n\n\n\n\n\nIf it doesn’t exist in the function environment, then it will look in the global environment\n\n\nx &lt;- 10\n\nadd_two()\n\n[1] 12\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is not good practice to rely on global environment objects inside a function!"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#debugging-1",
    "href": "slides/week-7/week-7-vector-functions.html#debugging-1",
    "title": "Writing Vector Functions",
    "section": "Debugging",
    "text": "Debugging\nYou will make mistakes (create bugs) when coding.\n\nUnfortunately, it becomes more and more complicated to debug your code as your code gets more sophisticated.\nThis is especially true with functions!"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#debugging-strategies",
    "href": "slides/week-7/week-7-vector-functions.html#debugging-strategies",
    "title": "Writing Vector Functions",
    "section": "Debugging Strategies",
    "text": "Debugging Strategies\nWhen you have a concept that you want to turn into a function…\n\n\nWrite a simple example of the code without the function framework.\nGeneralize the example by assigning variables.\nWrite the code into a function.\nCall the function on the desired arguments\n\n\n\nThis structure allows you to address issues as you go."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#an-example",
    "href": "slides/week-7/week-7-vector-functions.html#an-example",
    "title": "Writing Vector Functions",
    "section": "An Example",
    "text": "An Example\nWrite a function called find_car_make() that takes in the name of a car and returns the “make” of the car (the company that created it).\n\nfind_car_make(\"Toyota Camry\") should return “Toyota”.\nfind_car_make(\"Ford Anglica\") should return “Ford”."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#an-example-1",
    "href": "slides/week-7/week-7-vector-functions.html#an-example-1",
    "title": "Writing Vector Functions",
    "section": "An Example",
    "text": "An Example\n\nSimple ExamplesGeneralizeWrite + Call Funciton\n\n\n\nmake &lt;- word(string = \"Toyota Camry\",\n             start = 1, \n             end = 1)\nmake\n\n[1] \"Toyota\"\n\nmake &lt;- word(string = \"Ford Anglica\",\n             start = 1, \n             end = 1)\nmake\n\n[1] \"Ford\"\n\n\n\n\n\ncar_name &lt;- \"Toyota Camry\"\n\nmake &lt;- word(string = car_name, \n             start = 1, \n             end = 1)\nmake\n\n[1] \"Toyota\"\n\n\n\n\nTaking these examples, write a find_car_make() function that will output the maker / manufacturer of any car.\nOnce you’ve got a function written, can you add input validation to your function?"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#find_car_make",
    "href": "slides/week-7/week-7-vector-functions.html#find_car_make",
    "title": "Writing Vector Functions",
    "section": "find_car_make()",
    "text": "find_car_make()\n\n\nfind_car_make &lt;- function(car_name){\n  # Check if there is a space in the string (so there are separate parts)\n  stopifnot(\n    stringr::str_detect(car_name, pattern = \"\\\\w\")\n            )\n  # Grab the first word of the car name (assuming Toyota Camry style input)\n  make &lt;- word(string = car_name, \n               start = 1, \n               end = 1)\n  \n  return(make)\n}\n\n\n\n\n\n\n\nfind_car_make(\"Toyota Camry\")\n\n[1] \"Toyota\"\n\n\n\n\n\n\n\n\nfind_car_make(\"Ford Anglica\")\n\n[1] \"Ford\""
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#pa-7",
    "href": "slides/week-7/week-7-vector-functions.html#pa-7",
    "title": "Writing Vector Functions",
    "section": "PA 7",
    "text": "PA 7\nYou will write several small functions, then use them to unscramble a message. Many of the functions have been started for you, but none of them are complete as is.\n\n\n\n\nThis activity will require knowledge of:\n\nSummary functions\nFunction documentation (for optional arguments)\nFunction syntax\nmodulus division (and remainders)\nif () & else if() statements\nUsing [] and logical values to extract elements of a vector\nNegating logical statements\n\n\n\n\n\n \nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#base-r-resources",
    "href": "slides/week-7/week-7-vector-functions.html#base-r-resources",
    "title": "Writing Vector Functions",
    "section": "Base R Resources",
    "text": "Base R Resources\n\n\nEvery group should have a base R cheatsheet!\n\n\nOn the front middle:\n\nSelecting Vectors can refresh your memory on using [] to extract elements of a vector\n\n\n\n\n\nOn the front right:\n\nIf Statements can help you write conditional checks / returns for your functions\nFunctions can help you remember the syntax for creating a function"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#getting-started",
    "href": "slides/week-7/week-7-vector-functions.html#getting-started",
    "title": "Writing Vector Functions",
    "section": "Getting Started",
    "text": "Getting Started\nThe partner who lives the furthest from SLO starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#submission",
    "href": "slides/week-7/week-7-vector-functions.html#submission",
    "title": "Writing Vector Functions",
    "section": "Submission",
    "text": "Submission\n\nSubmit the name of the television show the six numbers are associated with.\n\n\nEach person will input the full name of the TV show into the PA 7 quiz.\nEach person will submit the PA-7-functions.html file."
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#lab-7-challenge-7-functions-fish",
    "href": "slides/week-7/week-7-vector-functions.html#lab-7-challenge-7-functions-fish",
    "title": "Writing Vector Functions",
    "section": "Lab 7 & Challenge 7: Functions + Fish",
    "text": "Lab 7 & Challenge 7: Functions + Fish"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#to-do",
    "href": "slides/week-7/week-7-vector-functions.html#to-do",
    "title": "Writing Vector Functions",
    "section": "To do…",
    "text": "To do…\n\nPA 7: Functions\n\nDue Thursday, 2/20 by 12pm\n\n\n\n\n\nLab 7: Functions + Fish\n\nDue Sunday, 2/23 at 11:59pm."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#tuesday-october-15",
    "href": "slides/week-4/week-4-joins-1.html#tuesday-october-15",
    "title": "Data Joins + Pivots",
    "section": "Tuesday, October 15",
    "text": "Tuesday, October 15\nToday we will discuss…\n\nDiscord & Tokens\nGrade Expectations\n\nSurvey on Canvas\n\nNew Material\n\nPivoting data with tidyr\nJoining data with dplyr\n\nPA 4: Military Spending"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#tidy-data",
    "href": "slides/week-4/week-4-joins-1.html#tidy-data",
    "title": "Data Joins + Pivots",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data…\n\nis rectangular.\nhas observations as rows and variables as columns.\nhas different formats for different tasks."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#creating-tidy-data",
    "href": "slides/week-4/week-4-joins-1.html#creating-tidy-data",
    "title": "Data Joins + Pivots",
    "section": "Creating Tidy Data",
    "text": "Creating Tidy Data\nWe may need to transform our data to turn it into the version of tidy that is best for a task at hand.\n\nImage by Allison Horst"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#cereal-data",
    "href": "slides/week-4/week-4-joins-1.html#cereal-data",
    "title": "Data Joins + Pivots",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nlibrary(liver)\ndata(cereal)\nhead(cereal)\n\n\n\n\n\n\n\nname\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1\n0.33\n68.40297\n\n\n100% Natural Bran\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1\n1.00\n33.98368\n\n\nAll-Bran\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1\n0.50\n93.70491\n\n\nAlmond Delight\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1\n0.75\n29.50954"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#creating-tidy-data-1",
    "href": "slides/week-4/week-4-joins-1.html#creating-tidy-data-1",
    "title": "Data Joins + Pivots",
    "section": "Creating Tidy Data",
    "text": "Creating Tidy Data\nLet’s say we want to look at mean cereal nutrients based on shelf.\n\nCurrently, the data are in a wide format – a separate column for each nutrient.\nTransforming the data will make plotting easier."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#tidying-the-cereals-data",
    "href": "slides/week-4/week-4-joins-1.html#tidying-the-cereals-data",
    "title": "Data Joins + Pivots",
    "section": "Tidying the Cereals Data",
    "text": "Tidying the Cereals Data\n\nWideWide PlotLongLong Plot\n\n\n\n\n\nCode\ncereal_wide &lt;- cereal |&gt; \n  group_by(shelf) |&gt; \n  summarise(\n    across(.cols = calories:vitamins, \n           .fns = ~ mean(.x)\n           )\n    )\n\n\n\n\n\n\n\n\n\nshelf\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\n\n\n\n\n1\n102.5000\n2.650000\n0.60\n176.2500\n1.6850000\n15.80000\n4.800000\n75.50000\n20.00000\n\n\n2\n109.5238\n1.904762\n1.00\n145.7143\n0.9047619\n13.61905\n9.619048\n57.80952\n23.80952\n\n\n3\n107.7778\n2.861111\n1.25\n158.6111\n3.1388889\n14.50000\n6.527778\n129.83333\n35.41667\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmy_colors &lt;- c(\"calories_col\" = \"steelblue\", \"sugars_col\" = \"orange3\")\n\ncereal_wide |&gt; \n  ggplot() +\n  geom_point(mapping = aes(x = shelf, y = calories, color = \"calories_col\")) +\n  geom_line(mapping = aes(x = shelf, y = calories, color = \"calories_col\")) + \n  geom_point(mapping = aes(x = shelf, y = sugars, color = \"sugars_col\")) +\n  geom_line(mapping = aes(x = shelf, y = sugars, color = \"sugars_col\")) +\n  scale_color_manual(values = my_colors, labels = names(my_colors)) +\n  labs(x = \"Shelf\", y = \"\", subtitle = \"Mean Amount\", color = \"Nutrient\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncereal_long &lt;- cereal |&gt; \n  pivot_longer(cols = calories:vitamins,\n               names_to = \"Nutrient\",\n               values_to = \"Amount\") |&gt; \n  group_by(shelf, Nutrient) |&gt; \n  summarise(mean_amount = mean(Amount))\n\n\n\n\n\n\n\n\n\nshelf\nNutrient\nmean_amount\n\n\n\n\n1\ncalories\n102.5000000\n\n\n1\ncarbo\n15.8000000\n\n\n1\nfat\n0.6000000\n\n\n1\nfiber\n1.6850000\n\n\n1\npotass\n75.5000000\n\n\n1\nprotein\n2.6500000\n\n\n1\nsodium\n176.2500000\n\n\n1\nsugars\n4.8000000\n\n\n1\nvitamins\n20.0000000\n\n\n2\ncalories\n109.5238095\n\n\n2\ncarbo\n13.6190476\n\n\n2\nfat\n1.0000000\n\n\n2\nfiber\n0.9047619\n\n\n2\npotass\n57.8095238\n\n\n2\nprotein\n1.9047619\n\n\n2\nsodium\n145.7142857\n\n\n2\nsugars\n9.6190476\n\n\n2\nvitamins\n23.8095238\n\n\n3\ncalories\n107.7777778\n\n\n3\ncarbo\n14.5000000\n\n\n3\nfat\n1.2500000\n\n\n3\nfiber\n3.1388889\n\n\n3\npotass\n129.8333333\n\n\n3\nprotein\n2.8611111\n\n\n3\nsodium\n158.6111111\n\n\n3\nsugars\n6.5277778\n\n\n3\nvitamins\n35.4166667\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncereal_long |&gt; \n  ggplot(mapping = aes(x = shelf, \n                       y = mean_amount, \n                       color = Nutrient)\n         ) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Shelf\", \n       y = \"\", \n       subtitle = \"Mean Amount\")"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#manual-method",
    "href": "slides/week-4/week-4-joins-1.html#manual-method",
    "title": "Data Joins + Pivots",
    "section": "Manual Method",
    "text": "Manual Method\nConsider daily rainfall observed in SLO in January 2023.\n\nThe data is in a human-friendly form (like a calendar).\nEach week has a row, and each day has a column.\n\n\nData sourceHow would you manually convert this to long format?"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#manual-method-steps",
    "href": "slides/week-4/week-4-joins-1.html#manual-method-steps",
    "title": "Data Joins + Pivots",
    "section": "Manual Method: Steps",
    "text": "Manual Method: Steps\n\n\n\nKeep the column Week.\nCreate a new column Day_of_Week.\nCreate a new column Rainfall (hold daily rainfall values).\nNow we have three columns – move Sunday values over."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#manual-method-steps-1",
    "href": "slides/week-4/week-4-joins-1.html#manual-method-steps-1",
    "title": "Data Joins + Pivots",
    "section": "Manual Method: Steps",
    "text": "Manual Method: Steps\n\n\nKeep the column Week.\nCreate a new column Day_of_Week.\nCreate a new column Rainfall (hold daily rainfall values).\nNow we have three columns – move Sunday values over.\nDuplicate Week 1-5 and copy Monday values over."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#manual-method-steps-2",
    "href": "slides/week-4/week-4-joins-1.html#manual-method-steps-2",
    "title": "Data Joins + Pivots",
    "section": "Manual Method: Steps",
    "text": "Manual Method: Steps\n\n\nKeep the column Week.\nCreate a new column Day_of_Week.\nCreate a new column Rainfall (hold daily rainfall values).\nNow we have three columns – move Sunday values over.\nDuplicate Week 1-5 and copy Monday values over.\nDuplicate Week 1-5 and copy Tuesday values over."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#manual-method-steps-3",
    "href": "slides/week-4/week-4-joins-1.html#manual-method-steps-3",
    "title": "Data Joins + Pivots",
    "section": "Manual Method: Steps",
    "text": "Manual Method: Steps\n\n\nKeep the column Week.\nCreate a new column Day_of_Week.\nCreate a new column Rainfall (hold daily rainfall values).\nNow we have three columns – move Sunday values over.\nDuplicate Week 1-5 and copy Monday values over.\nDuplicate Week 1-5 and copy Tuesday values over.\nContinue for the rest of the days of the week."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#computational-approach",
    "href": "slides/week-4/week-4-joins-1.html#computational-approach",
    "title": "Data Joins + Pivots",
    "section": "Computational Approach",
    "text": "Computational Approach\n\nWe can use pivot_longer() to turn a wide dataset into a long(er) dataset."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pivot_longer",
    "href": "slides/week-4/week-4-joins-1.html#pivot_longer",
    "title": "Data Joins + Pivots",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nTake a wide dataset and turn it into a long dataset.\n\ncols – specify the columns that should be pivoted.\n\nDo not include the names of ID columns (columns to not be pivoted).\n\nnames_to – the name of the new column containing the old column names.\nvalues_to – the name of the new column containing the old column values."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pivot_longer-1",
    "href": "slides/week-4/week-4-joins-1.html#pivot_longer-1",
    "title": "Data Joins + Pivots",
    "section": "pivot_longer()",
    "text": "pivot_longer()\n\nslo_rainfall |&gt; \n  pivot_longer(cols = Sunday:Saturday,\n               names_to  = \"Day_of_Week\",\n               values_to = \"Daily_Rainfall\")\n\n\n\n\n\n\n\nWeek\nDay_of_Week\nDaily_Rainfall\n\n\n\n\n1\nSunday\n0.00\n\n\n1\nMonday\n0.12\n\n\n1\nTuesday\n0.00\n\n\n1\nWednesday\n1.58\n\n\n1\nThursday\n0.91\n\n\n1\nFriday\n0.00\n\n\n1\nSaturday\n0.05\n\n\n2\nSunday\n0.27\n\n\n2\nMonday\n4.26\n\n\n2\nTuesday\n0.43\n\n\n2\nWednesday\n0.00\n\n\n2\nThursday\n0.00\n\n\n2\nFriday\n0.16\n\n\n2\nSaturday\n1.41\n\n\n3\nSunday\n0.34\n\n\n3\nMonday\n0.33\n\n\n3\nTuesday\n0.00\n\n\n3\nWednesday\n0.00\n\n\n3\nThursday\n0.13\n\n\n3\nFriday\n0.00\n\n\n3\nSaturday\n0.00\n\n\n4\nSunday\n0.00\n\n\n4\nMonday\n0.00\n\n\n4\nTuesday\n0.00\n\n\n4\nWednesday\n0.00\n\n\n4\nThursday\n0.00\n\n\n4\nFriday\n0.00\n\n\n4\nSaturday\nNA\n\n\n5\nSunday\nNA\n\n\n5\nMonday\nNA\n\n\n5\nTuesday\nNA\n\n\n5\nWednesday\nNA\n\n\n5\nThursday\nNA\n\n\n5\nFriday\nNA\n\n\n5\nSaturday\nNA"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pivot_wider",
    "href": "slides/week-4/week-4-joins-1.html#pivot_wider",
    "title": "Data Joins + Pivots",
    "section": "pivot_wider()",
    "text": "pivot_wider()\nTake a long dataset and turn it into a wide dataset.\n\nid_cols – specify the column(s) that contain the ID for unique rows in the wide dataset.\nnames_from – the name of the column containing the new column names.\nvalues_from – the name of the column containing the new column values."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pivot_wider-1",
    "href": "slides/week-4/week-4-joins-1.html#pivot_wider-1",
    "title": "Data Joins + Pivots",
    "section": "pivot_wider()",
    "text": "pivot_wider()\nLet’s say we calculate the mean amount of protein for cereals on each shelf and for each manuf.\n\nmean_protein &lt;- cereal |&gt; \n  group_by(manuf, shelf) |&gt; \n  summarize(mean_protein = mean(protein))\n\n\n\n\n\n\n\nmanuf\nshelf\nmean_protein\n\n\n\n\nA\n2\n4.000000\n\n\nG\n1\n3.000000\n\n\nG\n2\n1.285714\n\n\nG\n3\n2.666667\n\n\nK\n1\n2.750000\n\n\nK\n2\n2.142857\n\n\nK\n3\n2.916667\n\n\nN\n1\n2.666667\n\n\nN\n2\n2.500000\n\n\nN\n3\n4.000000\n\n\nP\n1\n1.500000\n\n\nP\n2\n1.000000\n\n\nP\n3\n3.000000\n\n\nQ\n1\n5.000000\n\n\nQ\n2\n2.000000\n\n\nQ\n3\n2.500000\n\n\nR\n1\n2.000000\n\n\nR\n3\n3.000000"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pivot_wider-2",
    "href": "slides/week-4/week-4-joins-1.html#pivot_wider-2",
    "title": "Data Joins + Pivots",
    "section": "pivot_wider()",
    "text": "pivot_wider()\nWe can make this dataset more easily readable…\n\n\nmean_protein |&gt; \n  arrange(shelf) |&gt; \n  pivot_wider(id_cols = manuf,\n              names_from = shelf,\n              values_from = mean_protein)\n\n\n\n\n\n\n\nmanuf\n1\n2\n3\n\n\n\n\nG\n3.000000\n1.285714\n2.666667\n\n\nK\n2.750000\n2.142857\n2.916667\n\n\nN\n2.666667\n2.500000\n4.000000\n\n\nP\n1.500000\n1.000000\n3.000000\n\n\nQ\n5.000000\n2.000000\n2.500000\n\n\nR\n2.000000\nNA\n3.000000\n\n\nA\nNA\n4.000000\nNA"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#better-names-in-pivot_wider",
    "href": "slides/week-4/week-4-joins-1.html#better-names-in-pivot_wider",
    "title": "Data Joins + Pivots",
    "section": "Better names in pivot_wider()",
    "text": "Better names in pivot_wider()\n\nmean_protein |&gt; \n  arrange(shelf) |&gt; \n  pivot_wider(id_cols = manuf,\n              names_from = shelf,\n              values_from = mean_protein,\n              names_prefix = \"Shelf_\")\n\n\n\n\n\n\n\nmanuf\nShelf_1\nShelf_2\nShelf_3\n\n\n\n\nG\n3.000000\n1.285714\n2.666667\n\n\nK\n2.750000\n2.142857\n2.916667\n\n\nN\n2.666667\n2.500000\n4.000000\n\n\nP\n1.500000\n1.000000\n3.000000\n\n\nQ\n5.000000\n2.000000\n2.500000\n\n\nR\n2.000000\nNA\n3.000000\n\n\nA\nNA\n4.000000\nNA"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#relational-data",
    "href": "slides/week-4/week-4-joins-1.html#relational-data",
    "title": "Data Joins + Pivots",
    "section": "Relational Data",
    "text": "Relational Data\nMultiple, interconnected tables of data are called relational.\n\nIt is the relation between datasets, not just the individual datasets themselves, that are important.\n\n\nIMDb movie relational data"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#data-joins-1",
    "href": "slides/week-4/week-4-joins-1.html#data-joins-1",
    "title": "Data Joins + Pivots",
    "section": "Data Joins",
    "text": "Data Joins\nWe can combine (join) data tables based on their relations.\n\n\nMutating joins\nAdd variables from a new dataframe to observations in an existing dataframe.\nfull_join(), left_join(), right_join(), inner_join(), outer_join()\n\n\n\nFiltering Joins\nFilter observations based on values in new dataframe.\nsemi_join(), anti_join()"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#keys",
    "href": "slides/week-4/week-4-joins-1.html#keys",
    "title": "Data Joins + Pivots",
    "section": "Keys",
    "text": "Keys\nA key uniquely identifies an observation in a data set.\n\nTo combine (join) two datasets, the key needs to be present in both."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#inner_join",
    "href": "slides/week-4/week-4-joins-1.html#inner_join",
    "title": "Data Joins + Pivots",
    "section": "inner_join()",
    "text": "inner_join()\nKeeps observations when their keys are present in both datasets."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#inner_join-imdb-example",
    "href": "slides/week-4/week-4-joins-1.html#inner_join-imdb-example",
    "title": "Data Joins + Pivots",
    "section": "inner_join(): IMDb Example",
    "text": "inner_join(): IMDb Example\n\n\n\ndirectors_genres\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n429\nAdventure\n0.750000\n\n\n429\nFantasy\n0.750000\n\n\n2931\nDrama\n0.714286\n\n\n2931\nAction\n0.428571\n\n\n11652\nSci-Fi\n0.500000\n\n\n11652\nAction\n0.500000\n\n\n14927\nAnimation\n1.000000\n\n\n14927\nFamily\n1.000000\n\n\n15092\nComedy\n0.545455\n\n\n15092\nCrime\n0.545455\n\n\n\n\n\n\n\n\n\nmovies_directors\n\n\n\n\n\n\n\ndirector_id\nmovie_id\n\n\n\n\n429\n300229\n\n\n9247\n124110\n\n\n11652\n10920\n\n\n11652\n333856\n\n\n14927\n192017\n\n\n15092\n109093\n\n\n15092\n237431\n\n\n\n\n\n\n\n\n\nID: 429, 2931, 11652, 14927, 15092       ID: 429, 9247, 11652, 14927, 15092\n\n\n\ninner_join(directors_genres, movies_directors)\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\nmovie_id\n\n\n\n\n429\nAdventure\n0.750000\n300229\n\n\n429\nFantasy\n0.750000\n300229\n\n\n11652\nSci-Fi\n0.500000\n10920\n\n\n11652\nSci-Fi\n0.500000\n333856\n\n\n11652\nAction\n0.500000\n10920\n\n\n11652\nAction\n0.500000\n333856\n\n\n14927\nAnimation\n1.000000\n192017\n\n\n14927\nFamily\n1.000000\n192017\n\n\n15092\nComedy\n0.545455\n109093\n\n\n15092\nComedy\n0.545455\n237431\n\n\n15092\nCrime\n0.545455\n109093\n\n\n15092\nCrime\n0.545455\n237431\n\n\n\n\n\n\n\n\nID: 429, 2931, 9247, 11652, 14927, 15092"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#inner_join-imdb-example-1",
    "href": "slides/week-4/week-4-joins-1.html#inner_join-imdb-example-1",
    "title": "Data Joins + Pivots",
    "section": "inner_join(): IMDb Example",
    "text": "inner_join(): IMDb Example\nWhat if our key does not have the same name?\n\n\n\ndirectors_genres\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n429\nAdventure\n0.750000\n\n\n429\nFantasy\n0.750000\n\n\n2931\nDrama\n0.714286\n\n\n2931\nAction\n0.428571\n\n\n11652\nSci-Fi\n0.500000\n\n\n11652\nAction\n0.500000\n\n\n14927\nAnimation\n1.000000\n\n\n14927\nFamily\n1.000000\n\n\n15092\nComedy\n0.545455\n\n\n15092\nCrime\n0.545455\n\n\n\n\n\n\n\n\n\ndirectors\n\n\n\n\n\n\n\nid\nfirst_name\nlast_name\n\n\n\n\n429\nAndrew\nAdamson\n\n\n9247\nZach\nBraff\n\n\n11652\nJames (I)\nCameron\n\n\n14927\nRon\nClements\n\n\n15092\nEthan\nCoen\n\n\n\n\n\n\n\n\n\n\ninner_join(directors_genres, \n           directors, \n           by = join_by(director_id == id))\n\n\n\n\n\n\n\nid\nfirst_name\nlast_name\ngenre\nprob\n\n\n\n\n429\nAndrew\nAdamson\nAdventure\n0.750000\n\n\n429\nAndrew\nAdamson\nFantasy\n0.750000\n\n\n11652\nJames (I)\nCameron\nSci-Fi\n0.500000\n\n\n11652\nJames (I)\nCameron\nAction\n0.500000\n\n\n14927\nRon\nClements\nAnimation\n1.000000\n\n\n14927\nRon\nClements\nFamily\n1.000000\n\n\n15092\nEthan\nCoen\nComedy\n0.545455\n\n\n15092\nEthan\nCoen\nCrime\n0.545455"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#piping-joins",
    "href": "slides/week-4/week-4-joins-1.html#piping-joins",
    "title": "Data Joins + Pivots",
    "section": "Piping Joins",
    "text": "Piping Joins\nRemember: the dataset you pipe in becomes the first argument of the function you are piping into!\n\nSo if you are using a pipe, you will only be specifying the right dataset inside the join function.\n\n\n\ninner_join(directors_genres, movies_directors)\n\n…is equivalent to…\n\ndirectors_genres |&gt; \n  inner_join(movies_directors)"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#more-mutating-joins",
    "href": "slides/week-4/week-4-joins-1.html#more-mutating-joins",
    "title": "Data Joins + Pivots",
    "section": "More Mutating Joins",
    "text": "More Mutating Joins\n\n\nleft_join() – keep only (and all) observations present in the left data set\nright_join() – keep only (and all) observations present in the right data set\nfull_join() – keep only (and all) observations present in both data sets"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#more-mutating-joins-1",
    "href": "slides/week-4/week-4-joins-1.html#more-mutating-joins-1",
    "title": "Data Joins + Pivots",
    "section": "More Mutating Joins",
    "text": "More Mutating Joins\nWhich directors would remain for each of the following?\n\n\nleft_join(directors_genres, movies_directors)\nright_join(directors_genres, movies_directors)\nfull_join(directors_genres, movies_directors)\n\n\n\n\n\ndirectors_genres |&gt; \n  distinct(director_id)\n\n\n\n\n\n\n\ndirector_id\n\n\n\n\n429\n\n\n2931\n\n\n11652\n\n\n14927\n\n\n15092\n\n\n\n\n\n\n\n\n\nmovies_directors |&gt; \n  distinct(director_id)\n\n\n\n\n\n\n\ndirector_id\n\n\n\n\n429\n\n\n9247\n\n\n11652\n\n\n14927\n\n\n15092"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#filtering-joins-semi_join",
    "href": "slides/week-4/week-4-joins-1.html#filtering-joins-semi_join",
    "title": "Data Joins + Pivots",
    "section": "Filtering Joins: semi_join()",
    "text": "Filtering Joins: semi_join()\nKeeps observations when their keys are present in both datasets, but only keeps variables from the first dataset.\n\n\n\n\n\n\n→"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#filtering-joins-semi_join-1",
    "href": "slides/week-4/week-4-joins-1.html#filtering-joins-semi_join-1",
    "title": "Data Joins + Pivots",
    "section": "Filtering Joins: semi_join()",
    "text": "Filtering Joins: semi_join()\n\nsemi_join()Connection to filter()\n\n\n\ndirectors_genres |&gt; \n  semi_join(movies_directors)\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n429\nAdventure\n0.750000\n\n\n429\nFantasy\n0.750000\n\n\n11652\nSci-Fi\n0.500000\n\n\n11652\nAction\n0.500000\n\n\n14927\nAnimation\n1.000000\n\n\n14927\nFamily\n1.000000\n\n\n15092\nComedy\n0.545455\n\n\n15092\nCrime\n0.545455\n\n\n\n\n\n\n\nMovie Directors: 429, 2931, 11652, 14927, 15092\n\n\n\ndirectors_genres |&gt;\n  filter(director_id %in% movies_directors$director_id)\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n429\nAdventure\n0.750000\n\n\n429\nFantasy\n0.750000\n\n\n11652\nSci-Fi\n0.500000\n\n\n11652\nAction\n0.500000\n\n\n14927\nAnimation\n1.000000\n\n\n14927\nFamily\n1.000000\n\n\n15092\nComedy\n0.545455\n\n\n15092\nCrime\n0.545455"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#filtering-joins-anti_join",
    "href": "slides/week-4/week-4-joins-1.html#filtering-joins-anti_join",
    "title": "Data Joins + Pivots",
    "section": "Filtering Joins: anti_join()",
    "text": "Filtering Joins: anti_join()\nRemoves observations when their keys are present in both datasets, and only keeps variables from the first dataset.\n\n\n\n\n\n\n→"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#filtering-joins-anti_join-1",
    "href": "slides/week-4/week-4-joins-1.html#filtering-joins-anti_join-1",
    "title": "Data Joins + Pivots",
    "section": "Filtering Joins: anti_join()",
    "text": "Filtering Joins: anti_join()\n\nanti_join()Connection to filter()\n\n\n\ndirectors_genres |&gt; \n  anti_join(movies_directors)\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n2931\nDrama\n0.714286\n\n\n2931\nAction\n0.428571\n\n\n\n\n\n\n\nMovie Directors: 429, 2931, 11652, 14927, 15092\n\n\n\ndirectors_genres |&gt;\n  filter(!director_id %in% movies_directors$director_id)\n\n\n\n\n\n\n\ndirector_id\ngenre\nprob\n\n\n\n\n2931\nDrama\n0.714286\n\n\n2931\nAction\n0.428571"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pa-4-military-spending",
    "href": "slides/week-4/week-4-joins-1.html#pa-4-military-spending",
    "title": "Data Joins + Pivots",
    "section": "PA 4: Military Spending",
    "text": "PA 4: Military Spending\nToday you will be tidying messy data to explore the relationship between countries of the world and military spending."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#this-activity-will-require-knowledge-of",
    "href": "slides/week-4/week-4-joins-1.html#this-activity-will-require-knowledge-of",
    "title": "Data Joins + Pivots",
    "section": "This activity will require knowledge of:",
    "text": "This activity will require knowledge of:\n\n\n\n\nfunction documentation\nfunction arguments\nlocating missing values\ncharacter vectors\nkeys joining two datasets\nsearching / iterating over multiple columns\npivoting data from wide to long\ncreating side-by-side boxplots\nlocating the median on a boxplot\nestimating the variability from a boxplot\n\n\n\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#dplyr-resources",
    "href": "slides/week-4/week-4-joins-1.html#dplyr-resources",
    "title": "Data Joins + Pivots",
    "section": "dplyr Resources",
    "text": "dplyr Resources\n\n\nEveryone should have a dplyr cheatsheet!\nOn the Back: The Combine Tables section gives advice on joining two datasets\n\nThe “Filtering Join” section will be helpful when performing an anti_join()!"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#tidyr-resources",
    "href": "slides/week-4/week-4-joins-1.html#tidyr-resources",
    "title": "Data Joins + Pivots",
    "section": "tidyr Resources",
    "text": "tidyr Resources\n\n\nEveryone should have a tidyr cheatsheet!\nOn the Front: The Reshape Data section gives advice on pivoting a dataset from wide to long"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#task-card",
    "href": "slides/week-4/week-4-joins-1.html#task-card",
    "title": "Data Joins + Pivots",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\n\n\n\nOn the Front\n\nthe expectations of each role\nthe norms of collaborating\n\n\n\n\n\nOn the Back\n\ncode and pictures for performing an anti_join()\ncode and pictures for pivoting a dataset from wide to long\nguidelines for formatting dplyr and tidyr code"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#pair-programming-expectations",
    "href": "slides/week-4/week-4-joins-1.html#pair-programming-expectations",
    "title": "Data Joins + Pivots",
    "section": "Pair Programming Expectations",
    "text": "Pair Programming Expectations\n\n\nDeveloper\n\n\nReads prompt and ensures Coder understands what is being asked.\nTypes the code specified by the Coder into the Quarto document.\nRuns the code provided by the Coder.\nWorks with Coder to debug the code.\nEvaluates the output.\n\nWorks with Coder to write code comments.\n\n\n\n\n\n\nCoder\n\n\nReads out instructions or prompts\nDirects the Developer what to type.\nTalks with Developer about their ideas.\nManages resources (e.g., cheatsheets, textbook, slides).\nWorks with Developer to debug the code.\nWorks with Developer to write code comments."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#getting-started",
    "href": "slides/week-4/week-4-joins-1.html#getting-started",
    "title": "Data Joins + Pivots",
    "section": "Getting Started",
    "text": "Getting Started\n\nFirst, both of you will do the following:\n\n\n\n\n\nOpen the PA4-dplyr.qmd file\n\n\n\n\nThen, the partner who woke up the earliest today starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#external-resources",
    "href": "slides/week-4/week-4-joins-1.html#external-resources",
    "title": "Data Joins + Pivots",
    "section": "External Resources",
    "text": "External Resources\nDuring the Practice Activity, you are not permitted to use Google or ChatGPT for help.\n\n\nYou are permitted to use:\n\nthe dplyr cheatsheet,\nthe tidyr cheatsheet,\nthe course textbook, and\nthe course slides."
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#submission",
    "href": "slides/week-4/week-4-joins-1.html#submission",
    "title": "Data Joins + Pivots",
    "section": "Submission",
    "text": "Submission\n\nEach person will input your responses to Canvas Questions 1, 2, and 3 into the PA4 Canvas quiz.\nEach person will submit the PA-4.html file."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#monday-april-29",
    "href": "slides/week-5/week-5-strings.html#monday-april-29",
    "title": "Using stringr to Work with Strings",
    "section": "Monday, April 29",
    "text": "Monday, April 29\nToday we will…\n\nNew layout this week\nWhat you can expect in Week 6\nNew material\n\nString variables\nFunctions for working with strings\nRegular expressions\n\nPA 5.1: Scrambled Message"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#what-is-a-string",
    "href": "slides/week-5/week-5-strings.html#what-is-a-string",
    "title": "Using stringr to Work with Strings",
    "section": "What is a string?",
    "text": "What is a string?\nA string is a bunch of characters.\n\nThere is a difference between…\n\n…a string (many characters, one object)…\nand\n…a character vector (vector of strings).\n\n\n\n\nmy_string &lt;- \"Hi, my name is Bond!\"\nmy_string\n\n[1] \"Hi, my name is Bond!\"\n\n\n\n\n\nmy_vector &lt;- c(\"Hi\", \"my\", \"name\", \"is\", \"Bond\")\nmy_vector\n\n[1] \"Hi\"   \"my\"   \"name\" \"is\"   \"Bond\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#stringr",
    "href": "slides/week-5/week-5-strings.html#stringr",
    "title": "Using stringr to Work with Strings",
    "section": "stringr",
    "text": "stringr\n\n\nCommon tasks\n\nIdentify strings containing a particular pattern.\nRemove or replace a pattern.\nEdit a string (e.g., make it lowercase).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe stringr package loads with tidyverse.\nAll functions are of the form str_xxx()."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#pattern",
    "href": "slides/week-5/week-5-strings.html#pattern",
    "title": "Using stringr to Work with Strings",
    "section": "pattern =",
    "text": "pattern =\nThe pattern argument appears in many stringr functions.\n\nThe pattern must be supplied inside quotes.\n\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_detect(my_vector, pattern = \"Bond\")\nstr_locate(my_vector, pattern = \"James Bond\")\nstr_match(my_vector, pattern = \"[bB]ond\")\nstr_extract(my_vector, pattern = \"[jJ]ames [bB]ond\")\n\n\n\n\nLet’s explore these functions!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#str_detect",
    "href": "slides/week-5/week-5-strings.html#str_detect",
    "title": "Using stringr to Work with Strings",
    "section": "str_detect()",
    "text": "str_detect()\nReturns a logical vector indicating whether the pattern was found in each element of the supplied vector.\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\nstr_detect(my_vector, pattern = \"Bond\")\n\n[1] FALSE FALSE  TRUE  TRUE\n\n\n\n\n\n\nPairs well with filter().\nWorks with summarise() + sum (to get total matches) or mean (to get proportion of matches).\n\n\n\n\n\n\n\n\n\n\n\nRelated Function\n\n\nstr_which() returns the indexes of the strings that contain a match."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#str_match",
    "href": "slides/week-5/week-5-strings.html#str_match",
    "title": "Using stringr to Work with Strings",
    "section": "str_match()",
    "text": "str_match()\nReturns a character matrix containing either NA or the pattern, depending on if the pattern was found.\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_match(my_vector, pattern = \"Bond\")\n\n     [,1]  \n[1,] NA    \n[2,] NA    \n[3,] \"Bond\"\n[4,] \"Bond\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#str_extract",
    "href": "slides/week-5/week-5-strings.html#str_extract",
    "title": "Using stringr to Work with Strings",
    "section": "str_extract()",
    "text": "str_extract()\nReturns a character vector with either NA or the pattern, depending on if the pattern was found.\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_extract(my_vector, pattern = \"Bond\")\n\n[1] NA     NA     \"Bond\" \"Bond\"\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nstr_extract() only returns the first pattern match.\nUse str_extract_all() to return every pattern match."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#what-do-you-mean-by-the-first-match",
    "href": "slides/week-5/week-5-strings.html#what-do-you-mean-by-the-first-match",
    "title": "Using stringr to Work with Strings",
    "section": "What do you mean by the first match?",
    "text": "What do you mean by the first match?\nSuppose we had a slightly different vector…\n\nalt_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond, James Bond\")\n\n\nIf we were to extract every instance of \"Bond\" from the vector…\n\n\n\n\nstr_extract(alt_vector, \n            pattern = \"Bond\")\n\n[1] NA     NA     \"Bond\"\n\n\n\n\n\n\n\n\n\nstr_extract_all(alt_vector, \n                pattern = \"Bond\")\n\n[[1]]\ncharacter(0)\n\n[[2]]\ncharacter(0)\n\n[[3]]\n[1] \"Bond\" \"Bond\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#str_locate",
    "href": "slides/week-5/week-5-strings.html#str_locate",
    "title": "Using stringr to Work with Strings",
    "section": "str_locate()",
    "text": "str_locate()\nReturns a dateframe with two numeric variables – the starting and ending location of the pattern. The values are NA if the pattern is not found.\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_locate(my_vector, pattern = \"Bond\")\n\n     start end\n[1,]    NA  NA\n[2,]    NA  NA\n[3,]     1   4\n[4,]     7  10\n\n\n\n\n\n\n\n\n\n\n\nRelated Function\n\n\nstr_sub() extracts values based on a starting and ending location."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#str_subset",
    "href": "slides/week-5/week-5-strings.html#str_subset",
    "title": "Using stringr to Work with Strings",
    "section": "str_subset()",
    "text": "str_subset()\nReturns a character vector containing a subset of the original character vector consisting of the elements where the pattern was found.\n\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_subset(my_vector, pattern = \"Bond\")\n\n[1] \"Bond\"       \"James Bond\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#try-it-out",
    "href": "slides/week-5/week-5-strings.html#try-it-out",
    "title": "Using stringr to Work with Strings",
    "section": "Try it out!",
    "text": "Try it out!\n\n\nmy_vector &lt;- c(\"I scream,\", \n               \"you scream\", \n               \"we all\",\n               \"scream\",\n               \"for\",\n               \"ice cream\")\n\nstr_detect(my_vector, pattern = \"cream\")\nstr_locate(my_vector, pattern = \"cream\")\nstr_match(my_vector, pattern = \"cream\")\nstr_extract(my_vector, pattern = \"cream\")\nstr_subset(my_vector, pattern = \"cream\")\n\n\n\n\n\n\n\nNote\n\n\nFor each of these functions, write down:\n\nthe object structure of the output.\nthe data type of the output.\na brief explanation of what they do."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#replace-remove-patterns",
    "href": "slides/week-5/week-5-strings.html#replace-remove-patterns",
    "title": "Using stringr to Work with Strings",
    "section": "Replace / Remove Patterns",
    "text": "Replace / Remove Patterns\n\nstr_replace()str_remove()\n\n\n\nReplace the first matched pattern in each string.\n\nPairs well with mutate().\n\n\nstr_replace(my_vector, \n            pattern = \"Bond\", \n            replace = \"Franco\")\n\n[1] \"Hello,\"       \"my name is\"   \"Franco\"       \"James Franco\"\n\n\n\n\n\n\n\n\n\n\n\nRelated Function\n\n\nstr_replace_all() replaces all matched patterns in each string.\n\n\n\n\n\n\n\nRemove the first matched pattern in each string.\n\nstr_remove(my_vector, \n           pattern = \"Bond\")\n\n[1] \"Hello,\"     \"my name is\" \"\"           \"James \"    \n\n\n\n\n\n\n\n\n\n\n\nRelated Functions\n\n\nThis is a special case of str_replace(x, pattern, replacement = \"\").\nstr_remove_all() removes all matched patterns in each string."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#edit-strings",
    "href": "slides/week-5/week-5-strings.html#edit-strings",
    "title": "Using stringr to Work with Strings",
    "section": "Edit Strings",
    "text": "Edit Strings\nConvert letters in a string to a specific capitalization format.\n\nlowerUPPERTitle\n\n\nstr_to_lower() converts all letters in a string to lowercase.\n\n\nstr_to_lower(my_vector)\n\n[1] \"hello,\"     \"my name is\" \"bond\"       \"james bond\"\n\n\n\n\nstr_to_upper() converts all letters in a string to uppercase.\n\n\nstr_to_upper(my_vector)\n\n[1] \"HELLO,\"     \"MY NAME IS\" \"BOND\"       \"JAMES BOND\"\n\n\n\n\nstr_to_title() converts the first letter of each word to uppercase.\n\n\nstr_to_title(my_vector)\n\n[1] \"Hello,\"     \"My Name Is\" \"Bond\"       \"James Bond\"\n\n\n\n\n\n\n\n\nThis is handy for axis labels!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#combine-strings",
    "href": "slides/week-5/week-5-strings.html#combine-strings",
    "title": "Using stringr to Work with Strings",
    "section": "Combine Strings",
    "text": "Combine Strings\n\nstr_c()str_flatten()str_glue()\n\n\nJoin multiple strings into a single character vector.\n\nprompt &lt;- \"Hello, my name is\"\nfirst  &lt;- \"James\"\nlast   &lt;- \"Bond\"\nstr_c(prompt, last, \",\", first, last, sep = \" \")\n\n[1] \"Hello, my name is Bond , James Bond\"\n\n\n\n\n\n\n\n\nNote\n\n\nSimilar to paste() and paste0().\n\n\n\n\n\nCombine a vector of strings into a single string.\n\nmy_vector &lt;- c(\"Hello,\", \n               \"my name is\", \n               \"Bond\", \n               \"James Bond\")\n\nstr_flatten(my_vector, collapse = \" \")\n\n[1] \"Hello, my name is Bond James Bond\"\n\n\n\n\nUse variables in the environment to create a string based on {expressions}.\n\nfirst &lt;- \"James\"\nlast &lt;- \"Bond\"\nstr_glue(\"My name is {last}, {first} {last}\")\n\nMy name is Bond, James Bond\n\n\n\n\n\n\n\n\nTip\n\n\nFor more details, I would recommend looking up the glue R package!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#tips-for-string-success",
    "href": "slides/week-5/week-5-strings.html#tips-for-string-success",
    "title": "Using stringr to Work with Strings",
    "section": "Tips for String Success",
    "text": "Tips for String Success\n\nRefer to the stringr cheatsheet\nRemember that str_xxx functions need the first argument to be a vector of strings, not a dataset!\n\nYou will use these functions inside dplyr verbs like filter() or mutate().\n\n\n\ncereal |&gt; \n  mutate(is_bran = str_detect(name, \"Bran\"), \n         .after = name)\n\n\n\n\n\n\n\nname\nis_bran\nmanuf\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n100% Bran\nTRUE\nN\ncold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.00\n0.33\n68.40297\n\n\n100% Natural Bran\nTRUE\nQ\ncold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.00\n1.00\n33.98368\n\n\nAll-Bran\nTRUE\nK\ncold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.00\n0.33\n59.42551\n\n\nAll-Bran with Extra Fiber\nTRUE\nK\ncold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.00\n0.50\n93.70491\n\n\nAlmond Delight\nFALSE\nR\ncold\n110\n2\n2\n200\n1.0\n14.0\n8\n-1\n25\n3\n1.00\n0.75\n34.38484\n\n\nApple Cinnamon Cheerios\nFALSE\nG\ncold\n110\n2\n2\n180\n1.5\n10.5\n10\n70\n25\n1\n1.00\n0.75\n29.50954\n\n\nApple Jacks\nFALSE\nK\ncold\n110\n2\n0\n125\n1.0\n11.0\n14\n30\n25\n2\n1.00\n1.00\n33.17409\n\n\nBasic 4\nFALSE\nG\ncold\n130\n3\n2\n210\n2.0\n18.0\n8\n100\n25\n3\n1.33\n0.75\n37.03856\n\n\nBran Chex\nTRUE\nR\ncold\n90\n2\n1\n200\n4.0\n15.0\n6\n125\n25\n1\n1.00\n0.67\n49.12025\n\n\nBran Flakes\nTRUE\nP\ncold\n90\n3\n0\n210\n5.0\n13.0\n5\n190\n25\n3\n1.00\n0.67\n53.31381\n\n\nCap'n'Crunch\nFALSE\nQ\ncold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.00\n0.75\n18.04285\n\n\nCheerios\nFALSE\nG\ncold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.00\n1.25\n50.76500\n\n\nCinnamon Toast Crunch\nFALSE\nG\ncold\n120\n1\n3\n210\n0.0\n13.0\n9\n45\n25\n2\n1.00\n0.75\n19.82357\n\n\nClusters\nFALSE\nG\ncold\n110\n3\n2\n140\n2.0\n13.0\n7\n105\n25\n3\n1.00\n0.50\n40.40021\n\n\nCocoa Puffs\nFALSE\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n55\n25\n2\n1.00\n1.00\n22.73645\n\n\nCorn Chex\nFALSE\nR\ncold\n110\n2\n0\n280\n0.0\n22.0\n3\n25\n25\n1\n1.00\n1.00\n41.44502\n\n\nCorn Flakes\nFALSE\nK\ncold\n100\n2\n0\n290\n1.0\n21.0\n2\n35\n25\n1\n1.00\n1.00\n45.86332\n\n\nCorn Pops\nFALSE\nK\ncold\n110\n1\n0\n90\n1.0\n13.0\n12\n20\n25\n2\n1.00\n1.00\n35.78279\n\n\nCount Chocula\nFALSE\nG\ncold\n110\n1\n1\n180\n0.0\n12.0\n13\n65\n25\n2\n1.00\n1.00\n22.39651\n\n\nCracklin' Oat Bran\nTRUE\nK\ncold\n110\n3\n3\n140\n4.0\n10.0\n7\n160\n25\n3\n1.00\n0.50\n40.44877\n\n\nCream of Wheat (Quick)\nFALSE\nN\nhot\n100\n3\n0\n80\n1.0\n21.0\n0\n-1\n0\n2\n1.00\n1.00\n64.53382\n\n\nCrispix\nFALSE\nK\ncold\n110\n2\n0\n220\n1.0\n21.0\n3\n30\n25\n3\n1.00\n1.00\n46.89564\n\n\nCrispy Wheat & Raisins\nFALSE\nG\ncold\n100\n2\n1\n140\n2.0\n11.0\n10\n120\n25\n3\n1.00\n0.75\n36.17620\n\n\nDouble Chex\nFALSE\nR\ncold\n100\n2\n0\n190\n1.0\n18.0\n5\n80\n25\n3\n1.00\n0.75\n44.33086\n\n\nFroot Loops\nFALSE\nK\ncold\n110\n2\n1\n125\n1.0\n11.0\n13\n30\n25\n2\n1.00\n1.00\n32.20758\n\n\nFrosted Flakes\nFALSE\nK\ncold\n110\n1\n0\n200\n1.0\n14.0\n11\n25\n25\n1\n1.00\n0.75\n31.43597\n\n\nFrosted Mini-Wheats\nFALSE\nK\ncold\n100\n3\n0\n0\n3.0\n14.0\n7\n100\n25\n2\n1.00\n0.80\n58.34514\n\n\nFruit & Fibre Dates; Walnuts; and Oats\nFALSE\nP\ncold\n120\n3\n2\n160\n5.0\n12.0\n10\n200\n25\n3\n1.25\n0.67\n40.91705\n\n\nFruitful Bran\nTRUE\nK\ncold\n120\n3\n0\n240\n5.0\n14.0\n12\n190\n25\n3\n1.33\n0.67\n41.01549\n\n\nFruity Pebbles\nFALSE\nP\ncold\n110\n1\n1\n135\n0.0\n13.0\n12\n25\n25\n2\n1.00\n0.75\n28.02576\n\n\nGolden Crisp\nFALSE\nP\ncold\n100\n2\n0\n45\n0.0\n11.0\n15\n40\n25\n1\n1.00\n0.88\n35.25244\n\n\nGolden Grahams\nFALSE\nG\ncold\n110\n1\n1\n280\n0.0\n15.0\n9\n45\n25\n2\n1.00\n0.75\n23.80404\n\n\nGrape Nuts Flakes\nFALSE\nP\ncold\n100\n3\n1\n140\n3.0\n15.0\n5\n85\n25\n3\n1.00\n0.88\n52.07690\n\n\nGrape-Nuts\nFALSE\nP\ncold\n110\n3\n0\n170\n3.0\n17.0\n3\n90\n25\n3\n1.00\n0.25\n53.37101\n\n\nGreat Grains Pecan\nFALSE\nP\ncold\n120\n3\n3\n75\n3.0\n13.0\n4\n100\n25\n3\n1.00\n0.33\n45.81172\n\n\nHoney Graham Ohs\nFALSE\nQ\ncold\n120\n1\n2\n220\n1.0\n12.0\n11\n45\n25\n2\n1.00\n1.00\n21.87129\n\n\nHoney Nut Cheerios\nFALSE\nG\ncold\n110\n3\n1\n250\n1.5\n11.5\n10\n90\n25\n1\n1.00\n0.75\n31.07222\n\n\nHoney-comb\nFALSE\nP\ncold\n110\n1\n0\n180\n0.0\n14.0\n11\n35\n25\n1\n1.00\n1.33\n28.74241\n\n\nJust Right Crunchy Nuggets\nFALSE\nK\ncold\n110\n2\n1\n170\n1.0\n17.0\n6\n60\n100\n3\n1.00\n1.00\n36.52368\n\n\nJust Right Fruit & Nut\nFALSE\nK\ncold\n140\n3\n1\n170\n2.0\n20.0\n9\n95\n100\n3\n1.30\n0.75\n36.47151\n\n\nKix\nFALSE\nG\ncold\n110\n2\n1\n260\n0.0\n21.0\n3\n40\n25\n2\n1.00\n1.50\n39.24111\n\n\nLife\nFALSE\nQ\ncold\n100\n4\n2\n150\n2.0\n12.0\n6\n95\n25\n2\n1.00\n0.67\n45.32807\n\n\nLucky Charms\nFALSE\nG\ncold\n110\n2\n1\n180\n0.0\n12.0\n12\n55\n25\n2\n1.00\n1.00\n26.73451\n\n\nMaypo\nFALSE\nA\nhot\n100\n4\n1\n0\n0.0\n16.0\n3\n95\n25\n2\n1.00\n1.00\n54.85092\n\n\nMuesli Raisins; Dates; & Almonds\nFALSE\nR\ncold\n150\n4\n3\n95\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n37.13686\n\n\nMuesli Raisins; Peaches; & Pecans\nFALSE\nR\ncold\n150\n4\n3\n150\n3.0\n16.0\n11\n170\n25\n3\n1.00\n1.00\n34.13976\n\n\nMueslix Crispy Blend\nFALSE\nK\ncold\n160\n3\n2\n150\n3.0\n17.0\n13\n160\n25\n3\n1.50\n0.67\n30.31335\n\n\nMulti-Grain Cheerios\nFALSE\nG\ncold\n100\n2\n1\n220\n2.0\n15.0\n6\n90\n25\n1\n1.00\n1.00\n40.10596\n\n\nNut&Honey Crunch\nFALSE\nK\ncold\n120\n2\n1\n190\n0.0\n15.0\n9\n40\n25\n2\n1.00\n0.67\n29.92429\n\n\nNutri-Grain Almond-Raisin\nFALSE\nK\ncold\n140\n3\n2\n220\n3.0\n21.0\n7\n130\n25\n3\n1.33\n0.67\n40.69232\n\n\nNutri-grain Wheat\nFALSE\nK\ncold\n90\n3\n0\n170\n3.0\n18.0\n2\n90\n25\n3\n1.00\n1.00\n59.64284\n\n\nOatmeal Raisin Crisp\nFALSE\nG\ncold\n130\n3\n2\n170\n1.5\n13.5\n10\n120\n25\n3\n1.25\n0.50\n30.45084\n\n\nPost Nat. Raisin Bran\nTRUE\nP\ncold\n120\n3\n1\n200\n6.0\n11.0\n14\n260\n25\n3\n1.33\n0.67\n37.84059\n\n\nProduct 19\nFALSE\nK\ncold\n100\n3\n0\n320\n1.0\n20.0\n3\n45\n100\n3\n1.00\n1.00\n41.50354\n\n\nPuffed Rice\nFALSE\nQ\ncold\n50\n1\n0\n0\n0.0\n13.0\n0\n15\n0\n3\n0.50\n1.00\n60.75611\n\n\nPuffed Wheat\nFALSE\nQ\ncold\n50\n2\n0\n0\n1.0\n10.0\n0\n50\n0\n3\n0.50\n1.00\n63.00565\n\n\nQuaker Oat Squares\nFALSE\nQ\ncold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.00\n0.50\n49.51187\n\n\nQuaker Oatmeal\nFALSE\nQ\nhot\n100\n5\n2\n0\n2.7\n-1.0\n-1\n110\n0\n1\n1.00\n0.67\n50.82839\n\n\nRaisin Bran\nTRUE\nK\ncold\n120\n3\n1\n210\n5.0\n14.0\n12\n240\n25\n2\n1.33\n0.75\n39.25920\n\n\nRaisin Nut Bran\nTRUE\nG\ncold\n100\n3\n2\n140\n2.5\n10.5\n8\n140\n25\n3\n1.00\n0.50\n39.70340\n\n\nRaisin Squares\nFALSE\nK\ncold\n90\n2\n0\n0\n2.0\n15.0\n6\n110\n25\n3\n1.00\n0.50\n55.33314\n\n\nRice Chex\nFALSE\nR\ncold\n110\n1\n0\n240\n0.0\n23.0\n2\n30\n25\n1\n1.00\n1.13\n41.99893\n\n\nRice Krispies\nFALSE\nK\ncold\n110\n2\n0\n290\n0.0\n22.0\n3\n35\n25\n1\n1.00\n1.00\n40.56016\n\n\nShredded Wheat\nFALSE\nN\ncold\n80\n2\n0\n0\n3.0\n16.0\n0\n95\n0\n1\n0.83\n1.00\n68.23588\n\n\nShredded Wheat 'n'Bran\nTRUE\nN\ncold\n90\n3\n0\n0\n4.0\n19.0\n0\n140\n0\n1\n1.00\n0.67\n74.47295\n\n\nShredded Wheat spoon size\nFALSE\nN\ncold\n90\n3\n0\n0\n3.0\n20.0\n0\n120\n0\n1\n1.00\n0.67\n72.80179\n\n\nSmacks\nFALSE\nK\ncold\n110\n2\n1\n70\n1.0\n9.0\n15\n40\n25\n2\n1.00\n0.75\n31.23005\n\n\nSpecial K\nFALSE\nK\ncold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.00\n1.00\n53.13132\n\n\nStrawberry Fruit Wheats\nFALSE\nN\ncold\n90\n2\n0\n15\n3.0\n15.0\n5\n90\n25\n2\n1.00\n1.00\n59.36399\n\n\nTotal Corn Flakes\nFALSE\nG\ncold\n110\n2\n1\n200\n0.0\n21.0\n3\n35\n100\n3\n1.00\n1.00\n38.83975\n\n\nTotal Raisin Bran\nTRUE\nG\ncold\n140\n3\n1\n190\n4.0\n15.0\n14\n230\n100\n3\n1.50\n1.00\n28.59278\n\n\nTotal Whole Grain\nFALSE\nG\ncold\n100\n3\n1\n200\n3.0\n16.0\n3\n110\n100\n3\n1.00\n1.00\n46.65884\n\n\nTriples\nFALSE\nG\ncold\n110\n2\n1\n250\n0.0\n21.0\n3\n60\n25\n3\n1.00\n0.75\n39.10617\n\n\nTrix\nFALSE\nG\ncold\n110\n1\n1\n140\n0.0\n13.0\n12\n25\n25\n2\n1.00\n1.00\n27.75330\n\n\nWheat Chex\nFALSE\nR\ncold\n100\n3\n1\n230\n3.0\n17.0\n3\n115\n25\n1\n1.00\n0.67\n49.78744\n\n\nWheaties\nFALSE\nG\ncold\n100\n3\n1\n200\n3.0\n17.0\n3\n110\n25\n1\n1.00\n1.00\n51.59219\n\n\nWheaties Honey Gold\nFALSE\nG\ncold\n110\n2\n1\n200\n1.0\n16.0\n8\n60\n25\n1\n1.00\n0.75\n36.18756"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#tips-for-string-success-1",
    "href": "slides/week-5/week-5-strings.html#tips-for-string-success-1",
    "title": "Using stringr to Work with Strings",
    "section": "Tips for String Success",
    "text": "Tips for String Success\nThe real power of these str_xxx functions comes when you specify the pattern using regular expressions!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#regular-expressions",
    "href": "slides/week-5/week-5-strings.html#regular-expressions",
    "title": "Using stringr to Work with Strings",
    "section": "Regular Expressions",
    "text": "Regular Expressions\n\n“Regexps are a very terse language that allow you to describe patterns in strings.”\nR for Data Science\n\n\nUse str_xxx functions + regular expressions!\n\nstr_detect(string  = my_string_vector,\n           pattern = \"p[ei]ck[a-z]\")\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou might encounter gsub(), grep(), etc. from Base R, but I would highly recommending using functions from the stringr package instead."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#regular-expressions-1",
    "href": "slides/week-5/week-5-strings.html#regular-expressions-1",
    "title": "Using stringr to Work with Strings",
    "section": "Regular Expressions",
    "text": "Regular Expressions\n…are tricky!\n\nThere are lots of new symbols to keep straight.\nThere are a lot of cases to think through.\n\n\nThis web app for testing R regular expressions might be handy!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#special-characters",
    "href": "slides/week-5/week-5-strings.html#special-characters",
    "title": "Using stringr to Work with Strings",
    "section": "Special Characters",
    "text": "Special Characters\nThere is a set of characters that have a specific meaning when using regex.\n\nThe stringr package does not read these as normal characters.\nThese characters are:\n\n\n. ^ $ \\ | * + ? { } [ ] ( )"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#wild-card-character-.",
    "href": "slides/week-5/week-5-strings.html#wild-card-character-.",
    "title": "Using stringr to Work with Strings",
    "section": "Wild Card Character: .",
    "text": "Wild Card Character: .\nThis character can match any character.\n\nx &lt;- c(\"She\", \n       \"sells\", \n       \"seashells\", \n       \"by\", \n       \"the\", \n       \"seashore!\")\n\nstr_subset(x, pattern = \".ells\")\n\n[1] \"sells\"     \"seashells\"\n\n\n\nThis matches strings that contain any character followed by “ells”."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#anchor-characters",
    "href": "slides/week-5/week-5-strings.html#anchor-characters",
    "title": "Using stringr to Work with Strings",
    "section": "Anchor Characters: ^ $",
    "text": "Anchor Characters: ^ $\n\n\n\n^ – looks at the beginning of a string.\n\nx &lt;- c(\"She\", \n       \"sells\", \n       \"seashells\", \n       \"by\", \n       \"the\", \n       \"seashore!\")\n\nstr_subset(x, pattern = \"^s\")\n\n[1] \"sells\"     \"seashells\" \"seashore!\"\n\n\nThis matches strings that start with “s”.\n\n\n\n\n\n\n$ – looks at the end of a string.\n\nx &lt;- c(\"She\", \n       \"sells\", \n       \"seashells\", \n       \"by\", \n       \"the\", \n       \"seashore!\")\n\nstr_subset(x, pattern = \"s$\")\n\n[1] \"sells\"     \"seashells\"\n\n\nThis matches strings that end with “s”."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#quantifier-characters",
    "href": "slides/week-5/week-5-strings.html#quantifier-characters",
    "title": "Using stringr to Work with Strings",
    "section": "Quantifier Characters: ? + *",
    "text": "Quantifier Characters: ? + *\n\n? – matches when the preceding character occurs 0 or 1 times in a row.\n\nx &lt;- c(\"shes\", \n       \"shels\", \n       \"shells\", \n       \"shellls\", \n       \"shelllls\")\n\nstr_subset(x, pattern = \"shel?s\")\n\n[1] \"shes\"  \"shels\"\n\n\n\n\n\n+ – occurs 1 or more times in a row.\n\nstr_subset(x, pattern = \"shel+s\")\n\n[1] \"shels\"    \"shells\"   \"shellls\"  \"shelllls\"\n\n\n\n\n\n\n* – occurs 0 or more times in a row.\n\nstr_subset(x, pattern = \"shel*s\")\n\n[1] \"shes\"     \"shels\"    \"shells\"   \"shellls\"  \"shelllls\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#quantifier-characters-1",
    "href": "slides/week-5/week-5-strings.html#quantifier-characters-1",
    "title": "Using stringr to Work with Strings",
    "section": "Quantifier Characters: {}",
    "text": "Quantifier Characters: {}\n\n{n} – matches when the preceding character occurs exactly n times in a row.\n\nx &lt;- c(\"shes\", \n       \"shels\", \n       \"shells\", \n       \"shellls\", \n       \"shelllls\")\n\nstr_subset(x, pattern = \"shel{2}s\")\n\n[1] \"shells\"\n\n\n\n\n\n{n,} – occurs at least n times in a row.\n\nstr_subset(x, pattern = \"shel{2,}s\")\n\n[1] \"shells\"   \"shellls\"  \"shelllls\"\n\n\n\n\n\n\n{n,m} – occurs between n and m times in a row.\n\nstr_subset(x, pattern = \"shel{1,3}s\")\n\n[1] \"shels\"   \"shells\"  \"shellls\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#character-groups",
    "href": "slides/week-5/week-5-strings.html#character-groups",
    "title": "Using stringr to Work with Strings",
    "section": "Character Groups: ()",
    "text": "Character Groups: ()\n\nGroups are created with ( ).\n\nWe can specify “either” / “or” within a group using |.\n\n\nx &lt;- c(\"Peter\", \n       \"Piper\", \n       \"picked\", \n       \"a\", \n       \"peck\",\n       \"of\", \n       \"pickled\",\n       \"peppers!\")\n\nstr_subset(x, pattern = \"p(e|i)ck\")\n\n[1] \"picked\"  \"peck\"    \"pickled\"\n\n\n\n\n\nThis matches strings that contain either “peck” or “pick”."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#character-classes",
    "href": "slides/week-5/week-5-strings.html#character-classes",
    "title": "Using stringr to Work with Strings",
    "section": "Character Classes: []",
    "text": "Character Classes: []\n\nCharacter classes let you specify multiple possible characters to match on.\n\nx &lt;- c(\"Peter\", \n       \"Piper\", \n       \"picked\", \n       \"a\",\n       \"peck\",\n       \"of\",\n       \"pickled\",\n       \"peppers!\")\n\nstr_subset(x, pattern = \"p[ei]ck\")\n\n[1] \"picked\"  \"peck\"    \"pickled\"\n\n\n\n\n\n\n\n\n\n\nWhy use [] instead of ()?\n\n\n() is better for making groups of characters, plus you can only use a | with ().\n[] is better for referencing multiple characters, plus you can only use a ^ with []…"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#matches-you-dont-want",
    "href": "slides/week-5/week-5-strings.html#matches-you-dont-want",
    "title": "Using stringr to Work with Strings",
    "section": "Matches you don’t want",
    "text": "Matches you don’t want\n[^ ] – specifies characters not to match on (think except)\n\nstr_subset(x, pattern = \"p[^i]ck\")\n\n[1] \"peck\"\n\n\n\n\n\nstr_subset(x, pattern = \"^p\")\n\n[1] \"picked\"   \"peck\"     \"pickled\"  \"peppers!\"\n\n\n\n\n\n\nstr_subset(x, pattern = \"^[^p]\")\n\n[1] \"Peter\" \"Piper\" \"a\"     \"of\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#character-classes-1",
    "href": "slides/week-5/week-5-strings.html#character-classes-1",
    "title": "Using stringr to Work with Strings",
    "section": "Character Classes: []",
    "text": "Character Classes: []\n\n[ - ] – specifies a range of characters.\n\nx &lt;- c(\"Peter\", \n       \"Piper\", \n       \"picked\", \n       \"a\",\n       \"peck\",\n       \"of\",\n       \"pickled\",\n       \"peppers!\")\n\nstr_subset(x, pattern = \"p[ei]ck[a-z]\")\n\n[1] \"picked\"  \"pickled\"\n\n\n\n\n\n\n[A-Z] matches any capital letter.\n[a-z] matches any lowercase letter.\n[A-z] or [:alpha:] matches any letter\n[0-9] or [:digit:] matches any number"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#shortcuts",
    "href": "slides/week-5/week-5-strings.html#shortcuts",
    "title": "Using stringr to Work with Strings",
    "section": "Shortcuts",
    "text": "Shortcuts\n\n\n\\\\w – matches any “word” (\\\\W matches not “word”)\n\nA “word” contains any letters and numbers.\n\n\\\\d – matches any digit (\\\\D matches not digit)\n\\\\s – matches any whitespace (\\\\S matches not whitespace)\n\nWhitespace includes spaces, tabs, newlines, etc.\n\n\n\n\n\n\n\nx &lt;- \"phone number: 1234567899\"\n\nstr_extract(x, pattern = \"\\\\d+\")\n\n[1] \"1234567899\"\n\nstr_extract_all(x, pattern = \"\\\\S+\")\n\n[[1]]\n[1] \"phone\"      \"number:\"    \"1234567899\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#try-it-out-1",
    "href": "slides/week-5/week-5-strings.html#try-it-out-1",
    "title": "Using stringr to Work with Strings",
    "section": "Try it out!",
    "text": "Try it out!\nWhat regular expressions would match words that…\n\n\n\nend with a vowel?\nstart with x, y, or z?\ndo not contain x, y, or z?\ncontain British spelling?\n\n\n\n\n\nx &lt;- c(\"zebra\", \n       \"xray\", \n       \"apple\", \n       \"yellow\",\n       \"color\", \n       \"colour\",\n       \"summarize\",\n       \"summarise\")"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#some-possible-solutions",
    "href": "slides/week-5/week-5-strings.html#some-possible-solutions",
    "title": "Using stringr to Work with Strings",
    "section": "Some Possible Solutions…",
    "text": "Some Possible Solutions…\n\nend with a vowel?\n\n\nstr_subset(x, \"[aeiouy]$\")\n\n\nstart with x, y, or z?\n\n\nstr_subset(x, \"^[xyz]\")\n\n\ndo not contain x, y, or z?\n\n\nstr_subset(x, \"[^xyz]\")\n\n\ncontain British spelling?\n\n\nstr_subset(x, \"(our)|(i[sz]e)\")"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#escape",
    "href": "slides/week-5/week-5-strings.html#escape",
    "title": "Using stringr to Work with Strings",
    "section": "Escape: \\\\",
    "text": "Escape: \\\\\n\nTo match a special character, you need to escape it.\n\nx &lt;- c(\"How\",\n       \"much\", \n       \"wood\",\n       \"could\",\n       \"a\",\n       \"woodchuck\",\n       \"chuck\",\n       \"if\",\n       \"a\",\n       \"woodchuck\",\n       \"could\",\n       \"chuck\",\n       \"wood?\")\n\nstr_subset(x, pattern = \"?\")\n\nError in stri_subset_regex(string, pattern, omit_na = TRUE, negate = negate, : Syntax error in regex pattern. (U_REGEX_RULE_SYNTAX, context=`?`)"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#escape-1",
    "href": "slides/week-5/week-5-strings.html#escape-1",
    "title": "Using stringr to Work with Strings",
    "section": "Escape: \\\\",
    "text": "Escape: \\\\\nUse \\\\ to escape the ? – it is now read as a normal character.\n\nstr_subset(x, pattern = \"\\\\?\")\n\n[1] \"wood?\"\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAlternatively, you could use []:\n\nstr_subset(x, pattern = \"[?]\")\n\n[1] \"wood?\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#when-in-doubt",
    "href": "slides/week-5/week-5-strings.html#when-in-doubt",
    "title": "Using stringr to Work with Strings",
    "section": "When in Doubt",
    "text": "When in Doubt\n\n\nUse the web app to test R regular expressions."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#tips-for-working-with-regex",
    "href": "slides/week-5/week-5-strings.html#tips-for-working-with-regex",
    "title": "Using stringr to Work with Strings",
    "section": "Tips for working with regex",
    "text": "Tips for working with regex\n\nRead the regular expressions out loud like a request.\n\n\n\nTest out your expressions on small examples first.\n\n\n\n\n\n\n\nstr_view()\n\n\n\nstr_view(c(\"shes\", \"shels\", \"shells\", \"shellls\", \"shelllls\"), \"l+\")\n\n[2] │ she&lt;l&gt;s\n[3] │ she&lt;ll&gt;s\n[4] │ she&lt;lll&gt;s\n[5] │ she&lt;llll&gt;s\n\n\n\n\n\n\n\n\nUse the stringr cheatsheet.\n\n\n\n\nBe kind to yourself!"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#this-activity-will-require-knowledge-of",
    "href": "slides/week-5/week-5-strings.html#this-activity-will-require-knowledge-of",
    "title": "Using stringr to Work with Strings",
    "section": "This activity will require knowledge of:",
    "text": "This activity will require knowledge of:\n\n\n\n\nindexing vectors\nstringr functions for previewing string contents\nregular expressions for locating patterns\nstringr functions for removing whitespace\nstringr functions for truncating strings\nstringr functions for replacing patterns\nstringr functions for combining multiple strings\n\n\n\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#a-refresher-on-indexing-vectors-with",
    "href": "slides/week-5/week-5-strings.html#a-refresher-on-indexing-vectors-with",
    "title": "Using stringr to Work with Strings",
    "section": "A Refresher on Indexing Vectors with []",
    "text": "A Refresher on Indexing Vectors with []\n\nx &lt;- c(\"She\",\n       \"sells\",\n       \"seashells\",\n       \"by\", \n       \"the\",\n       \"seashore!\")\n\n\n\n\n\nGrab elements out of a vector with indices.\n\n\nx[c(1, 4, 5)]\n\n[1] \"She\" \"by\"  \"the\"\n\n\n\n\n\n\nGrab elements out of a vector with logicals.\n\n\nx[c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE)]\n\n[1] \"She\" \"by\"  \"the\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#translating-into-stringr",
    "href": "slides/week-5/week-5-strings.html#translating-into-stringr",
    "title": "Using stringr to Work with Strings",
    "section": "Translating into stringr",
    "text": "Translating into stringr\n\n\nx &lt;- c(\"She\",\n       \"sells\",\n       \"seashells\",\n       \"by\", \n       \"the\",\n       \"seashore!\")\n\n\n\n\n\nDetect what strings have a certain pattern:\n\nx[\n  str_detect(x, \n             pattern = \"ll\")\n  ]\n\n[1] \"sells\"     \"seashells\"\n\n\n\n\n\n\n\n\nReplace that pattern with a different pattern:\n\nx &lt;- str_replace_all(x, \n                     pattern = \"ll\", \n                     replacement = \"zz\")\nx\n\n[1] \"She\"       \"sezzs\"     \"seashezzs\" \"by\"        \"the\"       \"seashore!\""
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#stringr-resources",
    "href": "slides/week-5/week-5-strings.html#stringr-resources",
    "title": "Using stringr to Work with Strings",
    "section": "stringr Resources",
    "text": "stringr Resources\n\n\nEvery group should have a stringr cheatsheet!\n\nOn the Front:\n\nDetecting matches (e.g., Does a string have a specific pattern?)\nSubsetting strings (e.g., Extract strings with specific patterns!)\nManaging lengths (e.g., How long are the strings? Removing whitespace!)\nMutating strings (e.g., Replace specific patterns!)\nJoin & Flatten (e.g., Collapsing multiple strings into a single string!)"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#task-card",
    "href": "slides/week-5/week-5-strings.html#task-card",
    "title": "Using stringr to Work with Strings",
    "section": "Task Card",
    "text": "Task Card\nEvery group should have a task card!\n\n\n\nOn the Front\n\nthe expectations of each role\nthe norms of collaborating\n\n\n\n\n\nOn the Back\n\n\nstringr functions for different tasks you may encounter\nRegular expressions for different tasks you may encounter\n\nMatching patterns (e.g., [:punct:], \\\\w)\nSpecial characters (e.g., ^, $)\nCreating groups of characters (e.g., [Kk])\nRepeated patters (e.g., ?, +, {2})"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#pair-programming-expectations",
    "href": "slides/week-5/week-5-strings.html#pair-programming-expectations",
    "title": "Using stringr to Work with Strings",
    "section": "Pair Programming Expectations",
    "text": "Pair Programming Expectations\n\n\nDeveloper\n\n\nReads prompt and ensures Coder understands what is being asked.\nTypes the code specified by the Coder into the Quarto document.\nRuns the code provided by the Coder.\nWorks with Coder to debug the code.\nEvaluates the output.\n\nWorks with Coder to write code comments.\n\n\n\n\n\n\nCoder\n\n\nReads out instructions or prompts\nDirects the Developer what to type.\nTalks with Developer about their ideas.\nManages resources (e.g., cheatsheets, textbook, slides).\nWorks with Developer to debug the code.\nWorks with Developer to write code comments."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#getting-started",
    "href": "slides/week-5/week-5-strings.html#getting-started",
    "title": "Using stringr to Work with Strings",
    "section": "Getting Started",
    "text": "Getting Started\n\nFirst, both of you will do the following:\n\n\n\n\nOpen the PA-5-stringr.qmd file\n\n\n\n\nThen, the partner who has the most pets starts as the Developer (typing and listening to instructions from the Coder)!\n\nThe Coder does not type.\n\nThe collaborative editing feature should allow you to track what is being typed.\n\nThe Developer only types what they are told to type."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#external-resources",
    "href": "slides/week-5/week-5-strings.html#external-resources",
    "title": "Using stringr to Work with Strings",
    "section": "External Resources",
    "text": "External Resources\nDuring the Practice Activity, you are not permitted to use Google, ChatGPT, or websites for regular expressions for help. . . .\n\nYou are permitted to use:\n\nthe stringr cheatsheet,\nthe task card,\nthe course textbook, and\nthe course slides."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#submission",
    "href": "slides/week-5/week-5-strings.html#submission",
    "title": "Using stringr to Work with Strings",
    "section": "Submission",
    "text": "Submission\n\nSubmit the name of the movie the quote is from.\n\n\nEach person will input the full name of the movie the scrambled message is from into the PA5 quiz.\nEach person will submit the PA-5.html."
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#to-do",
    "href": "slides/week-5/week-5-strings.html#to-do",
    "title": "Using stringr to Work with Strings",
    "section": "To do…",
    "text": "To do…\n\nPA 5.1: Scrambled Message\n\nDue Thursday, February 6 at 12:00pm\n\nCheck-in 5.2: Functions from lubridate\n\nDue Thursday, February 6 at 12:00pm"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-1",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-1",
    "title": "Simulating Probabilities & Datasets",
    "section": "Simulate Multiple Datasets - Step 1",
    "text": "Simulate Multiple Datasets - Step 1\n\nWrite a function to simulate height data from a population with some mean and SD height.\nThe user should be able to input:\n\nhow many observations to simulate\nthe mean and standard deviation of the Normal distribution to use when simulating\n\n\n\n\n\n\n\nPencil out your function!\n\n\n\n\n\n\n\n\n\n\n\n\nsim_ht &lt;- function(n = 200, avg, std){\n  tibble(person = 1:n,\n         ht = rnorm(n = n, mean = avg, sd = std))\n}\n\n\n\n\n\n\n\n\n\nsim_ht(n = 5, \n        avg = 66, \n        std = 3)\n\n# A tibble: 5 × 2\n  person    ht\n   &lt;int&gt; &lt;dbl&gt;\n1      1  70.9\n2      2  61.6\n3      3  62.4\n4      4  71.3\n5      5  64.1"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-2",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-2",
    "title": "Simulating Probabilities & Datasets",
    "section": "Simulate Multiple Datasets - Step 2",
    "text": "Simulate Multiple Datasets - Step 2\nCreate a set of parameters (mean and SD) for each population.\n\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n            std_ht  = c(3, 6))\n\n# A tibble: 8 × 2\n  mean_ht std_ht\n    &lt;dbl&gt;  &lt;dbl&gt;\n1      60      3\n2      60      6\n3      66      3\n4      66      6\n5      72      3\n6      72      6\n7      78      3\n8      78      6"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-3",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-3",
    "title": "Simulating Probabilities & Datasets",
    "section": "Simulate Multiple Datasets - Step 3",
    "text": "Simulate Multiple Datasets - Step 3\nSimulate datasets with different mean and SD heights.\n\n\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n         std_ht  = c(3, 6)\n         ) |&gt; \n mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), \n                       .f = sim_ht\n                       )\n        )\n\n# A tibble: 8 × 3\n  mean_ht std_ht ht_data           \n    &lt;dbl&gt;  &lt;dbl&gt; &lt;list&gt;            \n1      60      3 &lt;tibble [200 × 2]&gt;\n2      60      6 &lt;tibble [200 × 2]&gt;\n3      66      3 &lt;tibble [200 × 2]&gt;\n4      66      6 &lt;tibble [200 × 2]&gt;\n5      72      3 &lt;tibble [200 × 2]&gt;\n6      72      6 &lt;tibble [200 × 2]&gt;\n7      78      3 &lt;tibble [200 × 2]&gt;\n8      78      6 &lt;tibble [200 × 2]&gt;\n\n\n\n\n\n\n\n\n\n\n\nWhy am I getting a tibble in the ht_data column?"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#hmmmm",
    "href": "slides/week-9/data-simulation-part-2.html#hmmmm",
    "title": "Using map() to Simulate Data",
    "section": "Hmmmm…",
    "text": "Hmmmm…\n\n\n\nCode\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n         std_ht  = c(3, 6)\n         ) |&gt; \n mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), \n                       .f = sim_ht\n                       )\n        ) |&gt; \n  unnest(cols = ht_data) |&gt; \n  slice_sample(n = 10)\n\n\n# A tibble: 10 × 4\n   mean_ht std_ht person    ht\n     &lt;dbl&gt;  &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n 1      78      3    112  74.5\n 2      72      3     98  70.8\n 3      72      6    101  82.4\n 4      66      3     21  65.2\n 5      78      6    116  75.1\n 6      72      6    181  65.7\n 7      60      3     15  63.9\n 8      66      6    151  62.5\n 9      66      3    107  65.6\n10      78      6     33  75.2"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#extracting-the-datasets",
    "href": "slides/week-9/data-simulation-part-2.html#extracting-the-datasets",
    "title": "Using map() to Simulate Data",
    "section": "Extracting the Datasets",
    "text": "Extracting the Datasets\n\n\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n         std_ht  = c(3, 6)\n         ) |&gt; \n mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), \n                       .f = sim_ht\n                       )\n        ) |&gt; \n  unnest(cols = ht_data) |&gt; \n  slice_sample(n = 10)\n\n\n\n\n\n\n\n# A tibble: 10 × 4\n   mean_ht std_ht person    ht\n     &lt;dbl&gt;  &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n 1      60      3      1  64.6\n 2      60      3      2  57.4\n 3      60      3      3  65.8\n 4      60      3      4  56.7\n 5      60      3      5  57.5\n 6      60      3      6  60.6\n 7      60      3      7  56.5\n 8      60      3      8  55.9\n 9      60      3      9  60.4\n10      60      3     10  60.1\n\n\n\n\n\n\n\n\nWhy do I now have person and ht columns?\n\n\nHow many rows should I have for each mean_ht, std_ht combo?"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-4",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-4",
    "title": "Simulating Probabilities & Datasets",
    "section": "Simulate Multiple Datasets - Step 4",
    "text": "Simulate Multiple Datasets - Step 4\nExtract the contents of each list!\n\n\ncrossing(mean_ht = seq(from = 60, to = 78, by = 6),\n         std_ht  = c(3, 6)\n         ) |&gt; \n mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), \n                       .f = sim_ht\n                       )\n        ) |&gt; \n  unnest(cols = ht_data) |&gt; \n  slice_sample(n = 10)\n\n\n\n\n\n\n\n# A tibble: 10 × 4\n   mean_ht std_ht person    ht\n     &lt;dbl&gt;  &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n 1      60      3      1  61.1\n 2      60      3      2  59.0\n 3      60      3      3  64.2\n 4      60      3      4  60.6\n 5      60      3      5  58.5\n 6      60      3      6  59.9\n 7      60      3      7  60.5\n 8      60      3      8  59.1\n 9      60      3      9  58.4\n10      60      3     10  60.8\n\n\n\n\n\n\n\n\nWhy do I now have person and ht columns?\n\n\nHow many rows should I have for each mean_ht, std_ht combo?"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#plot",
    "href": "slides/week-9/data-simulation-part-2.html#plot",
    "title": "Using map() to Simulate Data",
    "section": "Plot",
    "text": "Plot\nConsider the samples simulated from each population.\n\n\nCode\nfake_ht_data |&gt; \n  ggplot(aes(x = ht)) +\n  geom_histogram(color = \"white\") +\n  facet_grid(std_ht ~ mean_ht) +\n  labs(x = \"Height (in)\",\n       y = \"\",\n       subtitle = \"Frequency\",\n       title = \"Simulated Height Data from 8 Populations\")\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-5",
    "href": "slides/week-9/data-simulation-part-2.html#simulate-multiple-datasets---step-5",
    "title": "Simulating Probabilities & Datasets",
    "section": "Simulate Multiple Datasets - Step 5",
    "text": "Simulate Multiple Datasets - Step 5\nPlot the samples simulated from each population.\n\n\n\nCode\nfake_ht_data |&gt; \n  mutate(across(.cols = mean_ht:std_ht, \n                .fns = ~as.character(.x)), \n         mean_ht = fct_recode(mean_ht, \n                              `Mean = 60` = \"60\", \n                              `Mean = 66` = \"66\", \n                              `Mean = 72` = \"72\", \n                              `Mean = 78` = \"78\"), \n         std_ht = fct_recode(std_ht, \n                             `Std = 3` = \"3\", \n                             `Std = 6` = \"6\")\n         ) |&gt; \n  ggplot(mapping = aes(x = ht)) +\n  geom_histogram(color = \"white\") +\n  facet_grid(std_ht ~ mean_ht) +\n  labs(x = \"Height (in)\",\n       y = \"\",\n       subtitle = \"Frequency of Observations\",\n       title = \"Simulated Heights from Eight Different Populations\")"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#our-task",
    "href": "slides/week-9/data-simulation-part-2.html#our-task",
    "title": "Simulating Probabilities & Datasets",
    "section": "Our Task",
    "text": "Our Task\nSimulate the approximate probability that at least two people have the same birthday (same day of the year, not considering year of birth or leap years)."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#writing-a-function-to",
    "href": "slides/week-9/data-simulation-part-2.html#writing-a-function-to",
    "title": "Simulating Probabilities & Datasets",
    "section": "Writing a function to…",
    "text": "Writing a function to…\n\nsimulate the birthdays of 50 people.\ncount how many birthdays are shared.\nreturn whether or not a shared birthday exists."
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#step-1-simulate-the-birthdays-of-50-people",
    "href": "slides/week-9/data-simulation-part-2.html#step-1-simulate-the-birthdays-of-50-people",
    "title": "Simulating Probabilities & Datasets",
    "section": "Step 1 – simulate the birthdays of 50 people",
    "text": "Step 1 – simulate the birthdays of 50 people\n\nget_shared_birthdays &lt;- function(n = 50){\n  \n  bday_data &lt;- tibble(person = 1:n,\n                      bday   = sample(1:365, \n                                      size = n, \n                                      replace = TRUE)\n                      )\n}\n\n\n\n\n\n\n\n\nWhy did I set replace = TRUE for the sample() function?"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#step-2-count-how-many-birthdays-are-shared",
    "href": "slides/week-9/data-simulation-part-2.html#step-2-count-how-many-birthdays-are-shared",
    "title": "Simulating Probabilities & Datasets",
    "section": "Step 2 – count how many birthdays are shared",
    "text": "Step 2 – count how many birthdays are shared\n\nget_shared_birthdays &lt;- function(n = 50){\n  \n  bday_data &lt;- tibble(person = 1:n,\n                      bday   = sample(1:365, \n                                      size = n, \n                                      replace = TRUE)\n                      )\n  \n  double_bdays &lt;- bday_data |&gt; \n    count(bday) |&gt; \n    filter(n &gt;= 2) |&gt; \n    nrow()\n  \n}"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#step-3-return-whether-or-not-a-shared-birthday-exists",
    "href": "slides/week-9/data-simulation-part-2.html#step-3-return-whether-or-not-a-shared-birthday-exists",
    "title": "Simulating Probabilities & Datasets",
    "section": "Step 3 – return whether or not a shared birthday exists",
    "text": "Step 3 – return whether or not a shared birthday exists\n\n\nget_shared_birthdays &lt;- function(n = 50){\n  bday_data &lt;- tibble(person = 1:n,\n                      bday   = sample(1:365, \n                                      size = n, \n                                      replace = T)\n                      )\n  \n  double_bdays &lt;- bday_data |&gt; \n    count(bday) |&gt; \n    filter(n &gt;= 2) |&gt; \n    nrow()\n  \n  return(double_bdays &gt; 0)\n}\n\n\n\n\n\n\n\n\n\nWhat type of output is this function returning?"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#using-function-to-simulate-many-datasets",
    "href": "slides/week-9/data-simulation-part-2.html#using-function-to-simulate-many-datasets",
    "title": "Using map() to Simulate Data",
    "section": "Using Function to Simulate Many Datasets",
    "text": "Using Function to Simulate Many Datasets\nUse a map() function to simulate 1000 datasets.\n\nWhat proportion of these datasets contain at least two people with the same birthday?\n\n\n\nsim_results &lt;- map_lgl(.x = 1:1000,\n                       .f = ~ get_shared_birthdays(n = 50))\n\n\n\n\n\n\nsum(sim_results) / 1000\n\n[1] 0.965"
  },
  {
    "objectID": "slides/week-9/data-simulation-part-2.html#using-function-to-simulate-many-probabilities",
    "href": "slides/week-9/data-simulation-part-2.html#using-function-to-simulate-many-probabilities",
    "title": "Simulating Probabilities & Datasets",
    "section": "Using Function to Simulate Many Probabilities",
    "text": "Using Function to Simulate Many Probabilities\nUse a map() function to simulate 1000 datasets.\n\n\nsim_results &lt;- map_lgl(.x = 1:1000,\n                       .f = ~ get_shared_birthdays(n = 50))\n\n\n\n\n\nWhat proportion of these datasets contain at least two people with the same birthday?\n\n\n\nsum(sim_results) / 1000\n\n[1] 0.965"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#when-locating-code",
    "href": "slides/week-10/final-portfolio.html#when-locating-code",
    "title": "Final Portfolio Week",
    "section": "When locating code…",
    "text": "When locating code…\n\nfind 1-2 high quality examples (quality &gt; quantity)\nfind examples that hit on multiple learning targets at the same time"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#includes-thoughtful-reflections-on-why-revisions-are-being-requested.",
    "href": "slides/week-10/final-portfolio.html#includes-thoughtful-reflections-on-why-revisions-are-being-requested.",
    "title": "Final Portfolio Week",
    "section": "“Includes thoughtful reflections on why revisions are being requested.”",
    "text": "“Includes thoughtful reflections on why revisions are being requested.”\n\nFeel free to include reflections you are proud of!"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#determining-your-grade-1",
    "href": "slides/week-10/final-portfolio.html#determining-your-grade-1",
    "title": "Final Portfolio Week",
    "section": "Determining Your Grade",
    "text": "Determining Your Grade\n\nI believe my grade equivalent to course work evidenced below to be an __.\n\n\nYour goal is to argue, convincingly and with concrete evidence, that you have met the criteria for both content proficiency, evidence of continued learning, and growth as a team member that goes with a particular grade."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#plus-minus-modifiers",
    "href": "slides/week-10/final-portfolio.html#plus-minus-modifiers",
    "title": "Final Portfolio Week",
    "section": "Plus / Minus Modifiers",
    "text": "Plus / Minus Modifiers\n\n\n\n+\n\nYou’ve met all the criteria for the letter grade along with a significant amount, but not all, of the criteria for the next letter grade up.\n\n\n\n\n\n\n-\n\nYou have met the requirements for a letter grade but only in a way that you believe is a bare minimum.\nYou’ve met almost all the requirements for the letter grade except for a small number of minor criteria."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#what-if-you-dont-agree",
    "href": "slides/week-10/final-portfolio.html#what-if-you-dont-agree",
    "title": "Final Portfolio Week",
    "section": "What if you don’t agree?",
    "text": "What if you don’t agree?\nThere are two ways this might happen.\n\n\n\n\nYou ask for a grade that is higher than the evidence supports.\n\n\nThat is, you grade yourself too highly. For example, you believe you earned an A in the course, but I do not feel the evidence you’ve provided supports this grade.\n\n\nIn this case, I’ll ask you to explain how you would modify a portion of the code you’ve included in your portfolio to be more efficient.\n\n\n\n\n\n\n\n\n\nIf your response communicates that you understand this key concept, I will award you the grade you proposed.\n\n\nIf your response communicates that you do not understand this key concept, I will award you the highest grade I believe the evidence in your portfolio supports."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#what-if-we-dont-agree",
    "href": "slides/week-10/final-portfolio.html#what-if-we-dont-agree",
    "title": "Final Portfolio Week",
    "section": "What if we don’t agree?",
    "text": "What if we don’t agree?\nThere are two ways this might happen.\n\n\n\n\nYou ask for a grade that is higher than the evidence supports.\n\n\nThat is, you grade yourself too highly. For example, you believe you earned an A in the course, but I do not feel the evidence you’ve provided supports this grade.\n\n\nIn this case, I’ll ask you to explain how you would modify a portion of the code you’ve included in your portfolio to be more efficient.\n\n\n\n\n\n\n\n \n\n\nIf your response communicates that you understand this key concept, I will award you the grade you proposed.\n\n \n\nIf your response communicates that you do not understand this key concept, I will award you the highest grade I believe the evidence in your portfolio supports."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#what-if-we-dont-agree-1",
    "href": "slides/week-10/final-portfolio.html#what-if-we-dont-agree-1",
    "title": "Final Portfolio Week",
    "section": "What if we don’t agree?",
    "text": "What if we don’t agree?\n\n\n\nYou ask for a grade that was lower than your actual performance indicates.\n\n\n\n\nThat is, you “lowball” yourself, for example you say you earned a B+ when in fact I think you earned an A-.\n\n\n\n\n\n  \n\n\nIn this case, I will tell you what grade I believe you have earned and why."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#modification-to-learning-targets",
    "href": "slides/week-10/final-portfolio.html#modification-to-learning-targets",
    "title": "Final Portfolio Week",
    "section": "Modification to Learning Targets",
    "text": "Modification to Learning Targets\n\nNone of the lab assignments had a setting where a full_join() was appropriate.\n\nRemove the full_join() section of your reflection_template.qmd file"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#for-example..",
    "href": "slides/week-10/final-portfolio.html#for-example..",
    "title": "Final Portfolio Week",
    "section": "For example..",
    "text": "For example..\n\nthe code below could be used to demonstrate proficiency with:\n\nPE-2 (writing functions)\nR-2 (well documented code)\nDSSM-1 (simulating data)\n\n\nrandomBabies &lt;- function(nBabies) {\n  # Create a vector representing the parents\n  parents &lt;- 1:nBabies\n  \n  # Shuffle the babies randomly\n  babies &lt;- sample(parents)\n  \n  # Count how many babies are correctly returned\n  sum(parents == babies)\n}"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#for-example",
    "href": "slides/week-10/final-portfolio.html#for-example",
    "title": "Final Portfolio Week",
    "section": "For example…",
    "text": "For example…\n\nthe code below could be used to demonstrate proficiency with:\n\nPE-2 (writing functions)\nR-2 (well documented code)\nDSSM-1 (simulating data)\n\n\nrandomBabies &lt;- function(nBabies) {\n  # Create a vector representing the parents\n  parents &lt;- 1:nBabies\n  \n  # Shuffle the babies randomly\n  babies &lt;- sample(parents)\n  \n  # Count how many babies are correctly returned\n  sum(parents == babies)\n}"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#think-about-font",
    "href": "slides/week-10/final-portfolio.html#think-about-font",
    "title": "Final Portfolio Week",
    "section": "Think about Font",
    "text": "Think about Font"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#make-your-table-consistent",
    "href": "slides/week-10/final-portfolio.html#make-your-table-consistent",
    "title": "Final Portfolio Week",
    "section": "Make Your Table Consistent",
    "text": "Make Your Table Consistent"
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#make-your-font-consistent",
    "href": "slides/week-10/final-portfolio.html#make-your-font-consistent",
    "title": "Final Portfolio Week",
    "section": "Make Your Font Consistent",
    "text": "Make Your Font Consistent\n\n\n\n\n\n\n\n\nSan serif fonts (e.g., calibri, arial) are more accessible than serif fonts (e.g., times new roman)."
  },
  {
    "objectID": "slides/week-10/final-portfolio.html#final-portfolio-deadline",
    "href": "slides/week-10/final-portfolio.html#final-portfolio-deadline",
    "title": "Final Portfolio Week",
    "section": "Final Portfolio Deadline",
    "text": "Final Portfolio Deadline\nThe link to your Final Portfolio repository is due by Sunday at 11:59pm.\n\n\n\n\n\n\nDeadline extensions will not be accepted.\n\n\nIf you do not submit a Final Portfolio by the deadline, I will use your Midterm Portfolio as well as completion of assignments from Week 7 - 10 to guide my decision."
  },
  {
    "objectID": "course-materials/course-syllabus.html#communication",
    "href": "course-materials/course-syllabus.html#communication",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "",
    "text": "Dr. Hunter Glanz\nYou can call me Professor, Professor/Prof. Glanz or Dr. Glanz.\n Email: hglanz@calpoly.edu\n Office: Building 25 Office 111\nEmail:\n\nOnly email me with your @calpoly.edu email – I cannot respond to other email addresses\nStart your email subject line with “[STAT 331]”\nI will do my best to respond within 24 hours during the week\nIf you send me an email past 7pm or on the weekend, I will likely not respond until the morning of the next working day\nYou should only email me about things that relate to you as an individual. Any other questions should be posted on the course Discord (more details below).\n\nCourse Discord Page:\nFor questions of general interest, such as course clarifications or conceptual questions, please use the course Discord page (you will join this Week 1). If you have a question – someone else in class does too! I encourage you all to respond to each other. I will check Discord at least twice each weekday during working hours (8-6) to ensure that questions are being answered accurately.\nI encourage you to give your post a concise and informative initial sentence, so that other people can find it. For example, “How do I color bars in a barplot with ggplot?” is a better opening sentence than “help with plotting”.\nYou may post snippets of your code and errors on Discord, but please do not post full solutions to lab assignments.\n While your posts are not anonymous, in this case there is no such thing as a bad question!",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#course-logistics",
    "href": "course-materials/course-syllabus.html#course-logistics",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Course Logistics",
    "text": "Course Logistics\nClass Meeting Times: Tuesdays/Thursdays\n\nSection 73: 12:10pm - 2:00pm\n\nRoom: 180-272 (Baker Center - Math & Science)\nOffice Hours are held in my office (25-111) during the following times:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOffice hours are for you! During this time, I am available to talk about anything related to the course.\nOffice hours are also helpful for me… This is my chance to get to know you all better and also get a good idea of what is most challenging and most interesting to you.\nSee this resource for ways that students use office hours.\nOne thing I will not do during office hours is tell you whether an answer to a problem is “correct” or not. We can talk through your thinking that led to your solution, but will leave the final assessment to once you have submitted an assignment.\nNote that office hours are not just for when you have content questions. Stop by to introduce yourself, ask questions about the broader field of statistics, or share what you are working on!\nPlease schedule office hours with me if you can using Calendly (https://calendly.com/hglanz/office-hours)",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#course-description",
    "href": "course-materials/course-syllabus.html#course-description",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Course Description",
    "text": "Course Description\nStat 335/531 provides you with an introduction to programming for data and statistical analysis. The course covers basic programming concepts necessary for statistics, good computing practice, and use of built-in functions to complete basic statistical analyses.\nPrerequisites\nEntrance to STAT 331/531 requires successful completion of:\n\na Stat II qualifying course, and\nan introductory programming course.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#learning-objectives",
    "href": "course-materials/course-syllabus.html#learning-objectives",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThis course will teach you the foundations of statistical computing principles in the language of R.\nAfter taking this course, you will be able to:\n\nWork with the RStudio Integrated development environment (IDE) and quarto documents.\nImport, manage, and clean data from a wide variety of data sources.\nVisualize and summarize data for informative exploratory data analysis and presentations.\nWrite efficient, well-documented, and tidy R code.\nProgram random experiments and simulations from probability models.\n\nAdditionally, it is my hope that you will learn to:\n\nExtend your R skills independently through documentation and online resources.\nBe thoughtful, deliberate, and ethical in your use of R and similar tools.\nUse R to be playful, creative, and fun!\nContribute to and participate in the R Open Source Community.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#course-materials",
    "href": "course-materials/course-syllabus.html#course-materials",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Course Materials",
    "text": "Course Materials\nCourse Webpage (Canvas)\nAll course material will be made available on our Canvas page, including check-ins, practice activities, lab assignments, challenges, review questions, and selected solutions. Canvas will also contain detailed weekly schedules throughout the term. You are responsible for checking the Canvas page on a regular basis.\nTextbook\n R for Data Science (2nd edition)\nThere is an abundance of free online resources for learning programming and R. Our primary resource will be the text linked above. However, there is a compilation of various other resources that I can happily endorse. These are listed below.\n\nCustom Text\n\nThis text was constructed by Dr. Emily Robinson and was modified from material by Dr. Susan VanderPlas. See Statistical Computing using R and Python for her course book with integration of content and videos from Dr. Allison Theobold and Dr. Kelly Bodwin.\nIn addition, you may find it useful to reference some of the following resources that Dr. Robinson consulted while assembling the text. Most are available online for free.\n\nModern Dive\nIntroduction to Modern Statistics\nAdvanced R\n\nComputing\n Although you may always work on the computers in the classroom, I strongly recommend that you use your own personal laptop for this course if you have one.\nWe will (obviously) be using the R statistical software throughout this course. In addition, you are required to use RStudio, a companion integrated developer environment (IDE). Both R and RStudio are freely available. Download instructions are available on Canvas.\n\n\n\n\n\n\nWarning\n\n\n\nChromebooks and iPads will not be sufficient to use R. If this requirement is limiting for you, please contact me ASAP.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#class-schedule-topic-outline",
    "href": "course-materials/course-syllabus.html#class-schedule-topic-outline",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Class Schedule & Topic Outline",
    "text": "Class Schedule & Topic Outline\nThis schedule is tentative and subject to change.\n\n\n\n\n\nNote: Tuesday, January 21st will follow a Monday class schedule.\n\n\n\n\n\n\n\nTentative schedule of class topics and important due dates\n\n\nDate\nTopic\n\n\n\n\nJan 7, Jan 9\nIntroduction to R\n\n\nJan 14, Jan 16\nTidy Data + Basics of Graphics\n\n\nJan 21, Jan 23\nData Cleaning and Manipulation\n\n\nJan 28, Jan 30\nData Transformations + Factors\n\n\nFeb 4, Feb 6\nSpecial Data Types\n\n\nFeb 11\nVersion Control\n\n\nFeb 13\nMidterm Exam\n\n\nFeb 18, Feb 20\nFunctions\n\n\nFeb 25, Feb 27\nFunctional Programming\n\n\nMar 4, Mar 6\nSimulation\n\n\nMar 11\nPredictive Checks\n\n\nMar 13\nFinal Exam\n\n\nMar 19\nProject Final Report Due\n\n\n\n\n\n\n\n\n\n\n\nFinal Exam Tentatively Thursday March 13th in class",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#assessments",
    "href": "course-materials/course-syllabus.html#assessments",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Assessments",
    "text": "Assessments\n\nGeneral Evaluation Criteria\nIn every assignment, discussion, and written component of this class, you are expected to demonstrate that you are intellectually engaging with the material. I will evaluate you based on this engagement, which means that technically correct but low effort answers which do not demonstrate engagement or understanding will receive no credit.\nWhen you answer questions in this class, your goal is to show that you either understand the material or are actively engaging with it. If you did not achieve this goal, then your answer is incomplete, regardless of whether or not it is technically correct. This is not to encourage you to add unnecessary complexity to your answer - simple, elegant solutions are always preferable to unwieldly, complex solutions that accomplish the same task.\nWhile this is not an English class, grammar and spelling are important, as is your ability to communicate technical information in writing; both of these criteria will be used in addition to assignment-specific rubrics to evaluate your work.\n\n\nFormative Assessments\n\nCheck-ins\nEach week, you will find short Check-In questions or tasks throughout the text to make sure you are prepared for class that week. Make sure you submit your answers to these on Canvas to get credit for your efforts. Note that the Canvas Check-in quizzes can be submitted two two times and your highest score will be kept, so you should get close to 100% on this part of the course!\n\nCheck-ins are (typically) due Tuesdays at 12:00pm, but please also consult Canvas.\n\n\n\nPractice Activities\nMost Tuesdays, you will be given a Practice Activity to complete, to get the hang of the week’s necessary R skills. These activities will always result in a single, straightforward correct answer, that you will submit via Canvas (two attempts, the average score being kept).\nSince these activities are intended to be your first attempt at new skills, they are meant to be done with help from me and your peers. Therefore, you will always be given some time in class to work on them.\n\nPractice Activities are (typically) due Thursdays at 12:00pm, but please also consult Canvas.\n\n\n\nLab Assignments\nYour typical homework assignments will be weekly labs. You will follow each lab’s instructions to complete tasks in R and submit a rendered .html Quarto document to Canvas.\nMost weeks, there will be class time on Thursdays dedicated to working on completing lab assignments. While you will work with peers during class time on Thursdays, you will be expected to submit your own individual work for the final submission.\n\nLabs are due on Sundays at 11:59pm.\n\n\n\n\nEvaluative Assessments\n\nFinal Project\nThere will be a data analysis project to be completed throughout the second half of the term. You will work in a group of 3-4 people. Each group will produce a written project report covering linear regression and model simulation. More information will follow on Canvas.\n\n\nExams\nThere will be a midterm exam and a final exam. The midterm will have both in-class and take-home portions. The final will be entirely in-class tentatively during our last class period. More information will follow.\n\n\n\n\n\nCourse Grade\nYour grade in STAT 331/531 will contain the following components:\n\n\n\nAssignments\nWeight\n\n\n\n\nCheck-ins\n5%\n\n\nPractice Activities\n10%\n\n\nLab Assignments\n30%\n\n\nMidterm Exam\n15%\n\n\nFinal Project\n15%\n\n\nFinal Exam\n25%\n\n\n\nLower bounds for grade cutoffs are shown in the following table. I will not “round up” grades at the end of the quarter, but it is possible that I could lower any of the grade cutoffs. \n\n\n\n\n\n\n\nLetter grade\nX +\nX\nX -\n\n\n\n\nA\n.\n93\n90\n\n\nB\n87\n83\n80\n\n\nC\n77\n73\n70\n\n\nD\n67\n63\n60\n\n\nF\n&lt;60\n\n\n\n\n\nInterpretation of this table:\n\nA grade of 85 will receive a B.\nA grade of 77 will receive a C+.\nA grade of 70 will receive a C-.\nAnything below a 60 will receive an F.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#course-policies",
    "href": "course-materials/course-syllabus.html#course-policies",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Course Policies",
    "text": "Course Policies\n\nAttendance & Participation\nI do not take formal attendance in this class. However, it is my expectation that you remain in class and on task until you have finished all your activities and assignments.\nIf you are feeling ill, please do not come to class.\nHere’s what you should do if you do miss a class:\n\nTalk to a classmate to figure out what information you missed\nCheck Canvas for any necessary handouts or changes to assignments\nPost on Discord with any questions you have after reviewing notes and handouts\n\nIf you miss a bunch of classes, please come talk to me. I’m working from the assumption that you care and are trying, but something is getting in your way (health issues? college stress? work?); let’s figure out what that is and how I can help.\n\n\nAccessibility and Accomodations\nI have taken numerous steps to ensure that all of the materials presented in this course are accessible to all participants, regardless of physical or learning disabilities. I know that everyone is unique and I may have unintentionally overlooked something that limits access to some materials or activities. Please let me know if you cannot access any content. If you find you need additional accommodations to complete the required course work, please contact me as soon as possible! I want to support your success.\nIf you wish to request disability-related accommodations such as extra exam time for this or any other course, please contact the Disability Resource Center. It’s important to do this with as much advanced notice as possible, so you have full access to your course materials and activities in a timely manner. Please also email me to let me know that I should expect an email from the DRC to get you the accommodations that you need.\n\n\nInclusive Classroom\nBecause data are collected by and about humans, data necessarily encode aspects of our proclivities and biases. As a result, this course may touch upon difficult topics related to race, gender, inequality, class, and oppression. We each come into this class with different perspectives that can be shared to enhance our understanding of these issues. I ask that you enter these conversations with respect, curiosity, and cultural humility. You should be open to alternative perspectives and be willing to revise beliefs that are based on misinformation. As a general rule, your ideas and experiences can always be shared during these conversations, but please refrain from dismissing the experiences of others. Personal attacks of any kind will not be tolerated.\n\n\nGroup Work\nThis course will rely heavily on in-class group work.\n\n\n\nGroup member discussion is expected for the completion of all practice activities.\nYou are also encouraged to discuss your ideas for lab assignments; however, I expect that these collaborations are about ideas and no R code is shared. Each person’s lab assignment submissions are expected to reflect their own thinking, and thus copying the work of others does not provide me with any information about your learning.\nThe community standards for student-to-student and student-to-instructor interactions include the following:\n\nListen actively and attentively.\nAsk for clarification if you are confused.\nChallenge one another respectfully.\nGracefully accept constructive criticism.\nTake responsibility for the quality of the discussion and the work.\nDo not monopolize discussion.\nAcknowledge that everyone has something to offer.\nSpeak from your own experience, without generalizing.\n\n\n\nLate Policy\n\n\nLike how the “real world” works, you must request a deadline extension before the deadline. To request a deadline extension, you need to email me or message me on discord before the assignment deadline. You don’t need to get a response from me, you just need to email me at least a minute before the deadline. I generally handle these on a case-by-case basis. You should do your best to submit work on-time.\nIf you do not email me before the assignment deadline, you will be docked 20% for each day that the assignment is late. (e.g. you can get a maximum of 80% on the assignment if it is submitted within 24 hours after the original due date and time.)\n\nA note on this policy: my priority is for all of you to engage with and understand the course materials. The best way to achieve this is to complete all assignments and receive feedback on your work. At the same time, I understand that things happen outside of our control and that you are balancing many responsibilities.\n\n\n\n\n\n\nAutomatic Canvas Settings\n\n\n\nCanvas is set up to automatically input 0% for missing assignments (as an incentive to go complete the assignment) and apply the 20% grade deduction policy. I will need to manually adjust your grade when you request an extension. You are responsible for double checking your grade to make sure I didn’t miss anything.\n\n\nIf you find yourself with extenuating circumstances beyond the defined late policy, please email me before the due date.\n\n\nExam Conflicts\nIf you have a known conflict with an exam, please discuss it with me at least three weeks prior to the exam date. If an illness or a family emergency arises, please let me know as soon as possible, and we will work out a solution. This may involve taking the exam at a later date or replacing the missed exam score with the final exam score. If you are unable to take the final exam, you will likely receive an Incomplete in the course.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#course-expectations",
    "href": "course-materials/course-syllabus.html#course-expectations",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Course Expectations",
    "text": "Course Expectations\nFor Students, I expect:\n\nYou will ask lots of questions.\nYou will do reading and other assignments outside of class and be prepared for each class meeting.\nIf you find yourself struggling or feel that you are falling behind, please reach out to me as soon as possible so that we can develop a plan for your success together.\nYou will take advantage of the resources that I provide and to seek out additional resources if you find that you are struggling with the material. You do not need to seek out additional resources all on your own – we can figure out what additional resources you may need.\n\nYou will be doing your best to engage with what we are all doing together during class. This means that you are using technology (i.e. laptops/tablets/phones) for class activities and not in ways that distract you.\nYou will approach the course with academic integrity.\nYou will come to class on time and work on class material with your peers.\nEveryone can learn the material in this course.\n\nFor Me:\n\nI am responsible for ensuring that all students feel welcome and valued in the classroom.\nI am responsible for providing the resources necessary so that all students in the course can achieve the learning objectives.\nI am responsible for providing prompt and clear feedback on your coursework.\nI welcome and appreciate any actionable feedback regarding how the class is meeting your learning needs. We can discuss ways to adjust the course to ensure it is supporting your learning and do more of anything that is working well!\n\n\nMake Mistakes!\nProgramming is the process of making a series of silly or stupid mistakes, and then slowly fixing each mistake (while adding a few more). The only way to know how to fix these mistakes (and avoid them in the future) is to make them. (Sometimes, you have to make the same mistake a few dozen times before you can avoid it in the future). At some point during the class, you will find that you’ve spent 30 minutes staring at an error caused by a typo, a space, a parenthesis in the wrong place. You may ask for help debugging this weird error, only to have someone immediately point out the problem… it is always easier to see these things in someone else’s code. This is part of programming, it is normal, and you shouldn’t feel embarrassed or sorry (unless you put no effort into troubleshooting the problem before you asked for help)\nIf you manage to produce an error I haven’t seen before, then congratulations. You have achieved something special, and that achievement should be celebrated. Each new and bizarre error is an opportunity to learn a bit more about the programming language, the operating system, or the interaction between the two.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#academic-integrity-and-class-conduct",
    "href": "course-materials/course-syllabus.html#academic-integrity-and-class-conduct",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Academic Integrity and Class Conduct",
    "text": "Academic Integrity and Class Conduct\nOur academic community is at its best when we treat each other with fairness, honesty, respect, and trust. Unfortunately, sometimes students slip up and do something that gives themselves (or someone else) an unfair advantage over other students. Such actions will not be tolerated in this class.\nIt is most likely that a student will slip up if they are feeling overwhelmed or unsure of how to approach a problem that they are stuck on. So let’s be proactive to prevent those situations!! If you are helpless in an assignment or in studying, post on discord, come to office hours, or email me or one of your classmates! I am working hard to provide all of the resources you need to succeed\nHowever, the college doesn’t really care if you break the rules on purpose or by accident. If I suspect you have done something that violates academic integrity on any graded elements of the course (included those graded for completion), you will receive an email to tell you about my suspicion and how the situation will be handled. Typically, students earn a 0 for the assignment on which academic misconduct is found. University policy dictates that we must report every instance of suspected academic dishonesty to the Office of Student Rights and Responsibilities, no matter how small. For more information on academic misconduct and what constitutes cheating and plagiarism, please see academicprograms.calpoly.edu/content/academicpolicies/Cheating.\nIt is important to note that paraphrasing or quoting another’s work without proper citation is a form of academic misconduct. This includes the R code produced by someone else! Writing code is like writing a paper, it is obvious if you copied-and-pasted a sentence from someone else into your paper because the way each person writes is different.\nEven inadvertent or unintentional misuse or appropriation of another’s work (such as relying heavily on source material that is not expressly acknowledged) is considered plagiarism. This includes using Chat GPT, which should only be used to help you problem solve just as a tutor or peer would, and not as a substitute for your own work. If you are struggling with writing the R code for an assignment, please reach out to me. I would prefer that I get to help you rather than you spending hours Googling things and get nowhere!\n\n\n\n\n\n\nAlways Cite Outside Resources!\n\n\n\nIn this class the assumed knowledge is the course materials, including the course textbook, coursework pages, and course slides. If you use outside resources on assignments I expect that you will cite those resources. This means that\n\nIf you use any R functions or code that are not in the course materials, you must cite where you found it. e.g., if you look up the help file for mutate() and you learn about a function not covered in the course materials, you are required to cite the documentation when using that function.\nIf you use Google you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you use ChatGPT you are expected to “inform” me by stating that you used it in a code comment next to where you used it including the full prompt that you gave ChatGPT.\nIf you work with classmates on an assignment, you are expected to “inform” me by including a note with their names.\n\n\n\nIf you have any questions about using and citing sources, you are expected to ask for clarification.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "course-materials/course-syllabus.html#learning-environment-and-support",
    "href": "course-materials/course-syllabus.html#learning-environment-and-support",
    "title": "Stat 331/531: Statistical Computing with R",
    "section": "Learning Environment and Support",
    "text": "Learning Environment and Support\nMy priority is your success in this course. I understand that things happen unexpectedly and obtaining official accommodations can be slow.\nIf you feel that any circumstances or factors beyond your control may affect your presence and work in this class, please reach out to me and we will work to accommodate your needs. You do not need to share personal information with me when you reach out, unless you would like to.\n\nMental Health\nNational surveys of college students have consistently found that stress, sleep problems, anxiety, depression, interpersonal concerns, death of a significant other and alcohol use are among the top ten health impediments to academic performance. If you are experiencing any mental health issues, I and Cal Poly are here to help you. Cal Poly’s Counseling Services (805-756-2511) is a free and confidential resource for assistance, support and advocacy https://chw.calpoly.edu/counseling.\n\n\nSupport Services\nIf you are experiencing food insecurity, housing instability, or other challenges that may impact your ability to succeed in this course, please refer to the resources listed on Canvas under “Student Support Services at Cal Poly.” These resources provide a range of essential support services, including emergency financial assistance, counseling, and academic support.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#tuesday-january-7",
    "href": "slides/week-1/week-1-intro-R.html#tuesday-january-7",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Tuesday, January 7",
    "text": "Tuesday, January 7\nToday we will…\n\nWelcome to Stat 331 / 531: Statistical Computing in R\nIntroductions (Me + You)\nCourse Layout\nBasics of R"
  },
  {
    "objectID": "slides/week-1/week-1-intro-R.html#hi-im-dr.-glanz",
    "href": "slides/week-1/week-1-intro-R.html#hi-im-dr.-glanz",
    "title": "Intro to STAT 331 / 531 + Intro to R",
    "section": "Hi, I’m Dr. Glanz!",
    "text": "Hi, I’m Dr. Glanz!\n\n\n\n\nI am originally from San Diego, but went to college at Cal Poly and grad school in Boston.\nMy favorite things are spending time with friends, drinking coffee, and data science!\n\n\n\n\n\n\n\n\n\n\n\nI love dogs!\nI’ve been programming in R, SAS and Python since being at Cal Poly in 2005!\nI absolutely love teaching this course!"
  },
  {
    "objectID": "slides/week-1/week-1-intro-version-control.html#thursday-january-9",
    "href": "slides/week-1/week-1-intro-version-control.html#thursday-january-9",
    "title": "Scripts, Notebooks & Version Control",
    "section": "Thursday, January 9",
    "text": "Thursday, January 9\nToday we will…\n\n\nAnswer Clarifying Questions:\n\nSyllabus?\n\nNew Material\n\nScripts + Notebooks\nVersion Control\n\nLab 1: Introduction to Quarto\nChallenge 1: Modifying your Quarto Document"
  },
  {
    "objectID": "course-materials/course-support.html#office-hours",
    "href": "course-materials/course-support.html#office-hours",
    "title": "Course support",
    "section": "Office Hours",
    "text": "Office Hours\nA lot of questions are most effectively answered in-person, and student hours are the best place to come ask me questions! I encourage each and every one of you to take advantage of this resource! Make a pledge to stop by office hours at least once during the first three weeks of class. If you truly have no questions to ask, just stop by and say hi and introduce yourself.\n\n\n\nMondays\n9:10 am – 11:00 am (in-person)\n\n\nWednesdays\n9:10 am – 11:00 am (in-person)",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "slides/week-2/week-2-ggplot.html#tuesday-january-14",
    "href": "slides/week-2/week-2-ggplot.html#tuesday-january-14",
    "title": "Basics of Graphics",
    "section": "Tuesday, January 14",
    "text": "Tuesday, January 14\nToday we will…\n\nAccessing Practice Activities\nNew Material\n\nTidy Data\nLoad External Data\nGraphics (and ggplot2)\n\nPA 2: Using Data Visualization to Find the Penguins"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#thursday-january-16",
    "href": "slides/week-2/week-2-import.html#thursday-january-16",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Thursday, January 16",
    "text": "Thursday, January 16\nToday we will…\n\n\nDebrief PA 2\nDebrief Lab 1\n\nContent Related to Lab 2\n\nNew Material\n\nTidy Data\nLoad External Data\nGraphical Perception\nColors in ggplot\n\nLab 2: Exploring Rodents with ggplot2\n\nUsing External Resources"
  },
  {
    "objectID": "slides/week-2/week-2-import.html#comments-from-lab-1-for-lab-2",
    "href": "slides/week-2/week-2-import.html#comments-from-lab-1-for-lab-2",
    "title": "Tidy Data, Importing Data & More Advanced Graphics",
    "section": "Comments from Lab 1 for Lab 2…",
    "text": "Comments from Lab 1 for Lab 2…\n\n\nEvery lab and challenge is expected to use code-folding.\nThere should be no messages / warnings output in your final rendered HTML.\nYou should reduce the amount of “intermediate object junk” in your workspace.\n\nAsk yourself, do I need to use this later?\nIf the answer is no, then you should not save that object."
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt1.html#thursday-january-23",
    "href": "slides/week-3/week-3-dplyr-pt1.html#thursday-january-23",
    "title": "Data Wrangling with dplyr",
    "section": "Thursday, January 23",
    "text": "Thursday, January 23\nToday we will…\n\nNew Material\n\nIntroduce the dplyr package.\nUse dplyr verbs to manipulate data.\n\nPA 3: Identify the Mystery College"
  },
  {
    "objectID": "slides/week-3/week-3-dplyr-pt2.html#thursday-january-23",
    "href": "slides/week-3/week-3-dplyr-pt2.html#thursday-january-23",
    "title": "Extending Data Wrangling Verbs",
    "section": "Thursday, January 23",
    "text": "Thursday, January 23\nToday we will…\n\n\n\n\n\n\nNew Material\n\nExtend dplyr verbs to have more functionality\n\nLab 3: Teacher Evaluations"
  },
  {
    "objectID": "slides/week-4/week-4-joins-1.html#tuesday-january-28",
    "href": "slides/week-4/week-4-joins-1.html#tuesday-january-28",
    "title": "Data Joins + Pivots",
    "section": "Tuesday, January 28",
    "text": "Tuesday, January 28\nToday we will discuss…\n\n\n\n\nNew Material\n\nPivoting data with tidyr\nJoining data with dplyr\n\nPA 4: Military Spending"
  },
  {
    "objectID": "slides/week-4/week-4-joins-2.html#thursday-january-30",
    "href": "slides/week-4/week-4-joins-2.html#thursday-january-30",
    "title": "Extending Joins, Factors, Clean Variable Names",
    "section": "Thursday, January 30",
    "text": "Thursday, January 30\nToday we will…\n\n\n\n\nDebrief PA 4\n\nDescribe the Code\nClean Column Names\n\n\nDebrief Lab 3 & Challenge 3\n\nCommon Themes\nPackage Lifecycle Stages\nExpectations for Tools Used \n\n\n\n\n\n\n\n\nNew Material\n\nExtensions to Relational Data\nFactors with forcats\n\nLab 4: Childcare Costs in California"
  },
  {
    "objectID": "slides/week-5/week-5-strings.html#tuesday-february-4",
    "href": "slides/week-5/week-5-strings.html#tuesday-february-4",
    "title": "Using stringr to Work with Strings",
    "section": "Tuesday, February 4",
    "text": "Tuesday, February 4\nToday we will…\n\n\n\nNew material\n\nString variables\nFunctions for working with strings\nRegular expressions\n\nPA 5.1: Scrambled Message"
  },
  {
    "objectID": "slides/week-5/week-5-dates.html#thursday-february-6",
    "href": "slides/week-5/week-5-dates.html#thursday-february-6",
    "title": "Using lubridate to Work with Dates",
    "section": "Thursday, February 6",
    "text": "Thursday, February 6\nToday we will…\n\n\nDebrief Lab 4    \nNew Material\n\nWorking with Date & Time Variables\n\nPA 5.2: Jewel Heist"
  },
  {
    "objectID": "slides/week-7/week-7-vector-functions.html#tuesday-february-18",
    "href": "slides/week-7/week-7-vector-functions.html#tuesday-february-18",
    "title": "Writing Vector Functions",
    "section": "Tuesday, February 18",
    "text": "Tuesday, February 18\nToday we will…\n\n\nNew Material\n\nFunction Basics\nVariable Scope + Environment\n\nPA 7: Writing Functions"
  }
]