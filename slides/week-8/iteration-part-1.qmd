---
title: "Iteration"
format: 
  revealjs:
      theme: [simple, ../style.scss]
      auto-stretch: false
editor: source
execute:
  echo: true
---

```{r setup}
#| include: false
#| message: false

library(tidyverse)
library(palmerpenguins)
library(glue)
```

## Today we will...

+ New Material
  + Performing Repeated Tasks + Vectorization
  + Functional Programming: the `map()` family
+ PA 8: The Twelve Days of Christmas Starter Functions

# It's Week 8...

. . .

> How are you taking care of yourself?

# Performing Repeated Tasks

## Repetition

Type out the task over and over.

```{r}
#| echo: false
#| fig-align: center
#| fig-alt: "The image shows a chalkboard scene styled after The Simpsons with Bart Simpson standing beside a chalkboard, where he has written repeatedly in large, white text: 'I WILL NOT USE LOOPS IN R.' This is a humorous reference to programming practices in R, suggesting a preference for avoiding loops in favor of other approaches. Bart is holding a piece of chalk and looking over his shoulder at the viewer with a mischievous expression."
#| out-width: 50%

knitr::include_graphics("images/bart_board_iter.png")
```

. . .

Do not do this.

## Iteration

Repeatedly execute the *same* operation over and over.

. . .

+ Loops (e.g., `for()` and `while()`) allow us to iterate.

. . .

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
#| code-line-numbers: false

for(i in 1:6){
  print(i^2)
}
```

:::
::: {.column width="60%"}
```{r}
#| echo: false
#| fig-align: center
#| out-width: 80%
#| fig-alt: "The image shows a chalkboard with Bart Simpson standing beside it, holding a piece of chalk. The chalkboard displays R code that humorously contradicts the message by using a loop to discourage using loops in R. The code reads: `FOR (I IN 1:100) { PRINT(I WILL NOT USE LOOPS IN R) }`. This satirical twist emphasizes a preference in R programming for avoiding traditional loops in favor of functional programming methods. Bart appears to be looking at the code on the chalkboard."

knitr::include_graphics("images/bart_board_for.png")
```
:::
::::

<!-- . . . -->

<!-- + But loops tend to be **slow**! -->

## Vectorization

Many operations in R are **vectorized**.

+ These functions operate on *vectors* of values rather than a *single* value.
+ We can iterate *without* writing a loop.

. . .

```{r}
#| echo: true
#| code-line-numbers: false

x <- seq(from = -4, to = 6)
```

. . .

</br>

::: columns
::: {.column width="47%"}
```{r}
#| echo: true
#| code-line-numbers: false

abs(x)
```
:::

::: {.column width="3%"}
:::

::: {.column width="50%"}
::: {.fragment}
```{r}
#| echo: true
#| code-line-numbers: false

for(i in 1:length(x)){
  x[i] <- abs(x[i])
}

x
```
:::
:::
:::

## Vectorization

**Not every function is vectorized.**

+ For example, `if()` statements **cannot** operate on vectors.

. . .

:::: {.columns}
::: {.column width="55%"}
```{r}
#| error: true
#| echo: true
#| code-line-numbers: false

pos_neg_zero <- function(x){
  if(x > 0){
    return("Greater than 0!")
  } 
  else if (x < 0){
    return("Less than 0!")
  } 
  else {
    return("Equal to 0!")
  }
}
```

:::
::: {.column width="45%"}

```{r}
#| echo: false
x <- seq(from = -4, to = 6)
```

::: {.fragment}
```{r}
#| error: true
#| echo: true
#| code-line-numbers: false

pos_neg_zero(x)
```
:::

::: {.fragment}
::: {.midi}
This means that `if(x > 0)` can only be checked for something of length 1 (a 
single number, not a vector).
:::
:::
:::
::::


## What do we do instead?

. . .

**Option 1 -- Looping**

```{r}
#| code-line-numbers: false

result <- rep(NA, length(x))

for(i in 1:length(x)){
  result[i] <- pos_neg_zero(x[i])
}

result
```


## What do we do instead?

. . .

**Option 2 -- Write a Vectorized Function**

::: {.midi}
`if_else()` and `case_when()` are the **vectorized** versions of `if()` and 
`else if()`
:::

. . .

```{r}
#| error: true
#| echo: true
#| code-line-numbers: false

pos_neg_zero <- function(x){
  state <- case_when(x > 0 ~ "Greater than 0!", 
                     x < 0 ~ "Less than 0!", 
                     .default = "Equal to 0!")
  return(state)
}
```

. . .

```{r}
#| error: true
#| echo: true
#| code-line-numbers: false

pos_neg_zero(x)
```

## Some functions cannot be vectorized!

. . .

Applying `class()` to a **single** variable in a data frame returns the data type
of that column:

```{r}
#| code-line-numbers: false

class(penguins[[1]])
```

. . .

</br>

Trying to apply `class()` to **every** variable in a data frame returns the data
type of the data frame:

```{r}
#| code-line-numbers: false

class(penguins)
```

## What can we do instead?

Write a `for()` loop...

```{r}
#| code-line-numbers: false

data_type <- rep(NA, length = ncol(penguins))

for(i in seq_along(penguins)){
  data_type[i] <- class(penguins[[i]])
}
```

. . .

```{r}
#| code-fold: true

tibble(column = names(penguins), 
       type = data_type) |> 
  pivot_wider(names_from = column, 
              values_from = type) |>  
  knitr::kable() |>
  kableExtra::kable_styling(font_size = 30)
```


# ...but loops are computationally intensive


## What can we do instead?

What about `across()`?

+ Easily perform the **same** operation on multiple columns.

```{r}
#| code-line-numbers: "2-4"

penguins |> 
  summarise(across(.cols = everything(), 
                   .fns = class)
            ) |>  
  knitr::kable() |>
  kableExtra::kable_styling(font_size = 30)
```

## But `across()` uses a `for()` loop!

</br>
</br>

::: {.centered}
::: {.large}
```
for (j in seq_fns) {
  fn <- fns[[j]]
  out[[k]] <- fn(col, ...)
  k <- k + 1L
```
:::
:::

# Functional Programming

. . .

> To understand computations in R, two slogans are helpful:
> 
> - Everything that exists is an object.
> 
> - Everything that happens is a function call.
> 
> John Chambers (creator of the pre-cursor to R)


## Functional Programming -- Big Picture

+ We will use **functions** as the **arguments** to other functions!

<br>

::: callout-note
There are a slew of `apply()` functions you will likely come across.

We will instead focus on the `purrr` package and the `map()` family of functions.
:::


## `purrr`

:::: {.columns}
::: {.column width="80%"}
The `purrr` package breaks common list manipulations into small, independent pieces.

</br>

This strategy involves two steps:

:::
::: {.column width="20%"}
![](images/purrr.png){width=80% fig-alt="The image is a hexagonal logo for the R package purrr. It features a simple, hand-drawn outline of a content, sleeping cat with closed eyes, representing the package's name, which sounds like a cat's purr. The logo's design conveys a sense of calm and ease, suggesting that the purrr package makes functional programming in R more intuitive and manageable."}
:::
::::

. . .

1. Break a complex problem into smaller **sub-problems**.

. . .

2. Solve each sub-problem for **a single element** of a list.
    + Once done, `purrr` will generalize the solution to every element in the list.


## `map()`

The `map()` function **iterates** through each item in a list and applies a function, then returns the new list.

```{r}
#| fig-align: center
#| out-width: 30%
#| echo: false
#| fig-alt: "The image illustrates the concept of a mapping function in programming, specifically in the context of applying a function to each element of a list or vector. On the left, there is a vertical stack of colored blocks in varying shades of orange, representing individual elements. The text `map( , f)` suggests the application of a function f to each element in the sequence. An arrow points to the right, leading to a new vertical stack where each block is enclosed in a box labeled `f()`, indicating that the function `f` has been applied to each element individually. This visual representation demonstrates how mapping functions work by transforming each element in a sequence."

knitr::include_graphics("images/map.png")
```

::: {.callout-tip}
# Using the |> 

The first argument in `map()` is the list, so if we pipe into it, we **only**
specify the function we want to iterate!
:::

## `map()` + Dataframes

A data frame is just a list of columns -- `map()` will apply a function to every column.

. . .

::: columns
::: {.column width="65%"}
```{r}
#| code-line-numbers: false

penguins |> 
  select(where(is.numeric)) |>
  map(.f = ~ mean(.x, na.rm = TRUE))
```

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
::: {.fragment}
Use a lambda function (with `~` and `.x`), just like in `across()`!
:::
:::
:::


## The `map()` Family

The `map_xxx()` variants allow you to specify the **type of output** you want.

+ `map()` creates a *list*.
+ `map_chr()` creates a *character vector*.
+ `map_lgl()` creates an *logical vector*.
+ `map_int()` creates a *integer vector*.
+ `map_dbl()` creates a *numeric vector*.

All take in a list (`.x`) and a function (`.f`) as arguments.

## `map()` + penguins

::: panel-tabset

### `map_dbl()`

Calculate the mean of each column.

```{r}
#| code-line-numbers: false

penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_dbl(.f = ~ mean(.x, na.rm = TRUE))
```

</br>

Output is a **vector of doubles**.


### `map_int()`

Calculate the number of `NA`s in each column.

```{r}
#| code-line-numbers: false

penguins |> 
  map_int(.f = ~ sum(is.na(.x)))
```

Output is a **vector of integers**.


### `map_lgl()`

Calculate the number of `NA`s in each column.

```{r}
#| error: true
#| code-line-numbers: false

penguins |> 
  map_lgl(.f = ~ sum(is.na(.x)))
```

R returns an error if the output is of the wrong type!
:::


## Comparing Speed

Using functional programming can be **much faster** than using `for` loops.

::: panel-tabset

### `for()`

```{r}
#| echo: true
#| code-line-numbers: false

loop_func <- function(df){
  typ <- rep(NA, ncol(df))
  for(i in 1:ncol(df)){
    typ[i] <- class(df[[i]])
  }
  return(typ)
}
```

### `map()`

```{r}
#| echo: true
#| code-line-numbers: false

map_func <- function(df){
  typ <- map_chr(df, class)
  return(typ)
}
```

### Run

```{r}
#| echo: true
#| code-line-numbers: false

df <- as.data.frame(matrix(1,
                           nrow = 5,
                           ncol = 7))

```

::: columns
::: {.column width="47%"}
```{r}
#| code-line-numbers: false

loop_func(df)
```

:::

::: {.column width="3%"}
:::

::: {.column width="47%"}
```{r}
#| code-line-numbers: false

map_func(df)
```

:::
:::

### Compare

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

df <- as_tibble(
  matrix(1,
         nrow = 5,
         ncol = 100000)
  )

microbenchmark::microbenchmark(loop_func(df),
                               map_func(df),
                               times = 20)
```
:::

![](images/speed.png){fig-alt="The image shows a benchmarking result table comparing the execution times of two functions, loop_func(df) and map_func(df), in milliseconds. The table has columns labeled expr, min, lq, mean, median, uq, max, and neval. For loop_func(df), the mean time is approximately 7182.34 milliseconds, with a minimum of 6996.32 milliseconds and a maximum of 8215.57 milliseconds. For map_func(df), the mean time is about 61.49 milliseconds, with a minimum of 54.02 milliseconds and a maximum of 135.86 milliseconds. The results show that map_func(df) performs significantly faster than loop_func(df). Both functions were evaluated 20 times, as indicated in the neval column."}

:::


## `map_if()`

The `map_if()` function allows us to **conditionally** apply a function to each item in a list.

. . .

::: panel-tabset

### `across()`

::: {.midi}
```{r}
#| eval: false
#| code-line-numbers: false

penguins |> 
  mutate(across(.cols = where(is.numeric), 
                .fns = scale))
```

```{r}
#| echo: false
penguins |> 
  select(species:bill_depth_mm, sex) |> 
  mutate(across(.cols = where(is.numeric), 
                .fns = scale)) |> 
  head(n = 8)
```
:::

### `map_if()`

::: {.midi}
```{r}
#| code-line-numbers: false

penguins |> 
  map_if(is.numeric, scale)
```
:::

### `map_if()` to data frame

::: {.midi}
```{r}
#| eval: false
#| code-line-numbers: false

penguins |> 
  map_if(is.numeric, scale) |> 
  bind_cols()
```

```{r}
#| echo: false
penguins |> 
  select(species:bill_depth_mm, sex) |> 
  map_if(is.numeric, scale) |> 
  bind_cols() |> 
  head(n = 8)
```
:::
:::


## The `pmap()` Family

These functions take in a **list of vectors** and a **function**.

+ The function must accept a number of arguments equal to the length of the list,

```{r}
#| fig-align: center
#| out-width: 65%
#| echo: false
#| fig-alt: "The image illustrates the concept of a parallel mapping function, specifically pmap, which applies a function to multiple lists or vectors element-wise. On the left, there are three vertical stacks of colored blocks in different shades of orange, blue, and yellow, each representing a separate list or vector. The text `pmap( , f)` indicates that a function f will be applied to elements from each of these lists in parallel. An arrow points to the right, leading to a new layout where each row contains a function application `f( , , )` with one element from each list placed within the function. This visual demonstrates how pmap applies a function to corresponding elements from multiple inputs simultaneously."

knitr::include_graphics("images/pmap.png")
```


## The `pmap()` Family

The vectors need to have the **same names** as the arguments of the function you are applying.

::: {.midi}
```{r}
#| code-line-numbers: false

fruit <- data.frame(string = c("apple", "banana", "cherry"),
                    pattern = c("p", "n", "h"),
                    replacement = c("P", "N", "H"))
fruit
```
:::

. . .

</br>

```{r}
#| code-line-numbers: false

fruit |> 
  pmap_chr(str_replace_all)
```


## Use functional programming!

```{r}
#| echo: false
#| fig-align: center
#| out-width: 70%
#| fig-alt: "The image shows a chalkboard with Bart Simpson standing beside it, holding a piece of chalk. The chalkboard contains R code that encourages the use of mapping functions instead of loops. The code reads: `S <- I WILL REPLACE LOOPS BY MAPPING FUNCTIONS`, `V <- REP(S, 100)`, and `PURRR::MAP_CHR(V, PRINT)`. This is a humorous take on functional programming in R, advocating for the use of functions from the purrr package as an alternative to traditional loops. Bart looks toward the chalkboard with a satisfied expression."

knitr::include_graphics("images/bart_board_map.png")
```


## [PA 8: The Twelve Days of Christmas](../../group-activities/week-8/PA-8-iteration.qmd)

```{r}
#| echo: false
#| fig-align: center
#| out-width: 80%
#| fig-alt: "The image is an illustrated representation of the Christmas song 'The 12 Days of Christmas,' with each square depicting the gifts given on each day. From left to right and top to bottom, the gifts are a partridge in a pear tree, two turtle doves, three French hens, four calling birds, five golden rings, six geese a-laying, seven swans a-swimming, eight maids a-milking, nine ladies dancing, ten lords a-leaping, eleven pipers piping, and twelve drummers drumming. The title 'The 12 Days of Christmas' is displayed in the center in festive green and red lettering, surrounded by small seasonal decorations. Each illustration captures the traditional imagery associated with this beloved Christmas carol."

knitr::include_graphics("https://studioplayhouse.org/wp-content/uploads/2020/06/12-Days-of-christmas.jpg")
```


## `glue()`

:::: {.columns}
::: {.column width="70%"}

The `glue` package embeds R expressions in curly brackets that are then
evaluated and inserted into the argument string.

:::
::: {.column width="30%"}

```{r}
#| echo: false
#| fig-align: center
#| out-width: 50%
#| fig-alt: "The image is a hexagonal logo for the R package 'glue.' It features an illustration of a glue bottle with an orange label that reads 'glue' in white, playful font. The bottle has an orange nozzle and a gray cap, and the background of the hexagon is textured with a subtle pattern. This design conveys the package's purpose, which is to glue together strings in R, making it easier to combine text and data dynamically."

knitr::include_graphics("images/glue.jpg")
```
:::
::::

```{r}
#| code-line-numbers: false

library(glue)

name <- "Dr. Theobold"
glue('My name is {name}.')
```

</br>

This will be a handy function (and package) for putting our song together!

## PA 8

::: {.midi}
You will write **two** functions, one helper function and one body function, to 
assist you in singing phrases from the 12 Days of Christmas. 

Many of the functions have been started for you, but **none** of them are
complete as is.
:::

. . .

::: columns
::: {.column width="55%"}
::: {.small}
This activity will require knowledge of:

- detecting patterns in strings
- replacing patterns in strings
- conditional operations (if, else if, else)
- function syntax
- function arguments
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
</br>
</br>

[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

:::
:::

<!-- ## Task Card -->

<!-- Every group should have a **task card**! -->

<!-- **On the front**: -->

<!-- - Reminders about string functions from `stringr` -->
<!-- - Reminders about regular expressions -->

<!-- . . . -->

<!-- **On the back**: -->

<!-- - `if()`, `else if()`, and `else()` statements -->
<!-- - `if_else()` and `case_when()` functions -->

## Getting Started

The partner who has __the most vowels in their name__ starts as the Coder
(dictating their proposed solution to the Developer (typing and listening). 

If you are tied, play rock-paper-scissors. :)

- The Coder **does not type**. 
  * The collaborative editing feature should allow you to track what is being 
  typed. 
- The Developer **only types what they are told to type**. 

## Submission

> Your `full_phrase` column is the answer to this week's Practice Activity.

- Each person will copy and paste your `full_phrase` column to show me the
phrases your group made!

- Each person download and submit the `PA-8-iteration.html` file.
