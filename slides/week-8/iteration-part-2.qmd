---
title: "Cool Plots & Searching for Efficiency"
format: 
  revealjs:
      theme: [simple, ../style.scss]
      auto-stretch: false
editor: source
---

Today we will...

::: {.midi}
-   Review Lab 7
    + Function Checks
    + Creative Plots
    + Additional Tools for Creativity / Clarity
<!-- -   Lab 7 Peer Review -->
<!--     + Function Style -->
<!--     + `if()` Style -->
-   Work Time
    + Lab 8: Searching for Efficiency
:::

# Lab 7

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)

fish <- read_csv(here::here("labs", 
                            "instructions", 
                            "data", 
                            "BlackfootFish.csv")
                 )
```


## Vectorized Function Checks

::: {.midi}
```{r}
#| echo: true
#| label: student-rescale-function
#| code-line-numbers: false

rescale_01 <- function(vec) {
  
  if(!is.numeric(vec)) {
    stop("Input vector is not numeric")
  }
  
  if(length(vec) <= 1) {
    stop("Input vector length must have at least two elements")
  }
  
  range <- range(vec, na.rm = TRUE)
  
  return((vec - range[1]) / (range[2] - range[1]))
}
```
:::

. . .

**How would you transform these input checks so the `rescale_01()` function is vectorized?**

## Function Checks for Data Frames

::: {.midi}
```{r}
#| echo: true
#| label: student-df-function
#| code-line-numbers: false

rescale_column <- function(df, var) {
  
  df <- df |>
    dplyr::mutate(across(.cols = {{ var }}, .fns = ~rescale_01(..x)
                         )
                  )
  
  return(df)
}
```
:::

. . .

**How would you check if the input `df` was a data frame?**

## Function Checks for Data Frames -- Columns

::: {.midi}
```{r}
#| echo: true
#| label: student-df-check
#| code-line-numbers: false

rescale_column <- function(df, cols){
  
  stopifnot(is.data.frame(df))
  
  df <- df |>
    dplyr::mutate(across(.cols = {{ cols }}, .fns = ~rescale_01(.x)
                         )
                  )
  
  return(df)
}
```
:::

. . .

**How would you check if the input `cols` were columns that existed in `df`?**

# Take Advanced R in the Spring! 

<!-- # Function Checks for Data Frames -- Columns -->

```{r}
#| echo: false
#| label: student-code-column-check
#| code-line-numbers: false

rescale_column <- function(df, cols){

  col_names <- str_c("\\", {cols})

  stopifnot(col_names %in% colnames(df))
  
  df <- df |>
    dplyr::mutate(across(.cols = {{ cols }}, .fns = ~rescale_01(..x)
                         )
                  )
  
  return(df)
}

```

# Plots from Lab 7

## Stacked Bars with Color!

::: columns
::: {.column width="75%"}
![](images/student-1.png)
:::

::: {.column width="5%"}
:::

::: {.column width="20%"}
::: {.fragment}
Notice how their facets have more informative titles?
:::
:::
:::

```{r}
#| eval: false
#| echo: false

fish |>
  filter(if_any(.cols = everything(), .fns = is.na)) |>
  mutate(trip = as.character(trip),
         trip = fct_recode(trip,
      "Trip 1" = "1",
      "Trip 2" = "2")) |>
  ggplot(mapping = aes(x = year, fill = section)) +
  facet_grid(~ trip) + 
  geom_bar() +
  scale_fill_viridis_d() +
  labs(x = "Year",
       y = NULL,
       title = "Missing observation frequency by section, trip and year",
       subtitle = "Number of missing observations",
       color = "Section")
```

## More Stacked Bars with Color!

::: columns
::: {.column width="75%"}
![](images/student-4.png)

:::

::: {.column width="5%"}
:::

::: {.column width="20%"}
::: {.fragment}
Notice how every year with measurements is displayed?
:::
:::
:::


```{r}
#| eval: false
#| echo: false

fish |>
  filter(is.na(weight)) |>
  mutate(trip = fct_recode(trip, 
                           "Trip 1" = `1`,
                           "Trip 2" = `2`)
         )|>
  group_by(year, 
           section, 
           trip) |>
  summarise(missing_count = n(), 
            .groups = 'drop') |>
  ggplot(aes(x = factor(year), 
             y = missing_count, 
             fill = section)) +
  geom_bar(stat = "identity", 
           position = "stack") +
  facet_wrap(~ trip, ncol = 2) +
  theme_bw() +
  labs(
    x = "Year",
    y = "",
    subtitle = "Number of Missing Values",
    fill = "Section",
    title = "Frequency of Missing Values in 'Weight' by Year, Section, and Trip"
  ) +
  scale_fill_manual(values = c("Johnsrud" = "steelblue", "ScottyBrown" = "gray"))  # Adjusted color for ScottyBrown
```

## Combining Year and Trip

![](images/student-2.png){width=80%}

```{r}
#| eval: false
#| echo: false

fish |>
  group_by(year, section, trip) |>
  summarize(missing_weight = sum(is.na(weight)), .groups = "drop") |>
  # Create a combined label for year and trip
  mutate(year_trip = paste(year, trip, sep = "-")) |>
  # Plotting the data
  ggplot(mapping = aes(x = missing_weight, y = year_trip, fill = section)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Count of Missing Values in Weight by Year, Section, and Trip",
    subtitle = "Year-Trip #",
    x = "Count of Missing Weight Values",
    y = "",
    fill = "Section"
  ) +
  theme_minimal()
```

## Faceting by Year!

![](images/student-3.png)

```{r}
#| eval: false
#| echo: false

fish |> 
  #Make sure it is rows lacking wight data
  filter(is.na(weight)) |>
  #Alter into a usable distincter variable
  mutate(trip = as.factor(trip)) |>
  group_by(year, section, trip) |>
  summarise(Missing_Count = n(), .groups = "drop") |>
  ggplot(aes(x = section, y = Missing_Count, fill = trip)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ year, ncol = 5) +
  labs(
    title = "Frequency of Missing Weight Values by Year, Section, and Trip",
    subtitle = "Count of Missing Values",
    x = "Section",
    y = "",
    fill = "Trip"
    ) +
  theme_bw(base_size = 8) +  
  theme(
    strip.text = element_text(size = 12),
    aspect.ratio = 0.6,
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
  ) +
  scale_fill_manual(values = c("darkcyan", "cyan2"))
```


## A Line Plot with Colors!

![](images/student-5.png){width=80%}

```{r}
#| eval: false
#| echo: false

fish |>
  group_by(year, section, trip) |>
  summarize(missing_count = sum(is.na(weight)), .groups = "drop") |>
  mutate(trip = case_when(
    trip == 1 ~ "Trip 1",
    trip == 2 ~ "Trip 2")) |>
  ggplot(aes(x = year, y = missing_count, color = section)) +
  geom_line(size = 1) +
  scale_color_brewer(palette = "Set2") +
  labs(
    title = "Missing Data in Measurements of Trout Species (Blackfoot River)",
    x = "Year",
    subtitle = "Weight Values",
    y = "",
    color = "Section") +
  facet_wrap(~ trip) +
  theme_minimal()
```

## Do you want your legend on the left?

::: {.small}
```{r}
#| eval: true
#| echo: true
#| code-fold: true
#| code-line-numbers: "18"

fish |>
  group_by(year, section, trip) |>
  summarize(missing_count = sum(is.na(weight)), .groups = "drop") |>
  mutate(trip = case_when(
    trip == 1 ~ "Trip 1",
    trip == 2 ~ "Trip 2")) |>
  ggplot(aes(x = year, y = missing_count, color = section)) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set2") +
  labs(
    title = "Number of Missing Weight Measurements of Trout Species (Blackfoot River)",
    x = "",
    subtitle = "Across Sections of River and Trip Number",
    y = "",
    color = "Section") +
  facet_wrap(~ trip) +
  theme_minimal() +
  theme(legend.position = "top")
```
:::

## Could you remove your legend?

::: {.small}
```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: "20-30"

plot <- fish |>
  group_by(year, section, trip) |>
  summarize(missing_count = sum(is.na(weight)), .groups = "drop") |>
  mutate(trip = case_when(
    trip == 1 ~ "Trip 1",
    trip == 2 ~ "Trip 2")) |>
  ggplot(aes(x = year, y = missing_count, color = section)) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set2") +
  labs(
    title = "Missing Fish Weights for Trout Species on the Blackfoot River",
    x = "Year",
    y = "",
    color = "Section") +
  facet_wrap(~ trip) +
  theme_minimal()


annotate_text <- data.frame(year = c(1994, 1993), 
                            missing_count = c(150, 40),
                            trip = factor(c("Trip 2", "Trip 2"), 
                                          levels = c("Trip 1","Trip 2"), 
                                          ), 
                            section = factor(c("Johnsrud", "ScottyBrown"), 
                                             levels = c("Johnsrud", "ScottyBrown"))
                            )
plot + 
  geom_text(data = annotate_text, label = c("Johnsrud", "ScottyBrown")) + 
  theme(legend.position = "none", 
        plot.title = element_text(size = 12), 
        axis.text.x = element_text(size = 12), 
        axis.text.y = element_text(size = 12), 
        axis.title = element_text(size = 12),
        strip.text.x = element_text(size = 12)
        )
```
:::

## Could you remove your legend?

::: {.small}
```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: "13-16,22"

library(ggtext)

fish |>
  group_by(year, section, trip) |>
  summarize(missing_count = sum(is.na(weight)), .groups = "drop") |>
  mutate(trip = case_when(
    trip == 1 ~ "Trip 1",
    trip == 2 ~ "Trip 2")) |>
  ggplot(aes(x = year, y = missing_count, color = section)) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set2") +
  labs(
    title = str_c("Missing Fish Weights for the ",
      "<span style = 'color:#66C2A5'>**Johnsrud**</span>",
      " and <span style = 'color:#FC8D62'>**ScottyBrown**</span>",
      " Sections of the Blackfoot River"),
    x = "Year",
    y = "",
    color = "Section") +
  facet_wrap(~ trip) +
  theme_minimal() + 
  theme(plot.title = ggtext::element_markdown(size = 16), 
        legend.position = "none",
        axis.text.x = element_text(size = 12), 
        axis.text.y = element_text(size = 12), 
        axis.title = element_text(size = 12),
        strip.text.x = element_text(size = 12)
        )
```
:::


<!-- #  -->

<!-- ::: columns -->
<!-- ::: {.column width="40%"} -->
<!-- ::: {.large} -->
<!-- Other Cool Stuff People Have Done! -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.column width="5%"} -->
<!-- ::: -->

<!-- ::: {.column width="55%"} -->
<!-- ![](images/student-gallery.png){width=40%} -->
<!-- ::: -->
<!-- ::: -->

<!-- # Lab 7 Peer Review -->

## Function Formatting

- There should be a new line after the opening {
- The closing } should be on its own line
- The body of the function should be indented
- The code uses whitespace around all commas and arithmetic operators
- The code uses new lines (returns) to eliminate character wrapping

## Good 

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

rescale_01 <- function(x) {
  if (!is.numeric(x)) {
    stop("Input must be a numeric vector")
  }
  
  if (length(x) <= 1) {
    stop("Length of the input vector is not greater than 1")
  }
  
  get_range <- range(x, na.rm = TRUE)
  (x - get_range[1]) / (get_range[2] - get_range[1])
}

```

## Not so good

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

rescale_01 <- function(x) 
{
  if (!is.numeric(x)) {
    stop("Input must be a numeric vector")
  }
  
  if (length(x) <= 1) {
    stop("Length of the input vector is not greater than 1")
  }
  
  get_range <- range(x, na.rm=TRUE)
  (x-get_range[1]) / (get_range[2]-get_range[1])}
```

## `if()` on a single line?

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

rescale_01 <- function(x) {
  
  if(!is.numeric(x)) stop("Input vector must be numeric.")
  if(length(x) <= 1) stop("Input vector requires more than one element.")
  
  range_1 <- range(x, na.rm = TRUE)
  
  (x - range_1[1]) / (range_1[2] - range_1[1])
}
```

This technically works because the `stop()` is on the **same line** as `if()`. 

. . .

But what if you have **multiple** things that happen if the condition is met?

## `if()` on multiple lines

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

pluralize_gift <- function(gift){

  # Check if the word ends in a y
  if(str_detect(gift, "y$")){
    
    # Replace the y at the end with an ies
    gift <- str_replace(gift, 
                        pattern = "y",
                        replacement = "ies")
    } 
  # Check for a oo (goose)
  else if(str_detect(gift,"oo")){ 
    
    # Replace the oo with a ee
    gift <- str_replace(gift, 
                        pattern = "oo",
                        replacement = "ee")
    } 
  else{
    # Add an s to the end of the gift
    gift <- str_c(gift, replacement = "s")
    }

  return(gift)

}
```


# [Lab 8: Searching for Efficiency](../../labs/instructions/lab-8-instructions.qmd)

> Revisit previous lab problems through the lens of efficiency

> - Use functions from `map()` instead of `across()`
> - Reduce separate pipelines into a single pipeline
