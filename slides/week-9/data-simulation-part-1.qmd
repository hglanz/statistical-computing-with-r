---
title: "Simulating Data in R"
format: 
  revealjs:
      theme: [simple, ../style.scss]
      auto-stretch: false
editor: source
execute:
  echo: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
```

## Tuesday, March 4

Today we will...

+ Plan for Week 9 & 10
+ New Material
  + Statistical Distributions
  + Simulating Data
+ PA 9: Instrument Con

# Week 9 

. . .

- PA 9 (today)
- Lab 9 & Challenge 9 (last ones!)
<!-- - Revisions on Lab 7 (due Friday)  -->
<!-- - Code Review Lab 8 (due Sunday) -->

# Week 10

. . .

- Final Exam and Project Week!

. . .

<!-- ::: {.callout-warning} -->

<!-- No revisions will be accepted on Lab 8 or Lab 9. You can, however, talk with me -->
<!-- during class about any revisions you've made. :)  -->
<!-- ::: -->

# Statistical Distributions

## Statistical Distributions

Recall from your statistics classes...

::: panel-tabset

### Random Variable

A **random variable** is a value we don't know until we take a **sample**.

+ Coin flip:  could be heads (0) or tails (1)
+ Person's height:  could be anything from 0 feet to 10 feet.
+ Annual income of a US worker:  could be anything from $0 to $1.6 billion

### Distribution

The **distribution** of a random variable tells us its **possible values** and
**how likely they are to occur**.

:::: {.columns}
::: {.column width=73%}
+ Coin flip: 50% chance of heads and tails.
+ Heights follow a bell curve centered at 5 foot 7.
+ Most American workers make under $100,000.
:::
::: {.column width=27%}
![](images/dist.png)
:::
::::
:::


## Statistical Distributions with Names!

::: panel-tabset

### `unif`

**Uniform Distribution**

:::: columns
::: column
+ When you know the **range** of values, but not much else.
+ All values in the range are **equally likely** to occur.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = runif(1000))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun=dunif, col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::
### `norm`

**Normal Distribution**

:::: columns
::: column
+ When you expect values to fall **near the center**.
+ Frequency of values follows a **bell shaped curve**.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rnorm(1000))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun=dnorm, col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::
### `t`

**t-Distribution**

:::: columns
::: column
+ A slightly **wider** bell curve.
+ Basically used in the same context as the **Normal distribution**, but more common with  real data (when the *standard deviation* is unknown).
:::
::: column
```{r}
#| out-width: 100%
#| echo: false

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun= function(x) dt(x, df = 5), col = "cornflowerblue", lwd = 2) +
  stat_function(fun = dnorm, col = "indianred", lwd = 1) +
  theme_classic()
```
:::
::::
### `chisq`

**Chi-Square Distribution**

:::: columns
::: column
+ Somewhat **skewed**, and only allows values **above zero**.
+ Used in testing **count data**.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rchisq(1000, df = 5))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun= function(x) dchisq(x, df = 5), col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::

### `binom`

**Binomial Distribution**

:::: columns
::: column
::: {.midi}
+ Appears when you have **two possible outcomes**, and you are **counting** how many times each outcome occurred.
+ This is a *discrete* distribution, as there can only be whole number values!
:::
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rbinom(1000, 10, .8))

ggplot(my_samples, aes(x)) + 
  geom_bar(fill = "grey", col = "white") + 
  theme_classic()
```
:::
::::
:::

## Distribution Functions in R

::: panel-tabset
### `r`

`r` is for **random sampling**.

::: {.midi}
+ Generate random values from a distribution.
+ We use this to **simulate** data (create pretend observations).
:::

:::: columns
::: column
::: {.midi}
```{r}
#| code-line-numbers: false

runif(n = 3, min = 10, max = 20)
rnorm(n = 3)
rnorm(n = 3, mean = -100, sd = 50)
```
:::
:::
::: column
::: {.midi}
```{r}
#| code-line-numbers: false

rt(n = 3, df = 11)
rbinom(n = 3, size = 10, prob = 0.7)
rchisq(n = 3, df = 11)
```
:::
:::
::::

### `p`

`p` is for **probability**.

+ Compute the chances of observing a value less than `x`.
+ We use this for calculating **p-values**.

:::: {.columns}
::: {.column width=45%}
```{r}
#| code-line-numbers: false

pnorm(q = 1.5)
pnorm(q = 70, mean = 67, sd = 3)
```
:::
::: {.column width=55%}
```{r}
#| code-line-numbers: false

1 - pnorm(q = 70, mean = 67, sd = 3)
pnorm(q = 70, mean = 67, sd = 3, lower.tail = FALSE)
```
:::
::::

### `q`

`q` is for **quantile**.

+ Given a probability $p$, compute $x$ such that $P(X < x) = p$.
+ The `q` functions are "backwards" of the `p` functions.

```{r}
#| code-line-numbers: false

qnorm(p = 0.95)
qnorm(p = 0.95, mean = 67, sd = 3)
```

### `d`

`d` is for **density**.

::: {.midi}
+ Compute the *height* of a distribution curve at a given $x$.
+ For **discrete** dist: probability of getting **exactly** $x$.
+ For **continuous** dist: usually meaningless.
:::

Probability of *exactly* 12 heads in 20 coin tosses, with a 70% chance of tails?

```{r}
#| code-line-numbers: false

dbinom(x = 12, size = 20, prob = 0.3)
```

:::

<!-- ## Empirical vs. Theoretical Distributions -->

<!-- ```{r} -->
<!-- #| echo: false -->
<!-- set.seed(435) -->
<!-- data <- tibble(names   = charlatan::ch_name(1000), -->
<!--         height  = rnorm(1000, mean = 67, sd = 3), -->
<!--         age     = runif(1000, min = 15, max = 75), -->
<!--         measure = rbinom(1000, size = 1, prob = 0.6)) |>  -->
<!--   mutate(supports_measure_A = ifelse(measure == 1, "yes", "no")) -->
<!-- ``` -->


<!-- ::: panel-tabset -->
<!-- ### Empirical Distribution -->

<!-- Empirical: the observed data. -->

<!-- ```{r} -->
<!-- #| fig-align: center -->
<!-- #| out-width: 60% -->
<!-- #| code-fold: true -->
<!-- data %>% -->
<!--   ggplot(aes(x = height)) + -->
<!--   geom_histogram(aes(y = ..density..), bins = 10, color = "white")  -->
<!-- ``` -->

<!-- ### Theoretical Distributions -->

<!-- Theoretical: the distribution curve. -->

<!-- ```{r} -->
<!-- #| fig-align: center -->
<!-- #| out-width: 60% -->
<!-- #| code-fold: true -->
<!-- data %>% -->
<!--   ggplot(aes(x = height)) + -->
<!--   stat_function(fun = ~dnorm(.x, mean = 67, sd = 3), -->
<!--                 col = "steelblue", lwd = 2) + -->
<!--   stat_function(fun = ~dnorm(.x, mean = 67, sd = 2), -->
<!--                 col = "orange2", lwd = 2) -->
<!-- ``` -->
<!-- ::: -->


<!-- ## Plotting Both Distributions -->

<!-- ::: panel-tabset -->

<!-- ### <font size = 6> `geom_histogram` </font> -->

<!-- :::: {.columns} -->
<!-- ::: {.column width=76%} -->
<!-- ```{r hist} -->
<!-- #| code-line-numbers: "3" -->
<!-- #| fig-align: center -->
<!-- #| out-width: 80% -->
<!-- data |>  -->
<!--   ggplot(aes(x = height)) + -->
<!--   geom_histogram(bins = 10, color = "white") -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: {.column width=24%} -->
<!-- 1. Plot your data. -->
<!-- ::: -->
<!-- :::: -->

<!-- ### <font size = 6> `dnorm` </font> -->
<!-- :::: {.columns} -->
<!-- ::: {.column width=76%} -->
<!-- ```{r} -->
<!-- #| code-line-numbers: "4" -->
<!-- #| fig-align: center -->
<!-- #| out-width: 80% -->
<!-- data |>  -->
<!--   ggplot(aes(x = height)) + -->
<!--   geom_histogram(bins = 10, color = "white") + -->
<!--   stat_function(fun = ~ dnorm(.x, mean = 67, sd = 3), -->
<!--                 color = "steelblue", lwd = 2) -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: {.column width=24%} -->
<!-- 2. Add a density curve. -->
<!-- ::: -->
<!-- :::: -->

<!-- ### <font size = 6> `..density..` </font> -->

<!-- :::: {.columns} -->
<!-- ::: {.column width=76%} -->
<!-- ```{r} -->
<!-- #| code-line-numbers: "3" -->
<!-- #| fig-align: center -->
<!-- #| out-width: 80% -->
<!-- data |>  -->
<!--   ggplot(aes(x = height)) + -->
<!--   geom_histogram(aes(y = ..density..), -->
<!--                  bins = 10, color = "white") + -->
<!--   stat_function(fun = ~ dnorm(.x, mean = 67, sd = 3), -->
<!--                 color = "steelblue", lwd = 2) -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: {.column width=24%} -->
<!-- 3. Change the y-axis of the histogram to match the y-axis of the density. -->
<!-- ::: -->
<!-- :::: -->

<!-- ::: -->

# Simulating Data


## Simulate a Dataset

::: panel-tabset

### The Idea

We can generate fake data based on the assumption that a variable follows a certain distribution.

+ We randomly sample observations from the distribution.

```{r}
#| code-line-numbers: false

age <- runif(1000, min = 15, max = 75)
```


### `set.seed()`

::: {.midi}
Since there is randomness involved, we will get a different result each time we run the code.
:::

:::: {.columns}
::: {.column width=50%}
::: {.midi}
```{r}
#| code-line-numbers: false

runif(3, min = 15, max = 75)
```
:::
:::
::: {.column width=50%}
::: {.midi}
```{r}
#| code-line-numbers: false

runif(3, min = 15, max = 75)
```
:::
:::
::::

</br>

::: {.fragment}
::: {.midi}
To make a **reproducible** random sample, we first **set the seed**:
:::

:::: {.columns}
::: {.column width=50%}
::: {.midi}
```{r}
#| code-line-numbers: false

set.seed(93401)
runif(3, min = 15, max = 75)
```
:::
:::
::: {.column width=50%}
::: {.midi}
```{r}
#| code-line-numbers: false

set.seed(93401)
runif(3, min = 15, max = 75)
```
:::
:::
:::
::::

### `tibble`

::: {.small}
```{r}
#| code-line-numbers: "4-6" 
set.seed(435)

fake_data <- tibble(names   = charlatan::ch_name(1000),
                    height  = rnorm(1000, mean = 67, sd = 3),
                    age     = runif(1000, min = 15, max = 75),
                    measure = rbinom(1000, size = 1, prob = 0.6)
                    ) |> 
  mutate(supports_measure_A = ifelse(measure == 1, "yes", "no"))

head(fake_data)
```
:::

### visualize

Check to see the ages look uniformly distributed.

::: {.small}
```{r}
#| code-fold: true
#| fig-align: center
#| out-width: 60%
fake_data |> 
  ggplot(mapping = aes(x = age,
                       fill = supports_measure_A)) +
  geom_histogram(show.legend = F) +
  facet_wrap(~ supports_measure_A,
             ncol = 1) +
  scale_fill_brewer(palette = "Paired") +
  theme_bw() +
  labs(x = "Age (years)",
       y = "",
       subtitle = "Number of Individuals Supportng Measure A for Different Ages",)
```
:::
:::

# [PA 9: Instrument Con](../../group-activities/week-9/PA-9.qmd)

> Is the instrument salesman selling fake instruments?

## PA 9

::: {.midi}
In this practice activity you and your partner will write a function to simulate
the weight of various band instruments, with the goal of identifying whether a
particular shipment of instruments has a "reasonable" weight.
:::

. . .

::: columns
::: {.column width="55%"}
::: {.small}
This activity will require knowledge of:

- named distributions 
- probability calculations related to distributions
- function documentation
- function syntax
- function arguments
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
</br>
</br>

[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

:::
:::

<!-- ## Task Card -->

<!-- Every group should have a **task card**! -->

<!-- - The table on distributions provides pictures on what each function (e.g.,  -->
<!-- `p`, `d`, `q`) means -->

<!-- - The list of distributions should help you decide what function to use (e.g.,  -->
<!-- `pchisq()`) -->

## Getting Started

The person who whose birthday is closest to today starts as the Coder 
(giving instructions on what to type to the Developer)!

- The Coder **does not type**. 
  * The collaborative editing feature should allow you to track what is being 
  typed. 
- The Developer **only types what they are told to type**. 

## Submission

You and your partner together should address the following questions:

> How many of these samples had a weight less than or equal to Professor Hill's 
> shipment? 


> Do you beleive Professor Hill ordered genuine instruments?
